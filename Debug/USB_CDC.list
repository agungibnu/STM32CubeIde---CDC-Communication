
USB_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d78  08008d78  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008d78  08008d78  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d78  08008d78  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001244  200001e0  08008f60  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001424  08008f60  00021424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d389  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb0  00000000  00000000  0002d592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00030148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00030c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3b2  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb3c  00000000  00000000  0004ba32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861ae  00000000  00000000  0005a56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e071c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003540  00000000  00000000  000e076c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008c34 	.word	0x08008c34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008c34 	.word	0x08008c34

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x26>
         ITM_SendChar((*ptr++));
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffca 	bl	800015c <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x12>
     }
     return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}

080001e0 <send_debug_CDC>:

void send_debug_CDC(char *data){
 80001e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001e4:	b087      	sub	sp, #28
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	466b      	mov	r3, sp
 80001ec:	461e      	mov	r6, r3

	HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	4840      	ldr	r0, [pc, #256]	; (80002f8 <send_debug_CDC+0x118>)
 80001f6:	f000 fd8b 	bl	8000d10 <HAL_GPIO_WritePin>
	int dataLen = strlen(data);
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f7ff ffa6 	bl	800014c <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	617b      	str	r3, [r7, #20]
	char dataCDC[dataLen + 1];
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	1c59      	adds	r1, r3, #1
 8000208:	1e4b      	subs	r3, r1, #1
 800020a:	613b      	str	r3, [r7, #16]
 800020c:	460a      	mov	r2, r1
 800020e:	2300      	movs	r3, #0
 8000210:	4690      	mov	r8, r2
 8000212:	4699      	mov	r9, r3
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	f04f 0300 	mov.w	r3, #0
 800021c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000228:	460a      	mov	r2, r1
 800022a:	2300      	movs	r3, #0
 800022c:	4614      	mov	r4, r2
 800022e:	461d      	mov	r5, r3
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	00eb      	lsls	r3, r5, #3
 800023a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800023e:	00e2      	lsls	r2, r4, #3
 8000240:	460b      	mov	r3, r1
 8000242:	3307      	adds	r3, #7
 8000244:	08db      	lsrs	r3, r3, #3
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	ebad 0d03 	sub.w	sp, sp, r3
 800024c:	466b      	mov	r3, sp
 800024e:	3300      	adds	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	strcpy(dataCDC, data);
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f007 fca7 	bl	8007ba8 <strcpy>
	dataCDC[dataLen] = '\n';
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	4413      	add	r3, r2
 8000260:	220a      	movs	r2, #10
 8000262:	701a      	strb	r2, [r3, #0]
	dataCDC[dataLen + 1] = '\0';
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	2100      	movs	r1, #0
 800026c:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*)dataCDC, strlen(dataCDC));
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29b      	uxth	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f006 ff42 	bl	8007104 <CDC_Transmit_FS>
	printf(dataCDC);
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f007 fc49 	bl	8007b18 <iprintf>
	HAL_Delay(5);
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fa8c 	bl	80007a4 <HAL_Delay>

	if (receiveCDC[0] != 0){
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <send_debug_CDC+0x11c>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d020      	beq.n	80002d6 <send_debug_CDC+0xf6>
		sprintf(text, "Received CDC data : %s", (char*)receiveCDC);
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <send_debug_CDC+0x120>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a18      	ldr	r2, [pc, #96]	; (80002fc <send_debug_CDC+0x11c>)
 800029a:	491a      	ldr	r1, [pc, #104]	; (8000304 <send_debug_CDC+0x124>)
 800029c:	4618      	mov	r0, r3
 800029e:	f007 fc63 	bl	8007b68 <siprintf>
		CDC_Transmit_FS((uint8_t*)text, strlen(text));
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <send_debug_CDC+0x120>)
 80002a4:	681c      	ldr	r4, [r3, #0]
 80002a6:	4b16      	ldr	r3, [pc, #88]	; (8000300 <send_debug_CDC+0x120>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff4e 	bl	800014c <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	4619      	mov	r1, r3
 80002b6:	4620      	mov	r0, r4
 80002b8:	f006 ff24 	bl	8007104 <CDC_Transmit_FS>
		printf(text);
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <send_debug_CDC+0x120>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f007 fc29 	bl	8007b18 <iprintf>
		HAL_Delay(5);
 80002c6:	2005      	movs	r0, #5
 80002c8:	f000 fa6c 	bl	80007a4 <HAL_Delay>
		memset(receiveCDC, 0, sizeof(receiveCDC));
 80002cc:	2264      	movs	r2, #100	; 0x64
 80002ce:	2100      	movs	r1, #0
 80002d0:	480a      	ldr	r0, [pc, #40]	; (80002fc <send_debug_CDC+0x11c>)
 80002d2:	f007 fb3d 	bl	8007950 <memset>
	}

	HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, 1);
 80002d6:	2201      	movs	r2, #1
 80002d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002dc:	4806      	ldr	r0, [pc, #24]	; (80002f8 <send_debug_CDC+0x118>)
 80002de:	f000 fd17 	bl	8000d10 <HAL_GPIO_WritePin>
	free(text);
 80002e2:	4b07      	ldr	r3, [pc, #28]	; (8000300 <send_debug_CDC+0x120>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f007 fb1c 	bl	8007924 <free>
 80002ec:	46b5      	mov	sp, r6
}
 80002ee:	bf00      	nop
 80002f0:	371c      	adds	r7, #28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002f8:	40011000 	.word	0x40011000
 80002fc:	20000200 	.word	0x20000200
 8000300:	200001fc 	.word	0x200001fc
 8000304:	08008c4c 	.word	0x08008c4c

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030e:	f000 f9e7 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000312:	f000 f825 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000316:	f000 f87d 	bl	8000414 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800031a:	f006 fe1f 	bl	8006f5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  text = malloc(512);
 800031e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000322:	f007 faf7 	bl	8007914 <malloc>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <main+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  int counter = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter = counter + 1;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
	  sprintf(text,"Counter number : %d", counter);
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <main+0x50>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4907      	ldr	r1, [pc, #28]	; (800035c <main+0x54>)
 8000340:	4618      	mov	r0, r3
 8000342:	f007 fc11 	bl	8007b68 <siprintf>
	  send_debug_CDC(text);
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <main+0x50>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff48 	bl	80001e0 <send_debug_CDC>
	  HAL_Delay(250);
 8000350:	20fa      	movs	r0, #250	; 0xfa
 8000352:	f000 fa27 	bl	80007a4 <HAL_Delay>
	  counter = counter + 1;
 8000356:	e7ec      	b.n	8000332 <main+0x2a>
 8000358:	200001fc 	.word	0x200001fc
 800035c:	08008c64 	.word	0x08008c64

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b094      	sub	sp, #80	; 0x50
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f007 faee 	bl	8007950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	f107 0314 	add.w	r3, r7, #20
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000390:	2301      	movs	r3, #1
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	2302      	movs	r3, #2
 80003a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fa30 	bl	800281c <HAL_RCC_OscConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003c2:	f000 f873 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	230f      	movs	r3, #15
 80003c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 fc9c 	bl	8002d20 <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ee:	f000 f85d 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003f2:	2310      	movs	r3, #16
 80003f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 fdeb 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000408:	f000 f850 	bl	80004ac <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3750      	adds	r7, #80	; 0x50
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <MX_GPIO_Init+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <MX_GPIO_Init+0x90>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <MX_GPIO_Init+0x90>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	480c      	ldr	r0, [pc, #48]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000478:	f000 fc4a 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin_Pin */
  GPIO_InitStruct.Pin = LED_Pin_Pin;
 800047c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2302      	movs	r3, #2
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Pin_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000496:	f000 fab7 	bl	8000a08 <HAL_GPIO_Init>

}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <Error_Handler+0x8>
	...

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_MspInit+0x60>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_MspInit+0x60>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f903 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000572:	f000 fd0a 	bl	8000f8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000f04 	.word	0x20000f04

08000580 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	e00a      	b.n	80005a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000592:	f3af 8000 	nop.w
 8000596:	4601      	mov	r1, r0
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	b2ca      	uxtb	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf0      	blt.n	8000592 <_read+0x12>
	}

return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e0:	605a      	str	r2, [r3, #4]
	return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_isatty>:

int _isatty(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <_sbrk+0x5c>)
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <_sbrk+0x60>)
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <_sbrk+0x64>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <_sbrk+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	429a      	cmp	r2, r3
 800064a:	d207      	bcs.n	800065c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800064c:	f007 f938 	bl	80078c0 <__errno>
 8000650:	4603      	mov	r3, r0
 8000652:	220c      	movs	r2, #12
 8000654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	e009      	b.n	8000670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <_sbrk+0x64>)
 800066c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20005000 	.word	0x20005000
 800067c:	00000400 	.word	0x00000400
 8000680:	20000264 	.word	0x20000264
 8000684:	20001428 	.word	0x20001428

08000688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000694:	f7ff fff8 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800069a:	490c      	ldr	r1, [pc, #48]	; (80006cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a09      	ldr	r2, [pc, #36]	; (80006d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006b0:	4c09      	ldr	r4, [pc, #36]	; (80006d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f007 f905 	bl	80078cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fe21 	bl	8000308 <main>
  bx lr
 80006c6:	4770      	bx	lr
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80006d0:	08008d80 	.word	0x08008d80
  ldr r2, =_sbss
 80006d4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80006d8:	20001424 	.word	0x20001424

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_Init+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_Init+0x28>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f947 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	200f      	movs	r0, #15
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff fedc 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f95f 	bl	80009ee <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f927 	bl	800099a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a03      	ldr	r2, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000008 	.word	0x20000008
 800078c:	20000268 	.word	0x20000268

08000790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000268 	.word	0x20000268

080007a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ac:	f7ff fff0 	bl	8000790 <HAL_GetTick>
 80007b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007bc:	d005      	beq.n	80007ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_Delay+0x44>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ca:	bf00      	nop
 80007cc:	f7ff ffe0 	bl	8000790 <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d8f7      	bhi.n	80007cc <HAL_Delay+0x28>
  {
  }
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000008 	.word	0x20000008

080007ec <__NVIC_SetPriorityGrouping>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_GetPriorityGrouping>:
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_EnableIRQ>:
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0b      	blt.n	800087a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f003 021f 	and.w	r2, r3, #31
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <__NVIC_EnableIRQ+0x34>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	095b      	lsrs	r3, r3, #5
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100

08000888 <__NVIC_SetPriority>:
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db0a      	blt.n	80008b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	490c      	ldr	r1, [pc, #48]	; (80008d4 <__NVIC_SetPriority+0x4c>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440b      	add	r3, r1
 80008ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008b0:	e00a      	b.n	80008c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4908      	ldr	r1, [pc, #32]	; (80008d8 <__NVIC_SetPriority+0x50>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	3b04      	subs	r3, #4
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	440b      	add	r3, r1
 80008c6:	761a      	strb	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EncodePriority>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f1c3 0307 	rsb	r3, r3, #7
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	bf28      	it	cs
 80008fa:	2304      	movcs	r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3304      	adds	r3, #4
 8000902:	2b06      	cmp	r3, #6
 8000904:	d902      	bls.n	800090c <NVIC_EncodePriority+0x30>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3b03      	subs	r3, #3
 800090a:	e000      	b.n	800090e <NVIC_EncodePriority+0x32>
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43da      	mvns	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000924:	f04f 31ff 	mov.w	r1, #4294967295
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43d9      	mvns	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	4313      	orrs	r3, r2
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	; 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SysTick_Config>:
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000950:	d301      	bcc.n	8000956 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000952:	2301      	movs	r3, #1
 8000954:	e00f      	b.n	8000976 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <SysTick_Config+0x40>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095e:	210f      	movs	r1, #15
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f7ff ff90 	bl	8000888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <SysTick_Config+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SysTick_Config+0x40>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff2d 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ac:	f7ff ff42 	bl	8000834 <__NVIC_GetPriorityGrouping>
 80009b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	6978      	ldr	r0, [r7, #20]
 80009b8:	f7ff ff90 	bl	80008dc <NVIC_EncodePriority>
 80009bc:	4602      	mov	r2, r0
 80009be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff5f 	bl	8000888 <__NVIC_SetPriority>
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff35 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffa2 	bl	8000940 <SysTick_Config>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b08b      	sub	sp, #44	; 0x2c
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e169      	b.n	8000cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f040 8158 	bne.w	8000cea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	4a9a      	ldr	r2, [pc, #616]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d05e      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a44:	4a98      	ldr	r2, [pc, #608]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d875      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a4a:	4a98      	ldr	r2, [pc, #608]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d058      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a50:	4a96      	ldr	r2, [pc, #600]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d86f      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a56:	4a96      	ldr	r2, [pc, #600]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d052      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a5c:	4a94      	ldr	r2, [pc, #592]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d869      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a62:	4a94      	ldr	r2, [pc, #592]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d04c      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a68:	4a92      	ldr	r2, [pc, #584]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d863      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a6e:	4a92      	ldr	r2, [pc, #584]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d046      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a74:	4a90      	ldr	r2, [pc, #576]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d85d      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d82a      	bhi.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d859      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <HAL_GPIO_Init+0x80>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000b03 	.word	0x08000b03
 8000a8c:	08000add 	.word	0x08000add
 8000a90:	08000aef 	.word	0x08000aef
 8000a94:	08000b31 	.word	0x08000b31
 8000a98:	08000b37 	.word	0x08000b37
 8000a9c:	08000b37 	.word	0x08000b37
 8000aa0:	08000b37 	.word	0x08000b37
 8000aa4:	08000b37 	.word	0x08000b37
 8000aa8:	08000b37 	.word	0x08000b37
 8000aac:	08000b37 	.word	0x08000b37
 8000ab0:	08000b37 	.word	0x08000b37
 8000ab4:	08000b37 	.word	0x08000b37
 8000ab8:	08000b37 	.word	0x08000b37
 8000abc:	08000b37 	.word	0x08000b37
 8000ac0:	08000b37 	.word	0x08000b37
 8000ac4:	08000b37 	.word	0x08000b37
 8000ac8:	08000b37 	.word	0x08000b37
 8000acc:	08000ae5 	.word	0x08000ae5
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	4a79      	ldr	r2, [pc, #484]	; (8000cbc <HAL_GPIO_Init+0x2b4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ada:	e02c      	b.n	8000b36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e029      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e024      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	3308      	adds	r3, #8
 8000af4:	623b      	str	r3, [r7, #32]
          break;
 8000af6:	e01f      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	330c      	adds	r3, #12
 8000afe:	623b      	str	r3, [r7, #32]
          break;
 8000b00:	e01a      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e013      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	611a      	str	r2, [r3, #16]
          break;
 8000b22:	e009      	b.n	8000b38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	615a      	str	r2, [r3, #20]
          break;
 8000b2e:	e003      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          break;
 8000b36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d801      	bhi.n	8000b42 <HAL_GPIO_Init+0x13a>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	e001      	b.n	8000b46 <HAL_GPIO_Init+0x13e>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3304      	adds	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d802      	bhi.n	8000b54 <HAL_GPIO_Init+0x14c>
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	e002      	b.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	3b08      	subs	r3, #8
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	210f      	movs	r1, #15
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	6a39      	ldr	r1, [r7, #32]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	431a      	orrs	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80b1 	beq.w	8000cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b88:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a4c      	ldr	r2, [pc, #304]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <HAL_GPIO_Init+0x2c0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_GPIO_Init+0x1ec>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <HAL_GPIO_Init+0x2c4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <HAL_GPIO_Init+0x2c8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <HAL_GPIO_Init+0x2cc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_GPIO_Init+0x1e0>
 8000be4:	2303      	movs	r3, #3
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c06:	492f      	ldr	r1, [pc, #188]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	492c      	ldr	r1, [pc, #176]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4928      	ldr	r1, [pc, #160]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	4922      	ldr	r1, [pc, #136]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60cb      	str	r3, [r1, #12]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	491e      	ldr	r1, [pc, #120]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	604b      	str	r3, [r1, #4]
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4914      	ldr	r1, [pc, #80]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d021      	beq.n	8000cdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	600b      	str	r3, [r1, #0]
 8000ca4:	e021      	b.n	8000cea <HAL_GPIO_Init+0x2e2>
 8000ca6:	bf00      	nop
 8000ca8:	10320000 	.word	0x10320000
 8000cac:	10310000 	.word	0x10310000
 8000cb0:	10220000 	.word	0x10220000
 8000cb4:	10210000 	.word	0x10210000
 8000cb8:	10120000 	.word	0x10120000
 8000cbc:	10110000 	.word	0x10110000
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40011400 	.word	0x40011400
 8000cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4909      	ldr	r1, [pc, #36]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	3301      	adds	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f47f ae8e 	bne.w	8000a1c <HAL_GPIO_Init+0x14>
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	372c      	adds	r7, #44	; 0x2c
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d2c:	e003      	b.n	8000d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	041a      	lsls	r2, r3, #16
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	611a      	str	r2, [r3, #16]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af06      	add	r7, sp, #24
 8000d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0f1      	b.n	8000f36 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f006 fb00 	bl	800736c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2203      	movs	r2, #3
 8000d70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fa09 	bl	8003190 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	687e      	ldr	r6, [r7, #4]
 8000d86:	466d      	mov	r5, sp
 8000d88:	f106 0410 	add.w	r4, r6, #16
 8000d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	602b      	str	r3, [r5, #0]
 8000d94:	1d33      	adds	r3, r6, #4
 8000d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f002 f9d3 	bl	8003144 <USB_CoreInit>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d005      	beq.n	8000db0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2202      	movs	r2, #2
 8000da8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e0c2      	b.n	8000f36 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fa04 	bl	80031c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e040      	b.n	8000e44 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	440b      	add	r3, r1
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3303      	adds	r3, #3
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	3338      	adds	r3, #56	; 0x38
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e16:	7bfa      	ldrb	r2, [r7, #15]
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	333c      	adds	r3, #60	; 0x3c
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e2a:	7bfa      	ldrb	r2, [r7, #15]
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	3340      	adds	r3, #64	; 0x40
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3b9      	bcc.n	8000dc2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e044      	b.n	8000ede <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e54:	7bfa      	ldrb	r2, [r7, #15]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	440b      	add	r3, r1
 8000e62:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	440b      	add	r3, r1
 8000e78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e80:	7bfa      	ldrb	r2, [r7, #15]
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	440b      	add	r3, r1
 8000e8e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	440b      	add	r3, r1
 8000eba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3301      	adds	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3b5      	bcc.n	8000e54 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	687e      	ldr	r6, [r7, #4]
 8000ef0:	466d      	mov	r5, sp
 8000ef2:	f106 0410 	add.w	r4, r6, #16
 8000ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	602b      	str	r3, [r5, #0]
 8000efe:	1d33      	adds	r3, r6, #4
 8000f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f02:	6838      	ldr	r0, [r7, #0]
 8000f04:	f002 f96a 	bl	80031dc <USB_DevInit>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2202      	movs	r2, #2
 8000f12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00d      	b.n	8000f36 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 fbeb 	bl	800570a <USB_DevDisconnect>

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <HAL_PCD_Start+0x16>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e016      	b.n	8000f82 <HAL_PCD_Start+0x44>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 f8ff 	bl	8003164 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f66:	2101      	movs	r1, #1
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f006 fc72 	bl	8007852 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fbbf 	bl	80056f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b088      	sub	sp, #32
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fbc1 	bl	800571e <USB_ReadInterrupts>
 8000f9c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 fb1b 	bl	80015e4 <PCD_EP_ISR_Handler>

    return;
 8000fae:	e119      	b.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d013      	beq.n	8000fe2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fcc:	b292      	uxth	r2, r2
 8000fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f006 fa45 	bl	8007462 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f905 	bl	80011ea <HAL_PCD_SetAddress>

    return;
 8000fe0:	e100      	b.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00c      	beq.n	8001006 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ffe:	b292      	uxth	r2, r2
 8001000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001004:	e0ee      	b.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00c      	beq.n	800102a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001018:	b29a      	uxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001022:	b292      	uxth	r2, r2
 8001024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001028:	e0dc      	b.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d027      	beq.n	8001084 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800103c:	b29a      	uxth	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0204 	bic.w	r2, r2, #4
 8001046:	b292      	uxth	r2, r2
 8001048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0208 	bic.w	r2, r2, #8
 800105e:	b292      	uxth	r2, r2
 8001060:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f006 fa35 	bl	80074d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800107c:	b292      	uxth	r2, r2
 800107e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001082:	e0af      	b.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8083 	beq.w	8001196 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	77fb      	strb	r3, [r7, #31]
 8001094:	e010      	b.n	80010b8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	441a      	add	r2, r3
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
 80010a4:	8812      	ldrh	r2, [r2, #0]
 80010a6:	b292      	uxth	r2, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	3320      	adds	r3, #32
 80010ac:	443b      	add	r3, r7
 80010ae:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	3301      	adds	r3, #1
 80010b6:	77fb      	strb	r3, [r7, #31]
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	d9eb      	bls.n	8001096 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0201 	orr.w	r2, r2, #1
 80010d0:	b292      	uxth	r2, r2
 80010d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80010ee:	bf00      	nop
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f6      	beq.n	80010f0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800110a:	b29a      	uxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001114:	b292      	uxth	r2, r2
 8001116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
 800111e:	e00f      	b.n	8001140 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001120:	7ffb      	ldrb	r3, [r7, #31]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	4611      	mov	r1, r2
 8001128:	7ffa      	ldrb	r2, [r7, #31]
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	440a      	add	r2, r1
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	3320      	adds	r3, #32
 8001132:	443b      	add	r3, r7
 8001134:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001138:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800113a:	7ffb      	ldrb	r3, [r7, #31]
 800113c:	3301      	adds	r3, #1
 800113e:	77fb      	strb	r3, [r7, #31]
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	2b07      	cmp	r3, #7
 8001144:	d9ec      	bls.n	8001120 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0208 	orr.w	r2, r2, #8
 8001158:	b292      	uxth	r2, r2
 800115a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001166:	b29a      	uxth	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001170:	b292      	uxth	r2, r2
 8001172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0204 	orr.w	r2, r2, #4
 8001188:	b292      	uxth	r2, r2
 800118a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f006 f986 	bl	80074a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001194:	e026      	b.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00f      	beq.n	80011c0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011b2:	b292      	uxth	r2, r2
 80011b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f006 f944 	bl	8007446 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011be:	e011      	b.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00c      	beq.n	80011e4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011dc:	b292      	uxth	r2, r2
 80011de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011e2:	bf00      	nop
  }
}
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_PCD_SetAddress+0x1a>
 8001200:	2302      	movs	r3, #2
 8001202:	e013      	b.n	800122c <HAL_PCD_SetAddress+0x42>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f004 fa57 	bl	80056d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4603      	mov	r3, r0
 8001244:	70fb      	strb	r3, [r7, #3]
 8001246:	460b      	mov	r3, r1
 8001248:	803b      	strh	r3, [r7, #0]
 800124a:	4613      	mov	r3, r2
 800124c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001256:	2b00      	cmp	r3, #0
 8001258:	da0e      	bge.n	8001278 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2201      	movs	r2, #1
 8001274:	705a      	strb	r2, [r3, #1]
 8001276:	e00e      	b.n	8001296 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	f003 0207 	and.w	r2, r3, #7
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	b2da      	uxtb	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012a2:	883a      	ldrh	r2, [r7, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	78ba      	ldrb	r2, [r7, #2]
 80012ac:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012ae:	78bb      	ldrb	r3, [r7, #2]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d102      	bne.n	80012ba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_PCD_EP_Open+0x94>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e00e      	b.n	80012e6 <HAL_PCD_EP_Open+0xb2>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 ffa0 	bl	800321c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80012e4:	7afb      	ldrb	r3, [r7, #11]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da0e      	bge.n	8001320 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2201      	movs	r2, #1
 800131c:	705a      	strb	r2, [r3, #1]
 800131e:	e00e      	b.n	800133e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	f003 0207 	and.w	r2, r3, #7
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_PCD_EP_Close+0x6a>
 8001354:	2302      	movs	r3, #2
 8001356:	e00e      	b.n	8001376 <HAL_PCD_EP_Close+0x88>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68f9      	ldr	r1, [r7, #12]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fb18 	bl	800399c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	460b      	mov	r3, r1
 800138c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	f003 0207 	and.w	r2, r3, #7
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2200      	movs	r2, #0
 80013bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6979      	ldr	r1, [r7, #20]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fccf 	bl	8003d74 <USB_EPStartXfer>

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	f003 0207 	and.w	r2, r3, #7
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	460b      	mov	r3, r1
 800141c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2201      	movs	r2, #1
 8001458:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	b2da      	uxtb	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6979      	ldr	r1, [r7, #20]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fc81 	bl	8003d74 <USB_EPStartXfer>

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	f003 0207 	and.w	r2, r3, #7
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	d901      	bls.n	800149a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e04c      	b.n	8001534 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800149a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da0e      	bge.n	80014c0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2201      	movs	r2, #1
 80014bc:	705a      	strb	r2, [r3, #1]
 80014be:	e00c      	b.n	80014da <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_PCD_EP_SetStall+0x7e>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e01c      	b.n	8001534 <HAL_PCD_EP_SetStall+0xb8>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 ffe4 	bl	80054d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d108      	bne.n	800152a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001522:	4619      	mov	r1, r3
 8001524:	4610      	mov	r0, r2
 8001526:	f004 f909 	bl	800573c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	f003 020f 	and.w	r2, r3, #15
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d901      	bls.n	800155a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e040      	b.n	80015dc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800155a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800155e:	2b00      	cmp	r3, #0
 8001560:	da0e      	bge.n	8001580 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2201      	movs	r2, #1
 800157c:	705a      	strb	r2, [r3, #1]
 800157e:	e00e      	b.n	800159e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f003 0207 	and.w	r2, r3, #7
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_PCD_EP_ClrStall+0x82>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e00e      	b.n	80015dc <HAL_PCD_EP_ClrStall+0xa0>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 ffd2 	bl	8005576 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	; 0x58
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015ec:	e3bf      	b.n	8001d6e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001608:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 8179 	bne.w	8001904 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d152      	bne.n	80016c4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800162a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800162e:	81fb      	strh	r3, [r7, #14]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800163a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800163e:	b29b      	uxth	r3, r3
 8001640:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3328      	adds	r3, #40	; 0x28
 8001646:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001650:	b29b      	uxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	3302      	adds	r3, #2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001672:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	441a      	add	r2, r3
 800167e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001680:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f005 fec4 	bl	8007412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 836b 	beq.w	8001d6e <PCD_EP_ISR_Handler+0x78a>
 8001698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 8366 	bne.w	8001d6e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b292      	uxth	r2, r2
 80016b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016c2:	e354      	b.n	8001d6e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ca:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d034      	beq.n	800174c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	3306      	adds	r3, #6
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800170a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001720:	b29b      	uxth	r3, r3
 8001722:	f004 f85b 	bl	80057dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b29a      	uxth	r2, r3
 800172e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001732:	4013      	ands	r3, r2
 8001734:	823b      	strh	r3, [r7, #16]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	8a3a      	ldrh	r2, [r7, #16]
 800173c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001740:	b292      	uxth	r2, r2
 8001742:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f005 fe37 	bl	80073b8 <HAL_PCD_SetupStageCallback>
 800174a:	e310      	b.n	8001d6e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800174c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001750:	2b00      	cmp	r3, #0
 8001752:	f280 830c 	bge.w	8001d6e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001762:	4013      	ands	r3, r2
 8001764:	83fb      	strh	r3, [r7, #30]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	8bfa      	ldrh	r2, [r7, #30]
 800176c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001770:	b292      	uxth	r2, r2
 8001772:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	3306      	adds	r3, #6
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800179c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800179e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d019      	beq.n	80017dc <PCD_EP_ISR_Handler+0x1f8>
 80017a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d015      	beq.n	80017dc <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b6:	6959      	ldr	r1, [r3, #20]
 80017b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f004 f80b 	bl	80057dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	441a      	add	r2, r3
 80017d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017d4:	2100      	movs	r1, #0
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f005 fe00 	bl	80073dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80017e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 82bd 	bne.w	8001d6e <PCD_EP_ISR_Handler+0x78a>
 80017f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80017fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001800:	f000 82b5 	beq.w	8001d6e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4413      	add	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800182e:	b29a      	uxth	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b3e      	cmp	r3, #62	; 0x3e
 800183a:	d91d      	bls.n	8001878 <PCD_EP_ISR_Handler+0x294>
 800183c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <PCD_EP_ISR_Handler+0x272>
 8001850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001852:	3b01      	subs	r3, #1
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29a      	uxth	r2, r3
 800185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185e:	b29b      	uxth	r3, r3
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	b29b      	uxth	r3, r3
 8001864:	4313      	orrs	r3, r2
 8001866:	b29b      	uxth	r3, r3
 8001868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800186c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001870:	b29a      	uxth	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	e026      	b.n	80018c6 <PCD_EP_ISR_Handler+0x2e2>
 8001878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <PCD_EP_ISR_Handler+0x2b2>
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800188a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800188e:	b29a      	uxth	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	e017      	b.n	80018c6 <PCD_EP_ISR_Handler+0x2e2>
 8001896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	647b      	str	r3, [r7, #68]	; 0x44
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <PCD_EP_ISR_Handler+0x2cc>
 80018aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ac:	3301      	adds	r3, #1
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	029b      	lsls	r3, r3, #10
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d6:	827b      	strh	r3, [r7, #18]
 80018d8:	8a7b      	ldrh	r3, [r7, #18]
 80018da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018de:	827b      	strh	r3, [r7, #18]
 80018e0:	8a7b      	ldrh	r3, [r7, #18]
 80018e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018e6:	827b      	strh	r3, [r7, #18]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	8a7b      	ldrh	r3, [r7, #18]
 80018ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fe:	b29b      	uxth	r3, r3
 8001900:	8013      	strh	r3, [r2, #0]
 8001902:	e234      	b.n	8001d6e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001918:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800191c:	2b00      	cmp	r3, #0
 800191e:	f280 80fc 	bge.w	8001b1a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29a      	uxth	r2, r3
 8001934:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001938:	4013      	ands	r3, r2
 800193a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001950:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001954:	b292      	uxth	r2, r2
 8001956:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001958:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	7b1b      	ldrb	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d125      	bne.n	80019c2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	3306      	adds	r3, #6
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800199e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80019a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8092 	beq.w	8001ad0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b2:	6959      	ldr	r1, [r3, #20]
 80019b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b6:	88da      	ldrh	r2, [r3, #6]
 80019b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019bc:	f003 ff0e 	bl	80057dc <USB_ReadPMA>
 80019c0:	e086      	b.n	8001ad0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c4:	78db      	ldrb	r3, [r3, #3]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d10a      	bne.n	80019e0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019ce:	461a      	mov	r2, r3
 80019d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f9d9 	bl	8001d8a <HAL_PCD_EP_DB_Receive>
 80019d8:	4603      	mov	r3, r0
 80019da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80019de:	e077      	b.n	8001ad0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	441a      	add	r2, r3
 8001a0c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d024      	beq.n	8001a88 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	3302      	adds	r3, #2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d02e      	beq.n	8001ad0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a78:	6959      	ldr	r1, [r3, #20]
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	891a      	ldrh	r2, [r3, #8]
 8001a7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a82:	f003 feab 	bl	80057dc <USB_ReadPMA>
 8001a86:	e023      	b.n	8001ad0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3306      	adds	r3, #6
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ab4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac2:	6959      	ldr	r1, [r3, #20]
 8001ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac6:	895a      	ldrh	r2, [r3, #10]
 8001ac8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001acc:	f003 fe86 	bl	80057dc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	69da      	ldr	r2, [r3, #28]
 8001ad4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ad8:	441a      	add	r2, r3
 8001ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001adc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae6:	441a      	add	r2, r3
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <PCD_EP_ISR_Handler+0x51c>
 8001af4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d206      	bcs.n	8001b0e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f005 fc68 	bl	80073dc <HAL_PCD_DataOutStageCallback>
 8001b0c:	e005      	b.n	8001b1a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 f92d 	bl	8003d74 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8123 	beq.w	8001d6e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b28:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	441a      	add	r2, r3
 8001b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	f040 80a2 	bne.w	8001cc6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	7b1b      	ldrb	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8093 	beq.w	8001cb8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d046      	beq.n	8001c2c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d126      	bne.n	8001bf4 <PCD_EP_ISR_Handler+0x610>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	4413      	add	r3, r2
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	011a      	lsls	r2, r3, #4
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	e061      	b.n	8001cb8 <PCD_EP_ISR_Handler+0x6d4>
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d15d      	bne.n	8001cb8 <PCD_EP_ISR_Handler+0x6d4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	4413      	add	r3, r2
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	011a      	lsls	r2, r3, #4
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	2200      	movs	r2, #0
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	e045      	b.n	8001cb8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d126      	bne.n	8001c88 <PCD_EP_ISR_Handler+0x6a4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4e:	4413      	add	r3, r2
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
 8001c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	011a      	lsls	r2, r3, #4
 8001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	e017      	b.n	8001cb8 <PCD_EP_ISR_Handler+0x6d4>
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d113      	bne.n	8001cb8 <PCD_EP_ISR_Handler+0x6d4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9e:	4413      	add	r3, r2
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	011a      	lsls	r2, r3, #4
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001caa:	4413      	add	r3, r2
 8001cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f005 fba7 	bl	8007412 <HAL_PCD_DataInStageCallback>
 8001cc4:	e053      	b.n	8001d6e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d146      	bne.n	8001d60 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d907      	bls.n	8001d1a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d12:	1ad2      	subs	r2, r2, r3
 8001d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	e002      	b.n	8001d20 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f005 fb6f 	bl	8007412 <HAL_PCD_DataInStageCallback>
 8001d34:	e01b      	b.n	8001d6e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d3e:	441a      	add	r2, r3
 8001d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d42:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d4c:	441a      	add	r2, r3
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d50:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 f80b 	bl	8003d74 <USB_EPStartXfer>
 8001d5e:	e006      	b.n	8001d6e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d64:	461a      	mov	r2, r3
 8001d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f91b 	bl	8001fa4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f6ff ac37 	blt.w	80015ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3758      	adds	r7, #88	; 0x58
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b088      	sub	sp, #32
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	4613      	mov	r3, r2
 8001d96:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d07e      	beq.n	8001ea0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	3302      	adds	r3, #2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	8b7b      	ldrh	r3, [r7, #26]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d306      	bcc.n	8001de4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	8b7b      	ldrh	r3, [r7, #26]
 8001ddc:	1ad2      	subs	r2, r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	619a      	str	r2, [r3, #24]
 8001de2:	e002      	b.n	8001dea <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d123      	bne.n	8001e3a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0c:	833b      	strh	r3, [r7, #24]
 8001e0e:	8b3b      	ldrh	r3, [r7, #24]
 8001e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e14:	833b      	strh	r3, [r7, #24]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	441a      	add	r2, r3
 8001e24:	8b3b      	ldrh	r3, [r7, #24]
 8001e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01f      	beq.n	8001e84 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5e:	82fb      	strh	r3, [r7, #22]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	441a      	add	r2, r3
 8001e6e:	8afb      	ldrh	r3, [r7, #22]
 8001e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e84:	8b7b      	ldrh	r3, [r7, #26]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8087 	beq.w	8001f9a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	6959      	ldr	r1, [r3, #20]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	891a      	ldrh	r2, [r3, #8]
 8001e98:	8b7b      	ldrh	r3, [r7, #26]
 8001e9a:	f003 fc9f 	bl	80057dc <USB_ReadPMA>
 8001e9e:	e07c      	b.n	8001f9a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3306      	adds	r3, #6
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	8b7b      	ldrh	r3, [r7, #26]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d306      	bcc.n	8001ee2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	8b7b      	ldrh	r3, [r7, #26]
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	e002      	b.n	8001ee8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d123      	bne.n	8001f38 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	83fb      	strh	r3, [r7, #30]
 8001f0c:	8bfb      	ldrh	r3, [r7, #30]
 8001f0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f12:	83fb      	strh	r3, [r7, #30]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	8bfb      	ldrh	r3, [r7, #30]
 8001f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11f      	bne.n	8001f82 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5c:	83bb      	strh	r3, [r7, #28]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	8bbb      	ldrh	r3, [r7, #28]
 8001f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f82:	8b7b      	ldrh	r3, [r7, #26]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6959      	ldr	r1, [r3, #20]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	895a      	ldrh	r2, [r3, #10]
 8001f94:	8b7b      	ldrh	r3, [r7, #26]
 8001f96:	f003 fc21 	bl	80057dc <USB_ReadPMA>
    }
  }

  return count;
 8001f9a:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0a4      	sub	sp, #144	; 0x90
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 81dd 	beq.w	8002378 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d907      	bls.n	8002006 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ffe:	1ad2      	subs	r2, r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	619a      	str	r2, [r3, #24]
 8002004:	e002      	b.n	800200c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 80b9 	bne.w	8002188 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d126      	bne.n	800206c <HAL_PCD_EP_DB_Transmit+0xc8>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002032:	4413      	add	r3, r2
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	011a      	lsls	r2, r3, #4
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	4413      	add	r3, r2
 8002040:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002050:	b29a      	uxth	r2, r3
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002064:	b29a      	uxth	r2, r3
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	e01a      	b.n	80020a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d116      	bne.n	80020a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002088:	4413      	add	r3, r2
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	011a      	lsls	r2, r3, #4
 8002092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002094:	4413      	add	r3, r2
 8002096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
 800209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209e:	2200      	movs	r2, #0
 80020a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d126      	bne.n	80020fe <HAL_PCD_EP_DB_Transmit+0x15a>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	011a      	lsls	r2, r3, #4
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	e017      	b.n	800212e <HAL_PCD_EP_DB_Transmit+0x18a>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d113      	bne.n	800212e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	4413      	add	r3, r2
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	011a      	lsls	r2, r3, #4
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	4413      	add	r3, r2
 8002122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	2200      	movs	r2, #0
 800212c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f005 f96c 	bl	8007412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 82fc 	beq.w	800273e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002160:	82fb      	strh	r3, [r7, #22]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	8afb      	ldrh	r3, [r7, #22]
 8002172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800217a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800217e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]
 8002186:	e2da      	b.n	800273e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d021      	beq.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	441a      	add	r2, r3
 80021be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80021c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021dc:	2b01      	cmp	r3, #1
 80021de:	f040 82ae 	bne.w	800273e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021ea:	441a      	add	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021f8:	441a      	add	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	429a      	cmp	r2, r3
 8002208:	d30b      	bcc.n	8002222 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	621a      	str	r2, [r3, #32]
 8002220:	e017      	b.n	8002252 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800222a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800222e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800223a:	e00a      	b.n	8002252 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	785b      	ldrb	r3, [r3, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d165      	bne.n	8002326 <HAL_PCD_EP_DB_Transmit+0x382>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002268:	b29b      	uxth	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226e:	4413      	add	r3, r2
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	011a      	lsls	r2, r3, #4
 8002278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227a:	4413      	add	r3, r2
 800227c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38
 8002282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228c:	b29a      	uxth	r2, r3
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002296:	2b3e      	cmp	r3, #62	; 0x3e
 8002298:	d91d      	bls.n	80022d6 <HAL_PCD_EP_DB_Transmit+0x332>
 800229a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x310>
 80022ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b0:	3b01      	subs	r3, #1
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80022b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022bc:	b29b      	uxth	r3, r3
 80022be:	029b      	lsls	r3, r3, #10
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	801a      	strh	r2, [r3, #0]
 80022d4:	e044      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x350>
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	e035      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80022f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80022fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230a:	3301      	adds	r3, #1
 800230c:	64bb      	str	r3, [r7, #72]	; 0x48
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29a      	uxth	r2, r3
 8002314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002316:	b29b      	uxth	r3, r3
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	b29b      	uxth	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b29a      	uxth	r2, r3
 8002320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e01c      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d118      	bne.n	8002360 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	647b      	str	r3, [r7, #68]	; 0x44
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	4413      	add	r3, r2
 8002344:	647b      	str	r3, [r7, #68]	; 0x44
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	011a      	lsls	r2, r3, #4
 800234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234e:	4413      	add	r3, r2
 8002350:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002354:	643b      	str	r3, [r7, #64]	; 0x40
 8002356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800235a:	b29a      	uxth	r2, r3
 800235c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6959      	ldr	r1, [r3, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	891a      	ldrh	r2, [r3, #8]
 800236c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002370:	b29b      	uxth	r3, r3
 8002372:	f003 f9ee 	bl	8005752 <USB_WritePMA>
 8002376:	e1e2      	b.n	800273e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	3306      	adds	r3, #6
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d307      	bcc.n	80023c0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023b8:	1ad2      	subs	r2, r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	619a      	str	r2, [r3, #24]
 80023be:	e002      	b.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80c0 	bne.w	8002550 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d126      	bne.n	8002426 <HAL_PCD_EP_DB_Transmit+0x482>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ec:	4413      	add	r3, r2
 80023ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	011a      	lsls	r2, r3, #4
 80023f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f8:	4413      	add	r3, r2
 80023fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240a:	b29a      	uxth	r2, r3
 800240c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800241e:	b29a      	uxth	r2, r3
 8002420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	e01a      	b.n	800245c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d116      	bne.n	800245c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	667b      	str	r3, [r7, #100]	; 0x64
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002442:	4413      	add	r3, r2
 8002444:	667b      	str	r3, [r7, #100]	; 0x64
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	011a      	lsls	r2, r3, #4
 800244c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800244e:	4413      	add	r3, r2
 8002450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002454:	663b      	str	r3, [r7, #96]	; 0x60
 8002456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002458:	2200      	movs	r2, #0
 800245a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	677b      	str	r3, [r7, #116]	; 0x74
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d12b      	bne.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	4413      	add	r3, r2
 8002480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	011a      	lsls	r2, r3, #4
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	4413      	add	r3, r2
 800248c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024a6:	801a      	strh	r2, [r3, #0]
 80024a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024be:	801a      	strh	r2, [r3, #0]
 80024c0:	e017      	b.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	785b      	ldrb	r3, [r3, #1]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d113      	bne.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d8:	4413      	add	r3, r2
 80024da:	677b      	str	r3, [r7, #116]	; 0x74
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	011a      	lsls	r2, r3, #4
 80024e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e4:	4413      	add	r3, r2
 80024e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ea:	673b      	str	r3, [r7, #112]	; 0x70
 80024ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f004 ff8a 	bl	8007412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 811a 	bne.w	800273e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002524:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	441a      	add	r2, r3
 8002536:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800253a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800253e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254a:	b29b      	uxth	r3, r3
 800254c:	8013      	strh	r3, [r2, #0]
 800254e:	e0f6      	b.n	800273e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d121      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002574:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800258a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	b29b      	uxth	r3, r3
 800259c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	f040 80ca 	bne.w	800273e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025b2:	441a      	add	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025c0:	441a      	add	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	6a1a      	ldr	r2, [r3, #32]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d30b      	bcc.n	80025ea <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e2:	1ad2      	subs	r2, r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	621a      	str	r2, [r3, #32]
 80025e8:	e017      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80025f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002602:	e00a      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	657b      	str	r3, [r7, #84]	; 0x54
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d165      	bne.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263c:	4413      	add	r3, r2
 800263e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011a      	lsls	r2, r3, #4
 8002646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002648:	4413      	add	r3, r2
 800264a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800264e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265a:	b29a      	uxth	r2, r3
 800265c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002664:	2b3e      	cmp	r3, #62	; 0x3e
 8002666:	d91d      	bls.n	80026a4 <HAL_PCD_EP_DB_Transmit+0x700>
 8002668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x6de>
 800267c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267e:	3b01      	subs	r3, #1
 8002680:	66bb      	str	r3, [r7, #104]	; 0x68
 8002682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268a:	b29b      	uxth	r3, r3
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	b29b      	uxth	r3, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269c:	b29a      	uxth	r2, r3
 800269e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	e041      	b.n	8002728 <HAL_PCD_EP_DB_Transmit+0x784>
 80026a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80026ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	e032      	b.n	8002728 <HAL_PCD_EP_DB_Transmit+0x784>
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80026ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_PCD_EP_DB_Transmit+0x738>
 80026d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d8:	3301      	adds	r3, #1
 80026da:	66bb      	str	r3, [r7, #104]	; 0x68
 80026dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4313      	orrs	r3, r2
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	e019      	b.n	8002728 <HAL_PCD_EP_DB_Transmit+0x784>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d115      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0x784>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	4413      	add	r3, r2
 800270c:	657b      	str	r3, [r7, #84]	; 0x54
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	011a      	lsls	r2, r3, #4
 8002714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002716:	4413      	add	r3, r2
 8002718:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800271c:	653b      	str	r3, [r7, #80]	; 0x50
 800271e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002722:	b29a      	uxth	r2, r3
 8002724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002726:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6959      	ldr	r1, [r3, #20]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	895a      	ldrh	r2, [r3, #10]
 8002734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002738:	b29b      	uxth	r3, r3
 800273a:	f003 f80a 	bl	8005752 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002758:	82bb      	strh	r3, [r7, #20]
 800275a:	8abb      	ldrh	r3, [r7, #20]
 800275c:	f083 0310 	eor.w	r3, r3, #16
 8002760:	82bb      	strh	r3, [r7, #20]
 8002762:	8abb      	ldrh	r3, [r7, #20]
 8002764:	f083 0320 	eor.w	r3, r3, #32
 8002768:	82bb      	strh	r3, [r7, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	441a      	add	r2, r3
 8002778:	8abb      	ldrh	r3, [r7, #20]
 800277a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3790      	adds	r7, #144	; 0x90
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	817b      	strh	r3, [r7, #10]
 80027a6:	4613      	mov	r3, r2
 80027a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e009      	b.n	80027e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027ce:	897a      	ldrh	r2, [r7, #10]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2200      	movs	r2, #0
 80027ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	80da      	strh	r2, [r3, #6]
 80027f6:	e00b      	b.n	8002810 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2201      	movs	r2, #1
 80027fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	b29a      	uxth	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	b29a      	uxth	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e272      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8087 	beq.w	800294a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800283c:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b04      	cmp	r3, #4
 8002846:	d00c      	beq.n	8002862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002848:	4b8f      	ldr	r3, [pc, #572]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d112      	bne.n	800287a <HAL_RCC_OscConfig+0x5e>
 8002854:	4b8c      	ldr	r3, [pc, #560]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d10b      	bne.n	800287a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002862:	4b89      	ldr	r3, [pc, #548]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d06c      	beq.n	8002948 <HAL_RCC_OscConfig+0x12c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d168      	bne.n	8002948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e24c      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x76>
 8002884:	4b80      	ldr	r3, [pc, #512]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a7f      	ldr	r2, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e02e      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x98>
 800289a:	4b7b      	ldr	r3, [pc, #492]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7a      	ldr	r2, [pc, #488]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b78      	ldr	r3, [pc, #480]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a77      	ldr	r2, [pc, #476]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e01d      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0xbc>
 80028be:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a71      	ldr	r2, [pc, #452]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 80028d8:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a67      	ldr	r2, [pc, #412]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fd ff4a 	bl	8000790 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002900:	f7fd ff46 	bl	8000790 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e200      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0xe4>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fd ff36 	bl	8000790 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fd ff32 	bl	8000790 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1ec      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x10c>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002956:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002962:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b08      	cmp	r3, #8
 800296c:	d11c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x18c>
 800296e:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d116      	bne.n	80029a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x176>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1c0      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4939      	ldr	r1, [pc, #228]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e03a      	b.n	8002a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCC_OscConfig+0x270>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fd feeb 	bl	8000790 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7fd fee7 	bl	8000790 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1a1      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4927      	ldr	r1, [pc, #156]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_RCC_OscConfig+0x270>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fd feca 	bl	8000790 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fd fec6 	bl	8000790 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e180      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03a      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x274>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7fd feaa 	bl	8000790 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fd fea6 	bl	8000790 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e160      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f000 fa9c 	bl	8002f9c <RCC_Delay>
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_OscConfig+0x274>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fd fe90 	bl	8000790 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a72:	e00f      	b.n	8002a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fd fe8c 	bl	8000790 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d908      	bls.n	8002a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e146      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	42420000 	.word	0x42420000
 8002a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e9      	bne.n	8002a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a6 	beq.w	8002bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a87      	ldr	r2, [pc, #540]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	61d3      	str	r3, [r2, #28]
 8002aca:	4b85      	ldr	r3, [pc, #532]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b82      	ldr	r3, [pc, #520]	; (8002ce4 <HAL_RCC_OscConfig+0x4c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x4c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7e      	ldr	r2, [pc, #504]	; (8002ce4 <HAL_RCC_OscConfig+0x4c8>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fd fe4d 	bl	8000790 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7fd fe49 	bl	8000790 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e103      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b75      	ldr	r3, [pc, #468]	; (8002ce4 <HAL_RCC_OscConfig+0x4c8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x312>
 8002b20:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e02d      	b.n	8002b8a <HAL_RCC_OscConfig+0x36e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x334>
 8002b36:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a66      	ldr	r2, [pc, #408]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	e01c      	b.n	8002b8a <HAL_RCC_OscConfig+0x36e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d10c      	bne.n	8002b72 <HAL_RCC_OscConfig+0x356>
 8002b58:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a60      	ldr	r2, [pc, #384]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a5d      	ldr	r2, [pc, #372]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	e00b      	b.n	8002b8a <HAL_RCC_OscConfig+0x36e>
 8002b72:	4b5b      	ldr	r3, [pc, #364]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a5a      	ldr	r2, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6213      	str	r3, [r2, #32]
 8002b7e:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d015      	beq.n	8002bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7fd fdfd 	bl	8000790 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fd fdf9 	bl	8000790 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0b1      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ee      	beq.n	8002b9a <HAL_RCC_OscConfig+0x37e>
 8002bbc:	e014      	b.n	8002be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7fd fde7 	bl	8000790 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fd fde3 	bl	8000790 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e09b      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bdc:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ee      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bee:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8087 	beq.w	8002d12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d061      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d146      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c18:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fd fdb7 	bl	8000790 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c26:	f7fd fdb3 	bl	8000790 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e06d      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d108      	bne.n	8002c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4921      	ldr	r1, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a19      	ldr	r1, [r3, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	430b      	orrs	r3, r1
 8002c72:	491b      	ldr	r1, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fd fd87 	bl	8000790 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fd fd83 	bl	8000790 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e03d      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x46a>
 8002ca4:	e035      	b.n	8002d12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fd fd70 	bl	8000790 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fd fd6c 	bl	8000790 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e026      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x498>
 8002cd2:	e01e      	b.n	8002d12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e019      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x500>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0d0      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d34:	4b6a      	ldr	r3, [pc, #424]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d910      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4965      	ldr	r1, [pc, #404]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0b8      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d94:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	494d      	ldr	r1, [pc, #308]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d040      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d115      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e07f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e073      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e06b      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfe:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4936      	ldr	r1, [pc, #216]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e10:	f7fd fcbe 	bl	8000790 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e18:	f7fd fcba 	bl	8000790 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e053      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 020c 	and.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1eb      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e40:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d210      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 0207 	bic.w	r2, r3, #7
 8002e56:	4922      	ldr	r1, [pc, #136]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e032      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4916      	ldr	r1, [pc, #88]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	490e      	ldr	r1, [pc, #56]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eae:	f000 f821 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	490a      	ldr	r1, [pc, #40]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	5ccb      	ldrb	r3, [r1, r3]
 8002ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec6:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_RCC_ClockConfig+0x1cc>)
 8002ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fc1c 	bl	800070c <HAL_InitTick>

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	08008cbc 	.word	0x08008cbc
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000004 	.word	0x20000004

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d002      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x36>
 8002f22:	e027      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f26:	613b      	str	r3, [r7, #16]
      break;
 8002f28:	e027      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	0c9b      	lsrs	r3, r3, #18
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0c5b      	lsrs	r3, r3, #17
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f56:	fb03 f202 	mul.w	r2, r3, r2
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e004      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	613b      	str	r3, [r7, #16]
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f76:	613b      	str	r3, [r7, #16]
      break;
 8002f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7a:	693b      	ldr	r3, [r7, #16]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	007a1200 	.word	0x007a1200
 8002f90:	08008ccc 	.word	0x08008ccc
 8002f94:	08008cdc 	.word	0x08008cdc
 8002f98:	003d0900 	.word	0x003d0900

08002f9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <RCC_Delay+0x34>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <RCC_Delay+0x38>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a5b      	lsrs	r3, r3, #9
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb8:	bf00      	nop
  }
  while (Delay --);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	60fa      	str	r2, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f9      	bne.n	8002fb8 <RCC_Delay+0x1c>
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	10624dd3 	.word	0x10624dd3

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d07d      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4a4b      	ldr	r2, [pc, #300]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300e:	61d3      	str	r3, [r2, #28]
 8003010:	4b49      	ldr	r3, [pc, #292]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	4b46      	ldr	r3, [pc, #280]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d118      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302c:	4b43      	ldr	r3, [pc, #268]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a42      	ldr	r2, [pc, #264]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003036:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003038:	f7fd fbaa 	bl	8000790 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303e:	e008      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003040:	f7fd fba6 	bl	8000790 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e06d      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	4b3a      	ldr	r3, [pc, #232]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d02e      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	429a      	cmp	r2, r3
 800307a:	d027      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003086:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003092:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d014      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fd fb75 	bl	8000790 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fd fb71 	bl	8000790 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e036      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ee      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4917      	ldr	r1, [pc, #92]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	490b      	ldr	r1, [pc, #44]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	4904      	ldr	r1, [pc, #16]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
 8003140:	42420440 	.word	0x42420440

08003144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003144:	b084      	sub	sp, #16
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	f107 0014 	add.w	r0, r7, #20
 8003152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	b004      	add	sp, #16
 8003162:	4770      	bx	lr

08003164 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003174:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003178:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003198:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800319c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031dc:	b084      	sub	sp, #16
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	f107 0014 	add.w	r0, r7, #20
 80031ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	b004      	add	sp, #16
 800321a:	4770      	bx	lr

0800321c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800321c:	b480      	push	{r7}
 800321e:	b09d      	sub	sp, #116	; 0x74
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	78db      	ldrb	r3, [r3, #3]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d81f      	bhi.n	800328e <USB_ActivateEndpoint+0x72>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <USB_ActivateEndpoint+0x38>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003265 	.word	0x08003265
 8003258:	08003281 	.word	0x08003281
 800325c:	08003297 	.word	0x08003297
 8003260:	08003273 	.word	0x08003273
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003264:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003270:	e012      	b.n	8003298 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003272:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003276:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800327a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800327e:	e00b      	b.n	8003298 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003280:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003288:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800328c:	e004      	b.n	8003298 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003294:	e000      	b.n	8003298 <USB_ActivateEndpoint+0x7c>
      break;
 8003296:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80032a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80032ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	7b1b      	ldrb	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 8178 	bne.w	80035fa <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	785b      	ldrb	r3, [r3, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8084 	beq.w	800341c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	011a      	lsls	r2, r3, #4
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	88db      	ldrh	r3, [r3, #6]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	b29b      	uxth	r3, r3
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	827b      	strh	r3, [r7, #18]
 8003356:	8a7b      	ldrh	r3, [r7, #18]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <USB_ActivateEndpoint+0x17c>
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	823b      	strh	r3, [r7, #16]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	8a3b      	ldrh	r3, [r7, #16]
 8003384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800338c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003390:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003394:	b29b      	uxth	r3, r3
 8003396:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	78db      	ldrb	r3, [r3, #3]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d020      	beq.n	80033e2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b6:	81bb      	strh	r3, [r7, #12]
 80033b8:	89bb      	ldrh	r3, [r7, #12]
 80033ba:	f083 0320 	eor.w	r3, r3, #32
 80033be:	81bb      	strh	r3, [r7, #12]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	441a      	add	r2, r3
 80033ca:	89bb      	ldrh	r3, [r7, #12]
 80033cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033dc:	b29b      	uxth	r3, r3
 80033de:	8013      	strh	r3, [r2, #0]
 80033e0:	e2d5      	b.n	800398e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f8:	81fb      	strh	r3, [r7, #14]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	89fb      	ldrh	r3, [r7, #14]
 8003406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	b29b      	uxth	r3, r3
 8003418:	8013      	strh	r3, [r2, #0]
 800341a:	e2b8      	b.n	800398e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003426:	b29b      	uxth	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	4413      	add	r3, r2
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	011a      	lsls	r2, r3, #4
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	4413      	add	r3, r2
 800343a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	88db      	ldrh	r3, [r3, #6]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	4413      	add	r3, r2
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	011a      	lsls	r2, r3, #4
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	4413      	add	r3, r2
 800346e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347e:	b29a      	uxth	r2, r3
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	801a      	strh	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b3e      	cmp	r3, #62	; 0x3e
 800348a:	d91d      	bls.n	80034c8 <USB_ActivateEndpoint+0x2ac>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	66bb      	str	r3, [r7, #104]	; 0x68
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <USB_ActivateEndpoint+0x28a>
 80034a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a2:	3b01      	subs	r3, #1
 80034a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	e026      	b.n	8003516 <USB_ActivateEndpoint+0x2fa>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <USB_ActivateEndpoint+0x2ca>
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034de:	b29a      	uxth	r2, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	e017      	b.n	8003516 <USB_ActivateEndpoint+0x2fa>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <USB_ActivateEndpoint+0x2e4>
 80034fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034fc:	3301      	adds	r3, #1
 80034fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29a      	uxth	r2, r3
 8003506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003508:	b29b      	uxth	r3, r3
 800350a:	029b      	lsls	r3, r3, #10
 800350c:	b29b      	uxth	r3, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	b29a      	uxth	r2, r3
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	847b      	strh	r3, [r7, #34]	; 0x22
 8003524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01b      	beq.n	8003566 <USB_ActivateEndpoint+0x34a>
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003544:	843b      	strh	r3, [r7, #32]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	441a      	add	r2, r3
 8003550:	8c3b      	ldrh	r3, [r7, #32]
 8003552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800355e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003562:	b29b      	uxth	r3, r3
 8003564:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d124      	bne.n	80035b8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003584:	83bb      	strh	r3, [r7, #28]
 8003586:	8bbb      	ldrh	r3, [r7, #28]
 8003588:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800358c:	83bb      	strh	r3, [r7, #28]
 800358e:	8bbb      	ldrh	r3, [r7, #28]
 8003590:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003594:	83bb      	strh	r3, [r7, #28]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	441a      	add	r2, r3
 80035a0:	8bbb      	ldrh	r3, [r7, #28]
 80035a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	8013      	strh	r3, [r2, #0]
 80035b6:	e1ea      	b.n	800398e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	83fb      	strh	r3, [r7, #30]
 80035d0:	8bfb      	ldrh	r3, [r7, #30]
 80035d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035d6:	83fb      	strh	r3, [r7, #30]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	8bfb      	ldrh	r3, [r7, #30]
 80035e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	8013      	strh	r3, [r2, #0]
 80035f8:	e1c9      	b.n	800398e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	78db      	ldrb	r3, [r3, #3]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d11e      	bne.n	8003640 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800362a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800362e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003632:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363a:	b29b      	uxth	r3, r3
 800363c:	8013      	strh	r3, [r2, #0]
 800363e:	e01d      	b.n	800367c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	441a      	add	r2, r3
 8003664:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003678:	b29b      	uxth	r3, r3
 800367a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368c:	4413      	add	r3, r2
 800368e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	011a      	lsls	r2, r3, #4
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	4413      	add	r3, r2
 800369a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800369e:	65bb      	str	r3, [r7, #88]	; 0x58
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	891b      	ldrh	r3, [r3, #8]
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	657b      	str	r3, [r7, #84]	; 0x54
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c0:	4413      	add	r3, r2
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	011a      	lsls	r2, r3, #4
 80036ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80036d2:	653b      	str	r3, [r7, #80]	; 0x50
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	895b      	ldrh	r3, [r3, #10]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	b29b      	uxth	r3, r3
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	785b      	ldrb	r3, [r3, #1]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 8093 	bne.w	8003814 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80036fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01b      	beq.n	8003742 <USB_ActivateEndpoint+0x526>
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800372e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800373a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373e:	b29b      	uxth	r3, r3
 8003740:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003750:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01b      	beq.n	8003792 <USB_ActivateEndpoint+0x576>
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003770:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	441a      	add	r2, r3
 800377c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800377e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800378e:	b29b      	uxth	r3, r3
 8003790:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80037aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80037b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	441a      	add	r2, r3
 80037c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380e:	b29b      	uxth	r3, r3
 8003810:	8013      	strh	r3, [r2, #0]
 8003812:	e0bc      	b.n	800398e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003824:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01d      	beq.n	800386c <USB_ActivateEndpoint+0x650>
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003868:	b29b      	uxth	r3, r3
 800386a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800387c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01d      	beq.n	80038c4 <USB_ActivateEndpoint+0x6a8>
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d024      	beq.n	8003916 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80038e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038ea:	f083 0320 	eor.w	r3, r3, #32
 80038ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	441a      	add	r2, r3
 80038fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003910:	b29b      	uxth	r3, r3
 8003912:	8013      	strh	r3, [r2, #0]
 8003914:	e01d      	b.n	8003952 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800393e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394e:	b29b      	uxth	r3, r3
 8003950:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800397a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	b29b      	uxth	r3, r3
 800398c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800398e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003992:	4618      	mov	r0, r3
 8003994:	3774      	adds	r7, #116	; 0x74
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800399c:	b480      	push	{r7}
 800399e:	b08d      	sub	sp, #52	; 0x34
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	7b1b      	ldrb	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 808e 	bne.w	8003acc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d044      	beq.n	8003a42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	81bb      	strh	r3, [r7, #12]
 80039c6:	89bb      	ldrh	r3, [r7, #12]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <USB_DeactivateEndpoint+0x6c>
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	817b      	strh	r3, [r7, #10]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	897b      	ldrh	r3, [r7, #10]
 80039f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1e:	813b      	strh	r3, [r7, #8]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	893b      	ldrh	r3, [r7, #8]
 8003a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	8013      	strh	r3, [r2, #0]
 8003a40:	e192      	b.n	8003d68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	827b      	strh	r3, [r7, #18]
 8003a50:	8a7b      	ldrh	r3, [r7, #18]
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01b      	beq.n	8003a92 <USB_DeactivateEndpoint+0xf6>
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a70:	823b      	strh	r3, [r7, #16]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	8a3b      	ldrh	r3, [r7, #16]
 8003a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa8:	81fb      	strh	r3, [r7, #14]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	441a      	add	r2, r3
 8003ab4:	89fb      	ldrh	r3, [r7, #14]
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8013      	strh	r3, [r2, #0]
 8003aca:	e14d      	b.n	8003d68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 80a5 	bne.w	8003c20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	843b      	strh	r3, [r7, #32]
 8003ae4:	8c3b      	ldrh	r3, [r7, #32]
 8003ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01b      	beq.n	8003b26 <USB_DeactivateEndpoint+0x18a>
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b04:	83fb      	strh	r3, [r7, #30]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	441a      	add	r2, r3
 8003b10:	8bfb      	ldrh	r3, [r7, #30]
 8003b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	83bb      	strh	r3, [r7, #28]
 8003b34:	8bbb      	ldrh	r3, [r7, #28]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01b      	beq.n	8003b76 <USB_DeactivateEndpoint+0x1da>
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b54:	837b      	strh	r3, [r7, #26]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	441a      	add	r2, r3
 8003b60:	8b7b      	ldrh	r3, [r7, #26]
 8003b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8c:	833b      	strh	r3, [r7, #24]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	441a      	add	r2, r3
 8003b98:	8b3b      	ldrh	r3, [r7, #24]
 8003b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc4:	82fb      	strh	r3, [r7, #22]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	8afb      	ldrh	r3, [r7, #22]
 8003bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	82bb      	strh	r3, [r7, #20]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8abb      	ldrh	r3, [r7, #20]
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
 8003c1e:	e0a3      	b.n	8003d68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003c2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01b      	beq.n	8003c70 <USB_DeactivateEndpoint+0x2d4>
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003c7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01b      	beq.n	8003cc0 <USB_DeactivateEndpoint+0x324>
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	441a      	add	r2, r3
 8003ce2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3734      	adds	r7, #52	; 0x34
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b0c2      	sub	sp, #264	; 0x108
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d82:	6018      	str	r0, [r3, #0]
 8003d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d8c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	f040 86b7 	bne.w	8004b0e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d908      	bls.n	8003dce <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003dcc:	e007      	b.n	8003dde <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	7b1b      	ldrb	r3, [r3, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d13a      	bne.n	8003e64 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6959      	ldr	r1, [r3, #20]
 8003dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	88da      	ldrh	r2, [r3, #6]
 8003e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003e10:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003e14:	6800      	ldr	r0, [r0, #0]
 8003e16:	f001 fc9c 	bl	8005752 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	011a      	lsls	r2, r3, #4
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	f000 be1f 	b.w	8004aa2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	78db      	ldrb	r3, [r3, #3]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	f040 8462 	bne.w	800473a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	f240 83df 	bls.w	8004652 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	441a      	add	r2, r3
 8003ed8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f00:	1ad2      	subs	r2, r2, r3
 8003f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 81c7 	beq.w	80042c4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
 8003f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d177      	bne.n	8004042 <USB_EPStartXfer+0x2ce>
 8003f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	4413      	add	r3, r2
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	011a      	lsls	r2, r3, #4
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	4413      	add	r3, r2
 8003f88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	801a      	strh	r2, [r3, #0]
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa4:	d921      	bls.n	8003fea <USB_EPStartXfer+0x276>
 8003fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <USB_EPStartXfer+0x252>
 8003fbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	029b      	lsls	r3, r3, #10
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	801a      	strh	r2, [r3, #0]
 8003fe8:	e050      	b.n	800408c <USB_EPStartXfer+0x318>
 8003fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <USB_EPStartXfer+0x294>
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004000:	b29a      	uxth	r2, r3
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	e041      	b.n	800408c <USB_EPStartXfer+0x318>
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <USB_EPStartXfer+0x2b4>
 800401e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004022:	3301      	adds	r3, #1
 8004024:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29a      	uxth	r2, r3
 800402e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004032:	b29b      	uxth	r3, r3
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	b29b      	uxth	r3, r3
 8004038:	4313      	orrs	r3, r2
 800403a:	b29a      	uxth	r2, r3
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e024      	b.n	800408c <USB_EPStartXfer+0x318>
 8004042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	785b      	ldrb	r3, [r3, #1]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d11c      	bne.n	800408c <USB_EPStartXfer+0x318>
 8004052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004060:	b29b      	uxth	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	4413      	add	r3, r2
 8004068:	633b      	str	r3, [r7, #48]	; 0x30
 800406a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800406e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	011a      	lsls	r2, r3, #4
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	4413      	add	r3, r2
 800407c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004086:	b29a      	uxth	r2, r3
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800408c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	895b      	ldrh	r3, [r3, #10]
 8004098:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800409c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6959      	ldr	r1, [r3, #20]
 80040a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80040b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80040b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	f001 fb49 	bl	8005752 <USB_WritePMA>
            ep->xfer_buff += len;
 80040c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d0:	441a      	add	r2, r3
 80040d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80040de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d90f      	bls.n	800411a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80040fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	621a      	str	r2, [r3, #32]
 8004118:	e00e      	b.n	8004138 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800411a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800411e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800412a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800412e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2200      	movs	r2, #0
 8004136:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800413c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d177      	bne.n	8004238 <USB_EPStartXfer+0x4c4>
 8004148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800414c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004162:	b29b      	uxth	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4413      	add	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	011a      	lsls	r2, r3, #4
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	4413      	add	r3, r2
 800417e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418e:	b29a      	uxth	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004198:	2b3e      	cmp	r3, #62	; 0x3e
 800419a:	d921      	bls.n	80041e0 <USB_EPStartXfer+0x46c>
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <USB_EPStartXfer+0x448>
 80041b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	029b      	lsls	r3, r3, #10
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d8:	b29a      	uxth	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e056      	b.n	800428e <USB_EPStartXfer+0x51a>
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <USB_EPStartXfer+0x48a>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	e047      	b.n	800428e <USB_EPStartXfer+0x51a>
 80041fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <USB_EPStartXfer+0x4aa>
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004218:	3301      	adds	r3, #1
 800421a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29a      	uxth	r2, r3
 8004224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004228:	b29b      	uxth	r3, r3
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	b29b      	uxth	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b29a      	uxth	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	e02a      	b.n	800428e <USB_EPStartXfer+0x51a>
 8004238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800423c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d122      	bne.n	800428e <USB_EPStartXfer+0x51a>
 8004248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800424c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004262:	b29b      	uxth	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	4413      	add	r3, r2
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	011a      	lsls	r2, r3, #4
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	4413      	add	r3, r2
 800427e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004288:	b29a      	uxth	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800428e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	891b      	ldrh	r3, [r3, #8]
 800429a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800429e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6959      	ldr	r1, [r3, #20]
 80042aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80042b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80042b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80042bc:	6800      	ldr	r0, [r0, #0]
 80042be:	f001 fa48 	bl	8005752 <USB_WritePMA>
 80042c2:	e3ee      	b.n	8004aa2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d177      	bne.n	80043c4 <USB_EPStartXfer+0x650>
 80042d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f4:	4413      	add	r3, r2
 80042f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	011a      	lsls	r2, r3, #4
 8004306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004308:	4413      	add	r3, r2
 800430a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800430e:	647b      	str	r3, [r7, #68]	; 0x44
 8004310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800431a:	b29a      	uxth	r2, r3
 800431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004324:	2b3e      	cmp	r3, #62	; 0x3e
 8004326:	d921      	bls.n	800436c <USB_EPStartXfer+0x5f8>
 8004328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <USB_EPStartXfer+0x5d4>
 800433e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004342:	3b01      	subs	r3, #1
 8004344:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29a      	uxth	r2, r3
 800434e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004352:	b29b      	uxth	r3, r3
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	b29b      	uxth	r3, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004364:	b29a      	uxth	r2, r3
 8004366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e056      	b.n	800441a <USB_EPStartXfer+0x6a6>
 800436c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <USB_EPStartXfer+0x616>
 8004374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004382:	b29a      	uxth	r2, r3
 8004384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e047      	b.n	800441a <USB_EPStartXfer+0x6a6>
 800438a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <USB_EPStartXfer+0x636>
 80043a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043a4:	3301      	adds	r3, #1
 80043a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	029b      	lsls	r3, r3, #10
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	e02a      	b.n	800441a <USB_EPStartXfer+0x6a6>
 80043c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d122      	bne.n	800441a <USB_EPStartXfer+0x6a6>
 80043d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	653b      	str	r3, [r7, #80]	; 0x50
 80043e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f4:	4413      	add	r3, r2
 80043f6:	653b      	str	r3, [r7, #80]	; 0x50
 80043f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	011a      	lsls	r2, r3, #4
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	4413      	add	r3, r2
 800440a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004414:	b29a      	uxth	r2, r3
 8004416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004418:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800441a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	891b      	ldrh	r3, [r3, #8]
 8004426:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800442a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800442e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6959      	ldr	r1, [r3, #20]
 8004436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800443a:	b29b      	uxth	r3, r3
 800443c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004440:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004444:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004448:	6800      	ldr	r0, [r0, #0]
 800444a:	f001 f982 	bl	8005752 <USB_WritePMA>
            ep->xfer_buff += len;
 800444e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800445e:	441a      	add	r2, r3
 8004460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800446c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800447c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d90f      	bls.n	80044a8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800448c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004498:	1ad2      	subs	r2, r2, r3
 800449a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800449e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	621a      	str	r2, [r3, #32]
 80044a6:	e00e      	b.n	80044c6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80044a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80044b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	643b      	str	r3, [r7, #64]	; 0x40
 80044d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d177      	bne.n	80045d2 <USB_EPStartXfer+0x85e>
 80044e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	4413      	add	r3, r2
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
 8004506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800450a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	011a      	lsls	r2, r3, #4
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	4413      	add	r3, r2
 8004518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004528:	b29a      	uxth	r2, r3
 800452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004532:	2b3e      	cmp	r3, #62	; 0x3e
 8004534:	d921      	bls.n	800457a <USB_EPStartXfer+0x806>
 8004536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <USB_EPStartXfer+0x7e2>
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	3b01      	subs	r3, #1
 8004552:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29a      	uxth	r2, r3
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	b29b      	uxth	r3, r3
 8004562:	029b      	lsls	r3, r3, #10
 8004564:	b29b      	uxth	r3, r3
 8004566:	4313      	orrs	r3, r2
 8004568:	b29b      	uxth	r3, r3
 800456a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004572:	b29a      	uxth	r2, r3
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	e050      	b.n	800461c <USB_EPStartXfer+0x8a8>
 800457a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <USB_EPStartXfer+0x824>
 8004582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004590:	b29a      	uxth	r2, r3
 8004592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	e041      	b.n	800461c <USB_EPStartXfer+0x8a8>
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <USB_EPStartXfer+0x844>
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	3301      	adds	r3, #1
 80045b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	e024      	b.n	800461c <USB_EPStartXfer+0x8a8>
 80045d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d11c      	bne.n	800461c <USB_EPStartXfer+0x8a8>
 80045e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f6:	4413      	add	r3, r2
 80045f8:	643b      	str	r3, [r7, #64]	; 0x40
 80045fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	011a      	lsls	r2, r3, #4
 8004608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460a:	4413      	add	r3, r2
 800460c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004616:	b29a      	uxth	r2, r3
 8004618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800461c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	895b      	ldrh	r3, [r3, #10]
 8004628:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800462c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6959      	ldr	r1, [r3, #20]
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463c:	b29b      	uxth	r3, r3
 800463e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004642:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004646:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	f001 f881 	bl	8005752 <USB_WritePMA>
 8004650:	e227      	b.n	8004aa2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800468c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800469a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d8:	b29b      	uxth	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046de:	4413      	add	r3, r2
 80046e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	011a      	lsls	r2, r3, #4
 80046f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f2:	4413      	add	r3, r2
 80046f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80046fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004702:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	891b      	ldrh	r3, [r3, #8]
 8004710:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6959      	ldr	r1, [r3, #20]
 8004720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004724:	b29b      	uxth	r3, r3
 8004726:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800472a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800472e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004732:	6800      	ldr	r0, [r0, #0]
 8004734:	f001 f80d 	bl	8005752 <USB_WritePMA>
 8004738:	e1b3      	b.n	8004aa2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800473a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800473e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800475c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80c6 	beq.w	800490c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	673b      	str	r3, [r7, #112]	; 0x70
 800478c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d177      	bne.n	800488c <USB_EPStartXfer+0xb18>
 800479c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047bc:	4413      	add	r3, r2
 80047be:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	011a      	lsls	r2, r3, #4
 80047ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047d0:	4413      	add	r3, r2
 80047d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047d6:	667b      	str	r3, [r7, #100]	; 0x64
 80047d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e6:	801a      	strh	r2, [r3, #0]
 80047e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ec:	2b3e      	cmp	r3, #62	; 0x3e
 80047ee:	d921      	bls.n	8004834 <USB_EPStartXfer+0xac0>
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <USB_EPStartXfer+0xa9c>
 8004806:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800480a:	3b01      	subs	r3, #1
 800480c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29a      	uxth	r2, r3
 8004816:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800481a:	b29b      	uxth	r3, r3
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	b29b      	uxth	r3, r3
 8004820:	4313      	orrs	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482c:	b29a      	uxth	r2, r3
 800482e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	e050      	b.n	80048d6 <USB_EPStartXfer+0xb62>
 8004834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <USB_EPStartXfer+0xade>
 800483c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484a:	b29a      	uxth	r2, r3
 800484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	e041      	b.n	80048d6 <USB_EPStartXfer+0xb62>
 8004852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800485c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <USB_EPStartXfer+0xafe>
 8004868:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800486c:	3301      	adds	r3, #1
 800486e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
 8004878:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800487c:	b29b      	uxth	r3, r3
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	b29b      	uxth	r3, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e024      	b.n	80048d6 <USB_EPStartXfer+0xb62>
 800488c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d11c      	bne.n	80048d6 <USB_EPStartXfer+0xb62>
 800489c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b0:	4413      	add	r3, r2
 80048b2:	673b      	str	r3, [r7, #112]	; 0x70
 80048b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	011a      	lsls	r2, r3, #4
 80048c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c4:	4413      	add	r3, r2
 80048c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80048d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	895b      	ldrh	r3, [r3, #10]
 80048e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6959      	ldr	r1, [r3, #20]
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80048fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004900:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004904:	6800      	ldr	r0, [r0, #0]
 8004906:	f000 ff24 	bl	8005752 <USB_WritePMA>
 800490a:	e0ca      	b.n	8004aa2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d177      	bne.n	8004a0c <USB_EPStartXfer+0xc98>
 800491c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004936:	b29b      	uxth	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800493c:	4413      	add	r3, r2
 800493e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004950:	4413      	add	r3, r2
 8004952:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004956:	67bb      	str	r3, [r7, #120]	; 0x78
 8004958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004962:	b29a      	uxth	r2, r3
 8004964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800496c:	2b3e      	cmp	r3, #62	; 0x3e
 800496e:	d921      	bls.n	80049b4 <USB_EPStartXfer+0xc40>
 8004970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <USB_EPStartXfer+0xc1c>
 8004986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800498a:	3b01      	subs	r3, #1
 800498c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29a      	uxth	r2, r3
 8004996:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800499a:	b29b      	uxth	r3, r3
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	b29b      	uxth	r3, r3
 80049a0:	4313      	orrs	r3, r2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e05c      	b.n	8004a6e <USB_EPStartXfer+0xcfa>
 80049b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <USB_EPStartXfer+0xc5e>
 80049bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ce:	801a      	strh	r2, [r3, #0]
 80049d0:	e04d      	b.n	8004a6e <USB_EPStartXfer+0xcfa>
 80049d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80049dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <USB_EPStartXfer+0xc7e>
 80049e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049ec:	3301      	adds	r3, #1
 80049ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80049f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4313      	orrs	r3, r2
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	e030      	b.n	8004a6e <USB_EPStartXfer+0xcfa>
 8004a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d128      	bne.n	8004a6e <USB_EPStartXfer+0xcfa>
 8004a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a40:	4413      	add	r3, r2
 8004a42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	011a      	lsls	r2, r3, #4
 8004a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a58:	4413      	add	r3, r2
 8004a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	891b      	ldrh	r3, [r3, #8]
 8004a7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6959      	ldr	r1, [r3, #20]
 8004a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004a94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f000 fe58 	bl	8005752 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac8:	817b      	strh	r3, [r7, #10]
 8004aca:	897b      	ldrh	r3, [r7, #10]
 8004acc:	f083 0310 	eor.w	r3, r3, #16
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	f083 0320 	eor.w	r3, r3, #32
 8004ad8:	817b      	strh	r3, [r7, #10]
 8004ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	897b      	ldrh	r3, [r7, #10]
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]
 8004b0a:	f000 bcde 	b.w	80054ca <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	7b1b      	ldrb	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80bb 	bne.w	8004c96 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d917      	bls.n	8004b6c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b5c:	1ad2      	subs	r2, r2, r3
 8004b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	619a      	str	r2, [r3, #24]
 8004b6a:	e00e      	b.n	8004b8a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bae:	4413      	add	r3, r2
 8004bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be8:	2b3e      	cmp	r3, #62	; 0x3e
 8004bea:	d924      	bls.n	8004c36 <USB_EPStartXfer+0xec2>
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <USB_EPStartXfer+0xe98>
 8004c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c06:	3b01      	subs	r3, #1
 8004c08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	f000 bc10 	b.w	8005456 <USB_EPStartXfer+0x16e2>
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10c      	bne.n	8004c58 <USB_EPStartXfer+0xee4>
 8004c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	e3fe      	b.n	8005456 <USB_EPStartXfer+0x16e2>
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <USB_EPStartXfer+0xf04>
 8004c6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c72:	3301      	adds	r3, #1
 8004c74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	029b      	lsls	r3, r3, #10
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	e3df      	b.n	8005456 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	78db      	ldrb	r3, [r3, #3]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	f040 8218 	bne.w	80050d8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f040 809d 	bne.w	8004df4 <USB_EPStartXfer+0x1080>
 8004cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cde:	4413      	add	r3, r2
 8004ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	011a      	lsls	r2, r3, #4
 8004cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d12:	801a      	strh	r2, [r3, #0]
 8004d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b3e      	cmp	r3, #62	; 0x3e
 8004d22:	d92b      	bls.n	8004d7c <USB_EPStartXfer+0x1008>
 8004d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <USB_EPStartXfer+0xfe0>
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	029b      	lsls	r3, r3, #10
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	4313      	orrs	r3, r2
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	e070      	b.n	8004e5e <USB_EPStartXfer+0x10ea>
 8004d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10c      	bne.n	8004da6 <USB_EPStartXfer+0x1032>
 8004d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e05b      	b.n	8004e5e <USB_EPStartXfer+0x10ea>
 8004da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d004      	beq.n	8004dd6 <USB_EPStartXfer+0x1062>
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	e034      	b.n	8004e5e <USB_EPStartXfer+0x10ea>
 8004df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d12c      	bne.n	8004e5e <USB_EPStartXfer+0x10ea>
 8004e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e28:	4413      	add	r3, r2
 8004e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	011a      	lsls	r2, r3, #4
 8004e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e40:	4413      	add	r3, r2
 8004e42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f040 809d 	bne.w	8004fb8 <USB_EPStartXfer+0x1244>
 8004e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	011a      	lsls	r2, r3, #4
 8004eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eba:	4413      	add	r3, r2
 8004ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee6:	d92b      	bls.n	8004f40 <USB_EPStartXfer+0x11cc>
 8004ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <USB_EPStartXfer+0x11a4>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f12:	3b01      	subs	r3, #1
 8004f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	029b      	lsls	r3, r3, #10
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f3c:	801a      	strh	r2, [r3, #0]
 8004f3e:	e069      	b.n	8005014 <USB_EPStartXfer+0x12a0>
 8004f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10c      	bne.n	8004f6a <USB_EPStartXfer+0x11f6>
 8004f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e054      	b.n	8005014 <USB_EPStartXfer+0x12a0>
 8004f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <USB_EPStartXfer+0x1226>
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	3301      	adds	r3, #1
 8004f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	029b      	lsls	r3, r3, #10
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4313      	orrs	r3, r2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	e02d      	b.n	8005014 <USB_EPStartXfer+0x12a0>
 8004fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d125      	bne.n	8005014 <USB_EPStartXfer+0x12a0>
 8004fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fde:	4413      	add	r3, r2
 8004fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	011a      	lsls	r2, r3, #4
 8004ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	b29a      	uxth	r2, r3
 800500e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005012:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8218 	beq.w	8005456 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005046:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800504a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <USB_EPStartXfer+0x12ea>
 8005052:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800505e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	f040 81f5 	bne.w	8005456 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800506c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	f040 81ee 	bne.w	8005456 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800507a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80050a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]
 80050d6:	e1be      	b.n	8005456 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80050d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	f040 81b4 	bne.w	8005452 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80050ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d917      	bls.n	8005136 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	619a      	str	r2, [r3, #24]
 8005134:	e00e      	b.n	8005154 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 8085 	bne.w	8005270 <USB_EPStartXfer+0x14fc>
 8005166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800518a:	4413      	add	r3, r2
 800518c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051a2:	4413      	add	r3, r2
 80051a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c4:	2b3e      	cmp	r3, #62	; 0x3e
 80051c6:	d923      	bls.n	8005210 <USB_EPStartXfer+0x149c>
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <USB_EPStartXfer+0x1474>
 80051de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e2:	3b01      	subs	r3, #1
 80051e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	029b      	lsls	r3, r3, #10
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	4313      	orrs	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005206:	b29a      	uxth	r2, r3
 8005208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	e060      	b.n	80052d2 <USB_EPStartXfer+0x155e>
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10c      	bne.n	8005232 <USB_EPStartXfer+0x14be>
 8005218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005228:	b29a      	uxth	r2, r3
 800522a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e04f      	b.n	80052d2 <USB_EPStartXfer+0x155e>
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <USB_EPStartXfer+0x14de>
 8005248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524c:	3301      	adds	r3, #1
 800524e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29a      	uxth	r2, r3
 800525a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525e:	b29b      	uxth	r3, r3
 8005260:	029b      	lsls	r3, r3, #10
 8005262:	b29b      	uxth	r3, r3
 8005264:	4313      	orrs	r3, r2
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e030      	b.n	80052d2 <USB_EPStartXfer+0x155e>
 8005270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d128      	bne.n	80052d2 <USB_EPStartXfer+0x155e>
 8005280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800528e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529c:	b29b      	uxth	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052a4:	4413      	add	r3, r2
 80052a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	011a      	lsls	r2, r3, #4
 80052b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052bc:	4413      	add	r3, r2
 80052be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8085 	bne.w	80053fc <USB_EPStartXfer+0x1688>
 80052f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005316:	4413      	add	r3, r2
 8005318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800531c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	011a      	lsls	r2, r3, #4
 800532a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800532e:	4413      	add	r3, r2
 8005330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005344:	b29a      	uxth	r2, r3
 8005346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005350:	2b3e      	cmp	r3, #62	; 0x3e
 8005352:	d923      	bls.n	800539c <USB_EPStartXfer+0x1628>
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <USB_EPStartXfer+0x1600>
 800536a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800536e:	3b01      	subs	r3, #1
 8005370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29a      	uxth	r2, r3
 800537c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005380:	b29b      	uxth	r3, r3
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	b29b      	uxth	r3, r3
 8005386:	4313      	orrs	r3, r2
 8005388:	b29b      	uxth	r3, r3
 800538a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005392:	b29a      	uxth	r2, r3
 8005394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e05c      	b.n	8005456 <USB_EPStartXfer+0x16e2>
 800539c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10c      	bne.n	80053be <USB_EPStartXfer+0x164a>
 80053a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e04b      	b.n	8005456 <USB_EPStartXfer+0x16e2>
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <USB_EPStartXfer+0x166a>
 80053d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053d8:	3301      	adds	r3, #1
 80053da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	e02c      	b.n	8005456 <USB_EPStartXfer+0x16e2>
 80053fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d124      	bne.n	8005456 <USB_EPStartXfer+0x16e2>
 800540c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005422:	4413      	add	r3, r2
 8005424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	011a      	lsls	r2, r3, #4
 8005436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800543a:	4413      	add	r3, r2
 800543c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e001      	b.n	8005456 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e03a      	b.n	80054cc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005480:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005484:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005488:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800548c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005490:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005494:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80054b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	81bb      	strh	r3, [r7, #12]
 8005500:	89bb      	ldrh	r3, [r7, #12]
 8005502:	f083 0310 	eor.w	r3, r3, #16
 8005506:	81bb      	strh	r3, [r7, #12]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	441a      	add	r2, r3
 8005512:	89bb      	ldrh	r3, [r7, #12]
 8005514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005524:	b29b      	uxth	r3, r3
 8005526:	8013      	strh	r3, [r2, #0]
 8005528:	e01f      	b.n	800556a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	81fb      	strh	r3, [r7, #14]
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005548:	81fb      	strh	r3, [r7, #14]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	89fb      	ldrh	r3, [r7, #14]
 8005556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005576:	b480      	push	{r7}
 8005578:	b087      	sub	sp, #28
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	7b1b      	ldrb	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 809d 	bne.w	80056c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04c      	beq.n	800562c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	823b      	strh	r3, [r7, #16]
 80055a0:	8a3b      	ldrh	r3, [r7, #16]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01b      	beq.n	80055e2 <USB_EPClearStall+0x6c>
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	81fb      	strh	r3, [r7, #14]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	78db      	ldrb	r3, [r3, #3]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d06c      	beq.n	80056c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	81bb      	strh	r3, [r7, #12]
 8005602:	89bb      	ldrh	r3, [r7, #12]
 8005604:	f083 0320 	eor.w	r3, r3, #32
 8005608:	81bb      	strh	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	89bb      	ldrh	r3, [r7, #12]
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]
 800562a:	e04b      	b.n	80056c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	82fb      	strh	r3, [r7, #22]
 800563a:	8afb      	ldrh	r3, [r7, #22]
 800563c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <USB_EPClearStall+0x106>
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	82bb      	strh	r3, [r7, #20]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	8abb      	ldrh	r3, [r7, #20]
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	827b      	strh	r3, [r7, #18]
 8005694:	8a7b      	ldrh	r3, [r7, #18]
 8005696:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800569a:	827b      	strh	r3, [r7, #18]
 800569c:	8a7b      	ldrh	r3, [r7, #18]
 800569e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056a2:	827b      	strh	r3, [r7, #18]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	8a7b      	ldrh	r3, [r7, #18]
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr

0800571e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800572c:	b29b      	uxth	r3, r3
 800572e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr

0800573c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005752:	b480      	push	{r7}
 8005754:	b08b      	sub	sp, #44	; 0x2c
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	4611      	mov	r1, r2
 800575e:	461a      	mov	r2, r3
 8005760:	460b      	mov	r3, r1
 8005762:	80fb      	strh	r3, [r7, #6]
 8005764:	4613      	mov	r3, r2
 8005766:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005768:	88bb      	ldrh	r3, [r7, #4]
 800576a:	3301      	adds	r3, #1
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	005a      	lsls	r2, r3, #1
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005784:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
 800578a:	e01e      	b.n	80057ca <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3301      	adds	r3, #1
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	b21a      	sxth	r2, r3
 800579c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b21b      	sxth	r3, r3
 80057a4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	8a7a      	ldrh	r2, [r7, #18]
 80057aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	3302      	adds	r3, #2
 80057b0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	3302      	adds	r3, #2
 80057b6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3301      	adds	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	3b01      	subs	r3, #1
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1dd      	bne.n	800578c <USB_WritePMA+0x3a>
  }
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	372c      	adds	r7, #44	; 0x2c
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80057dc:	b480      	push	{r7}
 80057de:	b08b      	sub	sp, #44	; 0x2c
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	460b      	mov	r3, r1
 80057ec:	80fb      	strh	r3, [r7, #6]
 80057ee:	4613      	mov	r3, r2
 80057f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80057f2:	88bb      	ldrh	r3, [r7, #4]
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	005a      	lsls	r2, r3, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800580e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
 8005814:	e01b      	b.n	800584e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	3302      	adds	r3, #2
 8005822:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	3301      	adds	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	b2da      	uxtb	r2, r3
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	3301      	adds	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	3302      	adds	r3, #2
 8005846:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	3b01      	subs	r3, #1
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e0      	bne.n	8005816 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005854:	88bb      	ldrh	r3, [r7, #4]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	701a      	strb	r2, [r3, #0]
  }
}
 8005870:	bf00      	nop
 8005872:	372c      	adds	r7, #44	; 0x2c
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	7c1b      	ldrb	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d115      	bne.n	80058be <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005896:	2202      	movs	r2, #2
 8005898:	2181      	movs	r1, #129	; 0x81
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fe9d 	bl	80075da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058aa:	2202      	movs	r2, #2
 80058ac:	2101      	movs	r1, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 fe93 	bl	80075da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80058bc:	e012      	b.n	80058e4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058be:	2340      	movs	r3, #64	; 0x40
 80058c0:	2202      	movs	r2, #2
 80058c2:	2181      	movs	r1, #129	; 0x81
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 fe88 	bl	80075da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058d0:	2340      	movs	r3, #64	; 0x40
 80058d2:	2202      	movs	r2, #2
 80058d4:	2101      	movs	r1, #1
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fe7f 	bl	80075da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058e4:	2308      	movs	r3, #8
 80058e6:	2203      	movs	r2, #3
 80058e8:	2182      	movs	r1, #130	; 0x82
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fe75 	bl	80075da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058f6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058fa:	f001 ff95 	bl	8007828 <USBD_static_malloc>
 80058fe:	4602      	mov	r2, r0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e026      	b.n	8005964 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	7c1b      	ldrb	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d109      	bne.n	8005954 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594a:	2101      	movs	r1, #1
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 ff35 	bl	80077bc <USBD_LL_PrepareReceive>
 8005952:	e007      	b.n	8005964 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800595a:	2340      	movs	r3, #64	; 0x40
 800595c:	2101      	movs	r1, #1
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 ff2c 	bl	80077bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800597e:	2181      	movs	r1, #129	; 0x81
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fe50 	bl	8007626 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800598c:	2101      	movs	r1, #1
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 fe49 	bl	8007626 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800599c:	2182      	movs	r1, #130	; 0x82
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 fe41 	bl	8007626 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00e      	beq.n	80059d2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 ff3b 	bl	8007840 <USBD_static_free>
    pdev->pClassData = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d039      	beq.n	8005a7a <USBD_CDC_Setup+0x9e>
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d17f      	bne.n	8005b0a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	88db      	ldrh	r3, [r3, #6]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d029      	beq.n	8005a66 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	b25b      	sxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	da11      	bge.n	8005a40 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005a28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	88d2      	ldrh	r2, [r2, #6]
 8005a2e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a30:	6939      	ldr	r1, [r7, #16]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	88db      	ldrh	r3, [r3, #6]
 8005a36:	461a      	mov	r2, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 fa0a 	bl	8006e52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005a3e:	e06b      	b.n	8005b18 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	785a      	ldrb	r2, [r3, #1]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	88db      	ldrh	r3, [r3, #6]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a56:	6939      	ldr	r1, [r7, #16]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	88db      	ldrh	r3, [r3, #6]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fa25 	bl	8006eae <USBD_CtlPrepareRx>
      break;
 8005a64:	e058      	b.n	8005b18 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	7850      	ldrb	r0, [r2, #1]
 8005a72:	2200      	movs	r2, #0
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	4798      	blx	r3
      break;
 8005a78:	e04e      	b.n	8005b18 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b0b      	cmp	r3, #11
 8005a80:	d02e      	beq.n	8005ae0 <USBD_CDC_Setup+0x104>
 8005a82:	2b0b      	cmp	r3, #11
 8005a84:	dc38      	bgt.n	8005af8 <USBD_CDC_Setup+0x11c>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <USBD_CDC_Setup+0xb4>
 8005a8a:	2b0a      	cmp	r3, #10
 8005a8c:	d014      	beq.n	8005ab8 <USBD_CDC_Setup+0xdc>
 8005a8e:	e033      	b.n	8005af8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d107      	bne.n	8005aaa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 f9d5 	bl	8006e52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005aa8:	e02e      	b.n	8005b08 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 f966 	bl	8006d7e <USBD_CtlError>
            ret = USBD_FAIL;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ab6:	e027      	b.n	8005b08 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d107      	bne.n	8005ad2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ac2:	f107 030f 	add.w	r3, r7, #15
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 f9c1 	bl	8006e52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ad0:	e01a      	b.n	8005b08 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 f952 	bl	8006d7e <USBD_CtlError>
            ret = USBD_FAIL;
 8005ada:	2302      	movs	r3, #2
 8005adc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ade:	e013      	b.n	8005b08 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d00d      	beq.n	8005b06 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 f946 	bl	8006d7e <USBD_CtlError>
            ret = USBD_FAIL;
 8005af2:	2302      	movs	r3, #2
 8005af4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005af6:	e006      	b.n	8005b06 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 f93f 	bl	8006d7e <USBD_CtlError>
          ret = USBD_FAIL;
 8005b00:	2302      	movs	r3, #2
 8005b02:	75fb      	strb	r3, [r7, #23]
          break;
 8005b04:	e000      	b.n	8005b08 <USBD_CDC_Setup+0x12c>
          break;
 8005b06:	bf00      	nop
      }
      break;
 8005b08:	e006      	b.n	8005b18 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 f936 	bl	8006d7e <USBD_CtlError>
      ret = USBD_FAIL;
 8005b12:	2302      	movs	r3, #2
 8005b14:	75fb      	strb	r3, [r7, #23]
      break;
 8005b16:	bf00      	nop
  }

  return ret;
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b34:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b3c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d03a      	beq.n	8005bbe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	331c      	adds	r3, #28
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d029      	beq.n	8005bb2 <USBD_CDC_DataIn+0x90>
 8005b5e:	78fa      	ldrb	r2, [r7, #3]
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	331c      	adds	r3, #28
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	78f9      	ldrb	r1, [r7, #3]
 8005b72:	68b8      	ldr	r0, [r7, #8]
 8005b74:	460b      	mov	r3, r1
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4403      	add	r3, r0
 8005b7e:	3338      	adds	r3, #56	; 0x38
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d110      	bne.n	8005bb2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	331c      	adds	r3, #28
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ba4:	78f9      	ldrb	r1, [r7, #3]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2200      	movs	r2, #0
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 fde3 	bl	8007776 <USBD_LL_Transmit>
 8005bb0:	e003      	b.n	8005bba <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e000      	b.n	8005bc0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005bbe:	2302      	movs	r3, #2
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 fe0e 	bl	8007802 <USBD_LL_GetRxDataSize>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4798      	blx	r3

    return USBD_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d015      	beq.n	8005c64 <USBD_CDC_EP0_RxReady+0x46>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c3e:	2bff      	cmp	r3, #255	; 0xff
 8005c40:	d010      	beq.n	8005c64 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005c50:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	22ff      	movs	r2, #255	; 0xff
 8005c60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2243      	movs	r2, #67	; 0x43
 8005c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005c7e:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000094 	.word	0x20000094

08005c90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2243      	movs	r2, #67	; 0x43
 8005c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005c9e:	4b03      	ldr	r3, [pc, #12]	; (8005cac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000050 	.word	0x20000050

08005cb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2243      	movs	r2, #67	; 0x43
 8005cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	200000d8 	.word	0x200000d8

08005cd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	220a      	movs	r2, #10
 8005cdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	2000000c 	.word	0x2000000c

08005cf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d30:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01c      	beq.n	8005dc8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d115      	bne.n	8005dc4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2181      	movs	r1, #129	; 0x81
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 fcdb 	bl	8007776 <USBD_LL_Transmit>

      return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e002      	b.n	8005dca <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005dc8:	2302      	movs	r3, #2
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7c1b      	ldrb	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dfe:	2101      	movs	r1, #1
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fcdb 	bl	80077bc <USBD_LL_PrepareReceive>
 8005e06:	e007      	b.n	8005e18 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e0e:	2340      	movs	r3, #64	; 0x40
 8005e10:	2101      	movs	r1, #1
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 fcd2 	bl	80077bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	4613      	mov	r3, r2
 8005e32:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e01a      	b.n	8005e74 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	79fa      	ldrb	r2, [r7, #7]
 8005e6a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f001 fb3f 	bl	80074f0 <USBD_LL_Init>

  return USBD_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d006      	beq.n	8005e9e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73fb      	strb	r3, [r7, #15]
 8005e9c:	e001      	b.n	8005ea2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fb74 	bl	80075a4 <USBD_LL_Start>

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr

08005eda <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	4611      	mov	r1, r2
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3

  return USBD_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fed8 	bl	8006d06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f64:	461a      	mov	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d016      	beq.n	8005fa8 <USBD_LL_SetupStage+0x6a>
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d81c      	bhi.n	8005fb8 <USBD_LL_SetupStage+0x7a>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <USBD_LL_SetupStage+0x4a>
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d008      	beq.n	8005f98 <USBD_LL_SetupStage+0x5a>
 8005f86:	e017      	b.n	8005fb8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f9cb 	bl	800632c <USBD_StdDevReq>
      break;
 8005f96:	e01a      	b.n	8005fce <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fa2d 	bl	8006400 <USBD_StdItfReq>
      break;
 8005fa6:	e012      	b.n	8005fce <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fa6d 	bl	8006490 <USBD_StdEPReq>
      break;
 8005fb6:	e00a      	b.n	8005fce <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fb4c 	bl	8007664 <USBD_LL_StallEP>
      break;
 8005fcc:	bf00      	nop
  }

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d14b      	bne.n	8006084 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ff2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d134      	bne.n	8006068 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	429a      	cmp	r2, r3
 8006008:	d919      	bls.n	800603e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	1ad2      	subs	r2, r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006020:	429a      	cmp	r2, r3
 8006022:	d203      	bcs.n	800602c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006028:	b29b      	uxth	r3, r3
 800602a:	e002      	b.n	8006032 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 ff57 	bl	8006eea <USBD_CtlContinueRx>
 800603c:	e038      	b.n	80060b0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006050:	2b03      	cmp	r3, #3
 8006052:	d105      	bne.n	8006060 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 ff54 	bl	8006f0e <USBD_CtlSendStatus>
 8006066:	e023      	b.n	80060b0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800606e:	2b05      	cmp	r3, #5
 8006070:	d11e      	bne.n	80060b0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800607a:	2100      	movs	r1, #0
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f001 faf1 	bl	8007664 <USBD_LL_StallEP>
 8006082:	e015      	b.n	80060b0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006096:	2b03      	cmp	r3, #3
 8006098:	d108      	bne.n	80060ac <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	7afa      	ldrb	r2, [r7, #11]
 80060a4:	4611      	mov	r1, r2
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	4798      	blx	r3
 80060aa:	e001      	b.n	80060b0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060ac:	2302      	movs	r3, #2
 80060ae:	e000      	b.n	80060b2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	460b      	mov	r3, r1
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d17f      	bne.n	80061ce <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3314      	adds	r3, #20
 80060d2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d15c      	bne.n	8006198 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d915      	bls.n	8006116 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fec1 	bl	8006e8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006108:	2300      	movs	r3, #0
 800610a:	2200      	movs	r2, #0
 800610c:	2100      	movs	r1, #0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f001 fb54 	bl	80077bc <USBD_LL_PrepareReceive>
 8006114:	e04e      	b.n	80061b4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6912      	ldr	r2, [r2, #16]
 800611e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006122:	fb01 f202 	mul.w	r2, r1, r2
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11c      	bne.n	8006166 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006134:	429a      	cmp	r2, r3
 8006136:	d316      	bcc.n	8006166 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006142:	429a      	cmp	r2, r3
 8006144:	d20f      	bcs.n	8006166 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fe9d 	bl	8006e8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006158:	2300      	movs	r3, #0
 800615a:	2200      	movs	r2, #0
 800615c:	2100      	movs	r1, #0
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f001 fb2c 	bl	80077bc <USBD_LL_PrepareReceive>
 8006164:	e026      	b.n	80061b4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006178:	2b03      	cmp	r3, #3
 800617a:	d105      	bne.n	8006188 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006188:	2180      	movs	r1, #128	; 0x80
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f001 fa6a 	bl	8007664 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fecf 	bl	8006f34 <USBD_CtlReceiveStatus>
 8006196:	e00d      	b.n	80061b4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d004      	beq.n	80061ac <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d103      	bne.n	80061b4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 fa58 	bl	8007664 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d11d      	bne.n	80061fa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fe81 	bl	8005ec6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061cc:	e015      	b.n	80061fa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d108      	bne.n	80061f6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	7afa      	ldrb	r2, [r7, #11]
 80061ee:	4611      	mov	r1, r2
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	4798      	blx	r3
 80061f4:	e001      	b.n	80061fa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061f6:	2302      	movs	r3, #2
 80061f8:	e000      	b.n	80061fc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	2200      	movs	r2, #0
 8006210:	2100      	movs	r1, #0
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 f9e1 	bl	80075da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2240      	movs	r2, #64	; 0x40
 8006224:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006228:	2340      	movs	r3, #64	; 0x40
 800622a:	2200      	movs	r2, #0
 800622c:	2180      	movs	r1, #128	; 0x80
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 f9d3 	bl	80075da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2240      	movs	r2, #64	; 0x40
 800623e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006264:	2b00      	cmp	r3, #0
 8006266:	d009      	beq.n	800627c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6852      	ldr	r2, [r2, #4]
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	4611      	mov	r1, r2
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	4798      	blx	r3
  }

  return USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2204      	movs	r2, #4
 80062bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr

080062cc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d105      	bne.n	80062ea <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr

080062f6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	2b03      	cmp	r3, #3
 8006306:	d10b      	bne.n	8006320 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d005      	beq.n	8006352 <USBD_StdDevReq+0x26>
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d84f      	bhi.n	80063ea <USBD_StdDevReq+0xbe>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <USBD_StdDevReq+0x36>
 800634e:	2b20      	cmp	r3, #32
 8006350:	d14b      	bne.n	80063ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
      break;
 8006360:	e048      	b.n	80063f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b09      	cmp	r3, #9
 8006368:	d839      	bhi.n	80063de <USBD_StdDevReq+0xb2>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <USBD_StdDevReq+0x44>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063c1 	.word	0x080063c1
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063df 	.word	0x080063df
 800637c:	080063cb 	.word	0x080063cb
 8006380:	080063df 	.word	0x080063df
 8006384:	080063a3 	.word	0x080063a3
 8006388:	08006399 	.word	0x08006399
 800638c:	080063df 	.word	0x080063df
 8006390:	080063b7 	.word	0x080063b7
 8006394:	080063ad 	.word	0x080063ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f9dc 	bl	8006758 <USBD_GetDescriptor>
          break;
 80063a0:	e022      	b.n	80063e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fb3f 	bl	8006a28 <USBD_SetAddress>
          break;
 80063aa:	e01d      	b.n	80063e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb7e 	bl	8006ab0 <USBD_SetConfig>
          break;
 80063b4:	e018      	b.n	80063e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fc07 	bl	8006bcc <USBD_GetConfig>
          break;
 80063be:	e013      	b.n	80063e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fc37 	bl	8006c36 <USBD_GetStatus>
          break;
 80063c8:	e00e      	b.n	80063e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc65 	bl	8006c9c <USBD_SetFeature>
          break;
 80063d2:	e009      	b.n	80063e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc74 	bl	8006cc4 <USBD_ClrFeature>
          break;
 80063dc:	e004      	b.n	80063e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fccc 	bl	8006d7e <USBD_CtlError>
          break;
 80063e6:	bf00      	nop
      }
      break;
 80063e8:	e004      	b.n	80063f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fcc6 	bl	8006d7e <USBD_CtlError>
      break;
 80063f2:	bf00      	nop
  }

  return ret;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop

08006400 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d005      	beq.n	8006426 <USBD_StdItfReq+0x26>
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d82e      	bhi.n	800647c <USBD_StdItfReq+0x7c>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <USBD_StdItfReq+0x26>
 8006422:	2b20      	cmp	r3, #32
 8006424:	d12a      	bne.n	800647c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	3b01      	subs	r3, #1
 800642e:	2b02      	cmp	r3, #2
 8006430:	d81d      	bhi.n	800646e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	889b      	ldrh	r3, [r3, #4]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d813      	bhi.n	8006464 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	88db      	ldrh	r3, [r3, #6]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d110      	bne.n	8006478 <USBD_StdItfReq+0x78>
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10d      	bne.n	8006478 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fd56 	bl	8006f0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006462:	e009      	b.n	8006478 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fc89 	bl	8006d7e <USBD_CtlError>
          break;
 800646c:	e004      	b.n	8006478 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fc84 	bl	8006d7e <USBD_CtlError>
          break;
 8006476:	e000      	b.n	800647a <USBD_StdItfReq+0x7a>
          break;
 8006478:	bf00      	nop
      }
      break;
 800647a:	e004      	b.n	8006486 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc7d 	bl	8006d7e <USBD_CtlError>
      break;
 8006484:	bf00      	nop
  }

  return USBD_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	889b      	ldrh	r3, [r3, #4]
 80064a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d007      	beq.n	80064c0 <USBD_StdEPReq+0x30>
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	f200 8146 	bhi.w	8006742 <USBD_StdEPReq+0x2b2>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <USBD_StdEPReq+0x40>
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	f040 8141 	bne.w	8006742 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
      break;
 80064ce:	e13d      	b.n	800674c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d10a      	bne.n	80064f2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]

        return ret;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	e12d      	b.n	800674e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d007      	beq.n	800650a <USBD_StdEPReq+0x7a>
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	f300 811b 	bgt.w	8006736 <USBD_StdEPReq+0x2a6>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d072      	beq.n	80065ea <USBD_StdEPReq+0x15a>
 8006504:	2b01      	cmp	r3, #1
 8006506:	d03a      	beq.n	800657e <USBD_StdEPReq+0xee>
 8006508:	e115      	b.n	8006736 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006510:	2b02      	cmp	r3, #2
 8006512:	d002      	beq.n	800651a <USBD_StdEPReq+0x8a>
 8006514:	2b03      	cmp	r3, #3
 8006516:	d015      	beq.n	8006544 <USBD_StdEPReq+0xb4>
 8006518:	e02b      	b.n	8006572 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00c      	beq.n	800653a <USBD_StdEPReq+0xaa>
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	2b80      	cmp	r3, #128	; 0x80
 8006524:	d009      	beq.n	800653a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 f89a 	bl	8007664 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006530:	2180      	movs	r1, #128	; 0x80
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 f896 	bl	8007664 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006538:	e020      	b.n	800657c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fc1e 	bl	8006d7e <USBD_CtlError>
              break;
 8006542:	e01b      	b.n	800657c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	885b      	ldrh	r3, [r3, #2]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10e      	bne.n	800656a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <USBD_StdEPReq+0xda>
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	2b80      	cmp	r3, #128	; 0x80
 8006556:	d008      	beq.n	800656a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	88db      	ldrh	r3, [r3, #6]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 f87d 	bl	8007664 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fccf 	bl	8006f0e <USBD_CtlSendStatus>

              break;
 8006570:	e004      	b.n	800657c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fc02 	bl	8006d7e <USBD_CtlError>
              break;
 800657a:	bf00      	nop
          }
          break;
 800657c:	e0e0      	b.n	8006740 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006584:	2b02      	cmp	r3, #2
 8006586:	d002      	beq.n	800658e <USBD_StdEPReq+0xfe>
 8006588:	2b03      	cmp	r3, #3
 800658a:	d015      	beq.n	80065b8 <USBD_StdEPReq+0x128>
 800658c:	e026      	b.n	80065dc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800658e:	7bbb      	ldrb	r3, [r7, #14]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00c      	beq.n	80065ae <USBD_StdEPReq+0x11e>
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b80      	cmp	r3, #128	; 0x80
 8006598:	d009      	beq.n	80065ae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 f860 	bl	8007664 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065a4:	2180      	movs	r1, #128	; 0x80
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 f85c 	bl	8007664 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065ac:	e01c      	b.n	80065e8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fbe4 	bl	8006d7e <USBD_CtlError>
              break;
 80065b6:	e017      	b.n	80065e8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	885b      	ldrh	r3, [r3, #2]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d112      	bne.n	80065e6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 f867 	bl	80076a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fc9a 	bl	8006f0e <USBD_CtlSendStatus>
              }
              break;
 80065da:	e004      	b.n	80065e6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fbcd 	bl	8006d7e <USBD_CtlError>
              break;
 80065e4:	e000      	b.n	80065e8 <USBD_StdEPReq+0x158>
              break;
 80065e6:	bf00      	nop
          }
          break;
 80065e8:	e0aa      	b.n	8006740 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d002      	beq.n	80065fa <USBD_StdEPReq+0x16a>
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d032      	beq.n	800665e <USBD_StdEPReq+0x1ce>
 80065f8:	e097      	b.n	800672a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <USBD_StdEPReq+0x180>
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d004      	beq.n	8006610 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fbb8 	bl	8006d7e <USBD_CtlError>
                break;
 800660e:	e091      	b.n	8006734 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006614:	2b00      	cmp	r3, #0
 8006616:	da0b      	bge.n	8006630 <USBD_StdEPReq+0x1a0>
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	3310      	adds	r3, #16
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4413      	add	r3, r2
 800662c:	3304      	adds	r3, #4
 800662e:	e00b      	b.n	8006648 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	3304      	adds	r3, #4
 8006648:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2202      	movs	r2, #2
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fbfb 	bl	8006e52 <USBD_CtlSendData>
              break;
 800665c:	e06a      	b.n	8006734 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800665e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006662:	2b00      	cmp	r3, #0
 8006664:	da11      	bge.n	800668a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	3318      	adds	r3, #24
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d117      	bne.n	80066b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fb7b 	bl	8006d7e <USBD_CtlError>
                  break;
 8006688:	e054      	b.n	8006734 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fb68 	bl	8006d7e <USBD_CtlError>
                  break;
 80066ae:	e041      	b.n	8006734 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da0b      	bge.n	80066d0 <USBD_StdEPReq+0x240>
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	3310      	adds	r3, #16
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	3304      	adds	r3, #4
 80066ce:	e00b      	b.n	80066e8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	3304      	adds	r3, #4
 80066e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <USBD_StdEPReq+0x266>
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b80      	cmp	r3, #128	; 0x80
 80066f4:	d103      	bne.n	80066fe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e00e      	b.n	800671c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 ffec 	bl	80076e0 <USBD_LL_IsStallEP>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e002      	b.n	800671c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2202      	movs	r2, #2
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fb95 	bl	8006e52 <USBD_CtlSendData>
              break;
 8006728:	e004      	b.n	8006734 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb26 	bl	8006d7e <USBD_CtlError>
              break;
 8006732:	bf00      	nop
          }
          break;
 8006734:	e004      	b.n	8006740 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fb20 	bl	8006d7e <USBD_CtlError>
          break;
 800673e:	bf00      	nop
      }
      break;
 8006740:	e004      	b.n	800674c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fb1a 	bl	8006d7e <USBD_CtlError>
      break;
 800674a:	bf00      	nop
  }

  return ret;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	885b      	ldrh	r3, [r3, #2]
 8006772:	0a1b      	lsrs	r3, r3, #8
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	2b06      	cmp	r3, #6
 800677a:	f200 8128 	bhi.w	80069ce <USBD_GetDescriptor+0x276>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <USBD_GetDescriptor+0x2c>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067a1 	.word	0x080067a1
 8006788:	080067b9 	.word	0x080067b9
 800678c:	080067f9 	.word	0x080067f9
 8006790:	080069cf 	.word	0x080069cf
 8006794:	080069cf 	.word	0x080069cf
 8006798:	0800696f 	.word	0x0800696f
 800679c:	0800699b 	.word	0x0800699b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	f107 0108 	add.w	r1, r7, #8
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	60f8      	str	r0, [r7, #12]
      break;
 80067b6:	e112      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7c1b      	ldrb	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10d      	bne.n	80067dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c8:	f107 0208 	add.w	r2, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067da:	e100      	b.n	80069de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	f107 0208 	add.w	r2, r7, #8
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	2202      	movs	r2, #2
 80067f4:	701a      	strb	r2, [r3, #0]
      break;
 80067f6:	e0f2      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	885b      	ldrh	r3, [r3, #2]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b05      	cmp	r3, #5
 8006800:	f200 80ac 	bhi.w	800695c <USBD_GetDescriptor+0x204>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBD_GetDescriptor+0xb4>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006825 	.word	0x08006825
 8006810:	08006859 	.word	0x08006859
 8006814:	0800688d 	.word	0x0800688d
 8006818:	080068c1 	.word	0x080068c1
 800681c:	080068f5 	.word	0x080068f5
 8006820:	08006929 	.word	0x08006929
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	7c12      	ldrb	r2, [r2, #16]
 800683c:	f107 0108 	add.w	r1, r7, #8
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
 8006844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006846:	e091      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa97 	bl	8006d7e <USBD_CtlError>
            err++;
 8006850:	7afb      	ldrb	r3, [r7, #11]
 8006852:	3301      	adds	r3, #1
 8006854:	72fb      	strb	r3, [r7, #11]
          break;
 8006856:	e089      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	7c12      	ldrb	r2, [r2, #16]
 8006870:	f107 0108 	add.w	r1, r7, #8
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800687a:	e077      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa7d 	bl	8006d7e <USBD_CtlError>
            err++;
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	3301      	adds	r3, #1
 8006888:	72fb      	strb	r3, [r7, #11]
          break;
 800688a:	e06f      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	7c12      	ldrb	r2, [r2, #16]
 80068a4:	f107 0108 	add.w	r1, r7, #8
 80068a8:	4610      	mov	r0, r2
 80068aa:	4798      	blx	r3
 80068ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ae:	e05d      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa63 	bl	8006d7e <USBD_CtlError>
            err++;
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	3301      	adds	r3, #1
 80068bc:	72fb      	strb	r3, [r7, #11]
          break;
 80068be:	e055      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	7c12      	ldrb	r2, [r2, #16]
 80068d8:	f107 0108 	add.w	r1, r7, #8
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068e2:	e043      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa49 	bl	8006d7e <USBD_CtlError>
            err++;
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	3301      	adds	r3, #1
 80068f0:	72fb      	strb	r3, [r7, #11]
          break;
 80068f2:	e03b      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7c12      	ldrb	r2, [r2, #16]
 800690c:	f107 0108 	add.w	r1, r7, #8
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006916:	e029      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa2f 	bl	8006d7e <USBD_CtlError>
            err++;
 8006920:	7afb      	ldrb	r3, [r7, #11]
 8006922:	3301      	adds	r3, #1
 8006924:	72fb      	strb	r3, [r7, #11]
          break;
 8006926:	e021      	b.n	800696c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	7c12      	ldrb	r2, [r2, #16]
 8006940:	f107 0108 	add.w	r1, r7, #8
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800694a:	e00f      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa15 	bl	8006d7e <USBD_CtlError>
            err++;
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	3301      	adds	r3, #1
 8006958:	72fb      	strb	r3, [r7, #11]
          break;
 800695a:	e007      	b.n	800696c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa0d 	bl	8006d7e <USBD_CtlError>
          err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800696a:	e038      	b.n	80069de <USBD_GetDescriptor+0x286>
 800696c:	e037      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	7c1b      	ldrb	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697e:	f107 0208 	add.w	r2, r7, #8
 8006982:	4610      	mov	r0, r2
 8006984:	4798      	blx	r3
 8006986:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006988:	e029      	b.n	80069de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f9f6 	bl	8006d7e <USBD_CtlError>
        err++;
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	3301      	adds	r3, #1
 8006996:	72fb      	strb	r3, [r7, #11]
      break;
 8006998:	e021      	b.n	80069de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7c1b      	ldrb	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10d      	bne.n	80069be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f107 0208 	add.w	r2, r7, #8
 80069ae:	4610      	mov	r0, r2
 80069b0:	4798      	blx	r3
 80069b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	2207      	movs	r2, #7
 80069ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069bc:	e00f      	b.n	80069de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f9dc 	bl	8006d7e <USBD_CtlError>
        err++;
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	3301      	adds	r3, #1
 80069ca:	72fb      	strb	r3, [r7, #11]
      break;
 80069cc:	e007      	b.n	80069de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f9d4 	bl	8006d7e <USBD_CtlError>
      err++;
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	3301      	adds	r3, #1
 80069da:	72fb      	strb	r3, [r7, #11]
      break;
 80069dc:	bf00      	nop
  }

  if (err != 0U)
 80069de:	7afb      	ldrb	r3, [r7, #11]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11c      	bne.n	8006a1e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80069e4:	893b      	ldrh	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d011      	beq.n	8006a0e <USBD_GetDescriptor+0x2b6>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	88db      	ldrh	r3, [r3, #6]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00d      	beq.n	8006a0e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88da      	ldrh	r2, [r3, #6]
 80069f6:	893b      	ldrh	r3, [r7, #8]
 80069f8:	4293      	cmp	r3, r2
 80069fa:	bf28      	it	cs
 80069fc:	4613      	movcs	r3, r2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a02:	893b      	ldrh	r3, [r7, #8]
 8006a04:	461a      	mov	r2, r3
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fa22 	bl	8006e52 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa79 	bl	8006f0e <USBD_CtlSendStatus>
 8006a1c:	e000      	b.n	8006a20 <USBD_GetDescriptor+0x2c8>
    return;
 8006a1e:	bf00      	nop
    }
  }
}
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop

08006a28 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	889b      	ldrh	r3, [r3, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d130      	bne.n	8006a9c <USBD_SetAddress+0x74>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	88db      	ldrh	r3, [r3, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d12c      	bne.n	8006a9c <USBD_SetAddress+0x74>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	885b      	ldrh	r3, [r3, #2]
 8006a46:	2b7f      	cmp	r3, #127	; 0x7f
 8006a48:	d828      	bhi.n	8006a9c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	885b      	ldrh	r3, [r3, #2]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d104      	bne.n	8006a6a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f98b 	bl	8006d7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a68:	e01d      	b.n	8006aa6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fe5e 	bl	8007738 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa46 	bl	8006f0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d004      	beq.n	8006a92 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a90:	e009      	b.n	8006aa6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9a:	e004      	b.n	8006aa6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f96d 	bl	8006d7e <USBD_CtlError>
  }
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	885b      	ldrh	r3, [r3, #2]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	4b41      	ldr	r3, [pc, #260]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006ac2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ac4:	4b40      	ldr	r3, [pc, #256]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d904      	bls.n	8006ad6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f955 	bl	8006d7e <USBD_CtlError>
 8006ad4:	e075      	b.n	8006bc2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d002      	beq.n	8006ae6 <USBD_SetConfig+0x36>
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d023      	beq.n	8006b2c <USBD_SetConfig+0x7c>
 8006ae4:	e062      	b.n	8006bac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006ae6:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01a      	beq.n	8006b24 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006aee:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2203      	movs	r2, #3
 8006afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b00:	4b31      	ldr	r3, [pc, #196]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff f9e7 	bl	8005eda <USBD_SetClassConfig>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d104      	bne.n	8006b1c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f932 	bl	8006d7e <USBD_CtlError>
            return;
 8006b1a:	e052      	b.n	8006bc2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f9f6 	bl	8006f0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006b22:	e04e      	b.n	8006bc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f9f2 	bl	8006f0e <USBD_CtlSendStatus>
        break;
 8006b2a:	e04a      	b.n	8006bc2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006b2c:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d112      	bne.n	8006b5a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006b3c:	4b22      	ldr	r3, [pc, #136]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006b46:	4b20      	ldr	r3, [pc, #128]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff f9e3 	bl	8005f18 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f9db 	bl	8006f0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006b58:	e033      	b.n	8006bc2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d01d      	beq.n	8006ba4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff f9d1 	bl	8005f18 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff f9a7 	bl	8005eda <USBD_SetClassConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d104      	bne.n	8006b9c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8f2 	bl	8006d7e <USBD_CtlError>
            return;
 8006b9a:	e012      	b.n	8006bc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f9b6 	bl	8006f0e <USBD_CtlSendStatus>
        break;
 8006ba2:	e00e      	b.n	8006bc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f9b2 	bl	8006f0e <USBD_CtlSendStatus>
        break;
 8006baa:	e00a      	b.n	8006bc2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8e5 	bl	8006d7e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <USBD_SetConfig+0x118>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff f9ac 	bl	8005f18 <USBD_ClrClassConfig>
        break;
 8006bc0:	bf00      	nop
    }
  }
}
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	2000026c 	.word	0x2000026c

08006bcc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	88db      	ldrh	r3, [r3, #6]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d004      	beq.n	8006be8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f8cc 	bl	8006d7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006be6:	e022      	b.n	8006c2e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	dc02      	bgt.n	8006bf8 <USBD_GetConfig+0x2c>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dc03      	bgt.n	8006bfe <USBD_GetConfig+0x32>
 8006bf6:	e015      	b.n	8006c24 <USBD_GetConfig+0x58>
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d00b      	beq.n	8006c14 <USBD_GetConfig+0x48>
 8006bfc:	e012      	b.n	8006c24 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3308      	adds	r3, #8
 8006c08:	2201      	movs	r2, #1
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f920 	bl	8006e52 <USBD_CtlSendData>
        break;
 8006c12:	e00c      	b.n	8006c2e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f918 	bl	8006e52 <USBD_CtlSendData>
        break;
 8006c22:	e004      	b.n	8006c2e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f8a9 	bl	8006d7e <USBD_CtlError>
        break;
 8006c2c:	bf00      	nop
}
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c46:	3b01      	subs	r3, #1
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d81e      	bhi.n	8006c8a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	88db      	ldrh	r3, [r3, #6]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d004      	beq.n	8006c5e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f891 	bl	8006d7e <USBD_CtlError>
        break;
 8006c5c:	e01a      	b.n	8006c94 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f043 0202 	orr.w	r2, r3, #2
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	2202      	movs	r2, #2
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f8e5 	bl	8006e52 <USBD_CtlSendData>
      break;
 8006c88:	e004      	b.n	8006c94 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f876 	bl	8006d7e <USBD_CtlError>
      break;
 8006c92:	bf00      	nop
  }
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	885b      	ldrh	r3, [r3, #2]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d106      	bne.n	8006cbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f929 	bl	8006f0e <USBD_CtlSendStatus>
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d80b      	bhi.n	8006cf2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	885b      	ldrh	r3, [r3, #2]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d10c      	bne.n	8006cfc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f90f 	bl	8006f0e <USBD_CtlSendStatus>
      }
      break;
 8006cf0:	e004      	b.n	8006cfc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f842 	bl	8006d7e <USBD_CtlError>
      break;
 8006cfa:	e000      	b.n	8006cfe <USBD_ClrFeature+0x3a>
      break;
 8006cfc:	bf00      	nop
  }
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	785a      	ldrb	r2, [r3, #1]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	3302      	adds	r3, #2
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	3303      	adds	r3, #3
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	3305      	adds	r3, #5
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	3306      	adds	r3, #6
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	3307      	adds	r3, #7
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	80da      	strh	r2, [r3, #6]

}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fc6a 	bl	8007664 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006d90:	2100      	movs	r1, #0
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fc66 	bl	8007664 <USBD_LL_StallEP>
}
 8006d98:	bf00      	nop
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d032      	beq.n	8006e1c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f834 	bl	8006e24 <USBD_GetLen>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	75fa      	strb	r2, [r7, #23]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	75fa      	strb	r2, [r7, #23]
 8006de2:	461a      	mov	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4413      	add	r3, r2
 8006de8:	2203      	movs	r2, #3
 8006dea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006dec:	e012      	b.n	8006e14 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	60fa      	str	r2, [r7, #12]
 8006df4:	7dfa      	ldrb	r2, [r7, #23]
 8006df6:	1c51      	adds	r1, r2, #1
 8006df8:	75f9      	strb	r1, [r7, #23]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	440a      	add	r2, r1
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	75fa      	strb	r2, [r7, #23]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4413      	add	r3, r2
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e8      	bne.n	8006dee <USBD_GetString+0x4e>
    }
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006e30:	e005      	b.n	8006e3e <USBD_GetLen+0x1a>
  {
    len++;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	3301      	adds	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f5      	bne.n	8006e32 <USBD_GetLen+0xe>
  }

  return len;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fc7b 	bl	8007776 <USBD_LL_Transmit>

  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	4613      	mov	r3, r2
 8006e96:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fc69 	bl	8007776 <USBD_LL_Transmit>

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006ecc:	88fa      	ldrh	r2, [r7, #6]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	2100      	movs	r1, #0
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fc6e 	bl	80077bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	2100      	movs	r1, #0
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fc5c 	bl	80077bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2200      	movs	r2, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc26 	bl	8007776 <USBD_LL_Transmit>

  return USBD_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2205      	movs	r2, #5
 8006f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	2100      	movs	r1, #0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fc36 	bl	80077bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f60:	2200      	movs	r2, #0
 8006f62:	4912      	ldr	r1, [pc, #72]	; (8006fac <MX_USB_DEVICE_Init+0x50>)
 8006f64:	4812      	ldr	r0, [pc, #72]	; (8006fb0 <MX_USB_DEVICE_Init+0x54>)
 8006f66:	f7fe ff5e 	bl	8005e26 <USBD_Init>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f70:	f7f9 fa9c 	bl	80004ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f74:	490f      	ldr	r1, [pc, #60]	; (8006fb4 <MX_USB_DEVICE_Init+0x58>)
 8006f76:	480e      	ldr	r0, [pc, #56]	; (8006fb0 <MX_USB_DEVICE_Init+0x54>)
 8006f78:	f7fe ff80 	bl	8005e7c <USBD_RegisterClass>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f82:	f7f9 fa93 	bl	80004ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f86:	490c      	ldr	r1, [pc, #48]	; (8006fb8 <MX_USB_DEVICE_Init+0x5c>)
 8006f88:	4809      	ldr	r0, [pc, #36]	; (8006fb0 <MX_USB_DEVICE_Init+0x54>)
 8006f8a:	f7fe feb1 	bl	8005cf0 <USBD_CDC_RegisterInterface>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f94:	f7f9 fa8a 	bl	80004ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f98:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <MX_USB_DEVICE_Init+0x54>)
 8006f9a:	f7fe ff88 	bl	8005eae <USBD_Start>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006fa4:	f7f9 fa82 	bl	80004ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006fa8:	bf00      	nop
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	2000012c 	.word	0x2000012c
 8006fb0:	20000270 	.word	0x20000270
 8006fb4:	20000018 	.word	0x20000018
 8006fb8:	2000011c 	.word	0x2000011c

08006fbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4905      	ldr	r1, [pc, #20]	; (8006fd8 <CDC_Init_FS+0x1c>)
 8006fc4:	4805      	ldr	r0, [pc, #20]	; (8006fdc <CDC_Init_FS+0x20>)
 8006fc6:	f7fe fea9 	bl	8005d1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fca:	4905      	ldr	r1, [pc, #20]	; (8006fe0 <CDC_Init_FS+0x24>)
 8006fcc:	4803      	ldr	r0, [pc, #12]	; (8006fdc <CDC_Init_FS+0x20>)
 8006fce:	f7fe febe 	bl	8005d4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006fd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	2000091c 	.word	0x2000091c
 8006fdc:	20000270 	.word	0x20000270
 8006fe0:	20000534 	.word	0x20000534

08006fe4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr
	...

08006ff4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
 8007000:	4613      	mov	r3, r2
 8007002:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	2b23      	cmp	r3, #35	; 0x23
 8007008:	d84a      	bhi.n	80070a0 <CDC_Control_FS+0xac>
 800700a:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <CDC_Control_FS+0x1c>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	080070a1 	.word	0x080070a1
 8007014:	080070a1 	.word	0x080070a1
 8007018:	080070a1 	.word	0x080070a1
 800701c:	080070a1 	.word	0x080070a1
 8007020:	080070a1 	.word	0x080070a1
 8007024:	080070a1 	.word	0x080070a1
 8007028:	080070a1 	.word	0x080070a1
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070a1 	.word	0x080070a1
 8007034:	080070a1 	.word	0x080070a1
 8007038:	080070a1 	.word	0x080070a1
 800703c:	080070a1 	.word	0x080070a1
 8007040:	080070a1 	.word	0x080070a1
 8007044:	080070a1 	.word	0x080070a1
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070a1 	.word	0x080070a1
 8007054:	080070a1 	.word	0x080070a1
 8007058:	080070a1 	.word	0x080070a1
 800705c:	080070a1 	.word	0x080070a1
 8007060:	080070a1 	.word	0x080070a1
 8007064:	080070a1 	.word	0x080070a1
 8007068:	080070a1 	.word	0x080070a1
 800706c:	080070a1 	.word	0x080070a1
 8007070:	080070a1 	.word	0x080070a1
 8007074:	080070a1 	.word	0x080070a1
 8007078:	080070a1 	.word	0x080070a1
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a1 	.word	0x080070a1
 8007084:	080070a1 	.word	0x080070a1
 8007088:	080070a1 	.word	0x080070a1
 800708c:	080070a1 	.word	0x080070a1
 8007090:	080070a1 	.word	0x080070a1
 8007094:	080070a1 	.word	0x080070a1
 8007098:	080070a1 	.word	0x080070a1
 800709c:	080070a1 	.word	0x080070a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070a0:	bf00      	nop
  }

  return (USBD_OK);
 80070a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop

080070b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	480f      	ldr	r0, [pc, #60]	; (80070fc <CDC_Receive_FS+0x4c>)
 80070be:	f7fe fe46 	bl	8005d4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070c2:	480e      	ldr	r0, [pc, #56]	; (80070fc <CDC_Receive_FS+0x4c>)
 80070c4:	f7fe fe85 	bl	8005dd2 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	73fb      	strb	r3, [r7, #15]
  memset(receiveCDC, '\0', sizeof(receiveCDC));
 80070ce:	2264      	movs	r2, #100	; 0x64
 80070d0:	2100      	movs	r1, #0
 80070d2:	480b      	ldr	r0, [pc, #44]	; (8007100 <CDC_Receive_FS+0x50>)
 80070d4:	f000 fc3c 	bl	8007950 <memset>
  memcpy(receiveCDC, Buf, len);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	461a      	mov	r2, r3
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4808      	ldr	r0, [pc, #32]	; (8007100 <CDC_Receive_FS+0x50>)
 80070e0:	f000 fc28 	bl	8007934 <memcpy>
  memset(Buf, '\0', len);
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	461a      	mov	r2, r3
 80070e8:	2100      	movs	r1, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fc30 	bl	8007950 <memset>
  return (USBD_OK);
 80070f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000270 	.word	0x20000270
 8007100:	20000200 	.word	0x20000200

08007104 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <CDC_Transmit_FS+0x48>)
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007126:	2301      	movs	r3, #1
 8007128:	e00b      	b.n	8007142 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800712a:	887b      	ldrh	r3, [r7, #2]
 800712c:	461a      	mov	r2, r3
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4806      	ldr	r0, [pc, #24]	; (800714c <CDC_Transmit_FS+0x48>)
 8007132:	f7fe fdf3 	bl	8005d1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007136:	4805      	ldr	r0, [pc, #20]	; (800714c <CDC_Transmit_FS+0x48>)
 8007138:	f7fe fe1c 	bl	8005d74 <USBD_CDC_TransmitPacket>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000270 	.word	0x20000270

08007150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2212      	movs	r2, #18
 8007160:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007162:	4b03      	ldr	r3, [pc, #12]	; (8007170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000148 	.word	0x20000148

08007174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2204      	movs	r2, #4
 8007184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007186:	4b03      	ldr	r3, [pc, #12]	; (8007194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	2000015c 	.word	0x2000015c

08007198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4907      	ldr	r1, [pc, #28]	; (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
 80071ae:	4808      	ldr	r0, [pc, #32]	; (80071d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071b0:	f7ff fdf6 	bl	8006da0 <USBD_GetString>
 80071b4:	e004      	b.n	80071c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	4904      	ldr	r1, [pc, #16]	; (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
 80071ba:	4805      	ldr	r0, [pc, #20]	; (80071d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071bc:	f7ff fdf0 	bl	8006da0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000d04 	.word	0x20000d04
 80071d0:	08008c78 	.word	0x08008c78

080071d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	4904      	ldr	r1, [pc, #16]	; (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071e4:	4804      	ldr	r0, [pc, #16]	; (80071f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071e6:	f7ff fddb 	bl	8006da0 <USBD_GetString>
  return USBD_StrDesc;
 80071ea:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000d04 	.word	0x20000d04
 80071f8:	08008c8c 	.word	0x08008c8c

080071fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	221a      	movs	r2, #26
 800720c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800720e:	f000 f843 	bl	8007298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007212:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000160 	.word	0x20000160

08007220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4907      	ldr	r1, [pc, #28]	; (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007236:	4808      	ldr	r0, [pc, #32]	; (8007258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007238:	f7ff fdb2 	bl	8006da0 <USBD_GetString>
 800723c:	e004      	b.n	8007248 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007242:	4805      	ldr	r0, [pc, #20]	; (8007258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007244:	f7ff fdac 	bl	8006da0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000d04 	.word	0x20000d04
 8007258:	08008ca0 	.word	0x08008ca0

0800725c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4907      	ldr	r1, [pc, #28]	; (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007272:	4808      	ldr	r0, [pc, #32]	; (8007294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007274:	f7ff fd94 	bl	8006da0 <USBD_GetString>
 8007278:	e004      	b.n	8007284 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4904      	ldr	r1, [pc, #16]	; (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800727e:	4805      	ldr	r0, [pc, #20]	; (8007294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007280:	f7ff fd8e 	bl	8006da0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000d04 	.word	0x20000d04
 8007294:	08008cac 	.word	0x08008cac

08007298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <Get_SerialNum+0x44>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072a4:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <Get_SerialNum+0x48>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072aa:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <Get_SerialNum+0x4c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072be:	2208      	movs	r2, #8
 80072c0:	4909      	ldr	r1, [pc, #36]	; (80072e8 <Get_SerialNum+0x50>)
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f814 	bl	80072f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072c8:	2204      	movs	r2, #4
 80072ca:	4908      	ldr	r1, [pc, #32]	; (80072ec <Get_SerialNum+0x54>)
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f000 f80f 	bl	80072f0 <IntToUnicode>
  }
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	1ffff7e8 	.word	0x1ffff7e8
 80072e0:	1ffff7ec 	.word	0x1ffff7ec
 80072e4:	1ffff7f0 	.word	0x1ffff7f0
 80072e8:	20000162 	.word	0x20000162
 80072ec:	20000172 	.word	0x20000172

080072f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
 8007306:	e027      	b.n	8007358 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0f1b      	lsrs	r3, r3, #28
 800730c:	2b09      	cmp	r3, #9
 800730e:	d80b      	bhi.n	8007328 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	0f1b      	lsrs	r3, r3, #28
 8007314:	b2da      	uxtb	r2, r3
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4619      	mov	r1, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	440b      	add	r3, r1
 8007320:	3230      	adds	r2, #48	; 0x30
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e00a      	b.n	800733e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	b2da      	uxtb	r2, r3
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4619      	mov	r1, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	440b      	add	r3, r1
 8007338:	3237      	adds	r2, #55	; 0x37
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	3301      	adds	r3, #1
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	3301      	adds	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
 8007358:	7dfa      	ldrb	r2, [r7, #23]
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	429a      	cmp	r2, r3
 800735e:	d3d3      	bcc.n	8007308 <IntToUnicode+0x18>
  }
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr

0800736c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a0d      	ldr	r2, [pc, #52]	; (80073b0 <HAL_PCD_MspInit+0x44>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d113      	bne.n	80073a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800737e:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <HAL_PCD_MspInit+0x48>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <HAL_PCD_MspInit+0x48>)
 8007384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007388:	61d3      	str	r3, [r2, #28]
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <HAL_PCD_MspInit+0x48>)
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	2014      	movs	r0, #20
 800739c:	f7f9 fafd 	bl	800099a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80073a0:	2014      	movs	r0, #20
 80073a2:	f7f9 fb16 	bl	80009d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40005c00 	.word	0x40005c00
 80073b4:	40021000 	.word	0x40021000

080073b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f7fe fdb5 	bl	8005f3e <USBD_LL_SetupStage>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	440b      	add	r3, r1
 80073fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	4619      	mov	r1, r3
 8007406:	f7fe fde7 	bl	8005fd8 <USBD_LL_DataOutStage>
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	440b      	add	r3, r1
 8007432:	333c      	adds	r3, #60	; 0x3c
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	4619      	mov	r1, r3
 800743a:	f7fe fe3e 	bl	80060ba <USBD_LL_DataInStage>
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe ff4e 	bl	80062f6 <USBD_LL_SOF>
}
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d001      	beq.n	800747a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007476:	f7f9 f819 	bl	80004ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007480:	7bfa      	ldrb	r2, [r7, #15]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fefe 	bl	8006286 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe feb7 	bl	8006204 <USBD_LL_Reset>
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fef8 	bl	80062a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <HAL_PCD_SuspendCallback+0x30>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	4a03      	ldr	r2, [pc, #12]	; (80074d0 <HAL_PCD_SuspendCallback+0x30>)
 80074c2:	f043 0306 	orr.w	r3, r3, #6
 80074c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fef2 	bl	80062cc <USBD_LL_Resume>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80074f8:	4a28      	ldr	r2, [pc, #160]	; (800759c <USBD_LL_Init+0xac>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a26      	ldr	r2, [pc, #152]	; (800759c <USBD_LL_Init+0xac>)
 8007504:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007508:	4b24      	ldr	r3, [pc, #144]	; (800759c <USBD_LL_Init+0xac>)
 800750a:	4a25      	ldr	r2, [pc, #148]	; (80075a0 <USBD_LL_Init+0xb0>)
 800750c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800750e:	4b23      	ldr	r3, [pc, #140]	; (800759c <USBD_LL_Init+0xac>)
 8007510:	2208      	movs	r2, #8
 8007512:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007514:	4b21      	ldr	r3, [pc, #132]	; (800759c <USBD_LL_Init+0xac>)
 8007516:	2202      	movs	r2, #2
 8007518:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800751a:	4b20      	ldr	r3, [pc, #128]	; (800759c <USBD_LL_Init+0xac>)
 800751c:	2200      	movs	r2, #0
 800751e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007520:	4b1e      	ldr	r3, [pc, #120]	; (800759c <USBD_LL_Init+0xac>)
 8007522:	2200      	movs	r2, #0
 8007524:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007526:	4b1d      	ldr	r3, [pc, #116]	; (800759c <USBD_LL_Init+0xac>)
 8007528:	2200      	movs	r2, #0
 800752a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800752c:	481b      	ldr	r0, [pc, #108]	; (800759c <USBD_LL_Init+0xac>)
 800752e:	f7f9 fc07 	bl	8000d40 <HAL_PCD_Init>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007538:	f7f8 ffb8 	bl	80004ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007542:	2318      	movs	r3, #24
 8007544:	2200      	movs	r2, #0
 8007546:	2100      	movs	r1, #0
 8007548:	f7fb f926 	bl	8002798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007552:	2358      	movs	r3, #88	; 0x58
 8007554:	2200      	movs	r2, #0
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	f7fb f91e 	bl	8002798 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007562:	23c0      	movs	r3, #192	; 0xc0
 8007564:	2200      	movs	r2, #0
 8007566:	2181      	movs	r1, #129	; 0x81
 8007568:	f7fb f916 	bl	8002798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007572:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007576:	2200      	movs	r2, #0
 8007578:	2101      	movs	r1, #1
 800757a:	f7fb f90d 	bl	8002798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007588:	2200      	movs	r2, #0
 800758a:	2182      	movs	r1, #130	; 0x82
 800758c:	f7fb f904 	bl	8002798 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000f04 	.word	0x20000f04
 80075a0:	40005c00 	.word	0x40005c00

080075a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7f9 fcbf 	bl	8000f3e <HAL_PCD_Start>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f94e 	bl	8007868 <USBD_Get_USB_Status>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	4608      	mov	r0, r1
 80075e4:	4611      	mov	r1, r2
 80075e6:	461a      	mov	r2, r3
 80075e8:	4603      	mov	r3, r0
 80075ea:	70fb      	strb	r3, [r7, #3]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70bb      	strb	r3, [r7, #2]
 80075f0:	4613      	mov	r3, r2
 80075f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007602:	78bb      	ldrb	r3, [r7, #2]
 8007604:	883a      	ldrh	r2, [r7, #0]
 8007606:	78f9      	ldrb	r1, [r7, #3]
 8007608:	f7f9 fe14 	bl	8001234 <HAL_PCD_EP_Open>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f928 	bl	8007868 <USBD_Get_USB_Status>
 8007618:	4603      	mov	r3, r0
 800761a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800761c:	7bbb      	ldrb	r3, [r7, #14]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f7f9 fe52 	bl	80012ee <HAL_PCD_EP_Close>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f909 	bl	8007868 <USBD_Get_USB_Status>
 8007656:	4603      	mov	r3, r0
 8007658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800765a:	7bbb      	ldrb	r3, [r7, #14]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7f9 fefa 	bl	800147c <HAL_PCD_EP_SetStall>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f8ea 	bl	8007868 <USBD_Get_USB_Status>
 8007694:	4603      	mov	r3, r0
 8007696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007698:	7bbb      	ldrb	r3, [r7, #14]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	4611      	mov	r1, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7f9 ff3b 	bl	800153c <HAL_PCD_EP_ClrStall>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f8cb 	bl	8007868 <USBD_Get_USB_Status>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	da0c      	bge.n	8007716 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	440b      	add	r3, r1
 8007710:	3302      	adds	r3, #2
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	e00b      	b.n	800772e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800771c:	68f9      	ldr	r1, [r7, #12]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	440b      	add	r3, r1
 8007728:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800772c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7f9 fd47 	bl	80011ea <HAL_PCD_SetAddress>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f880 	bl	8007868 <USBD_Get_USB_Status>
 8007768:	4603      	mov	r3, r0
 800776a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800776c:	7bbb      	ldrb	r3, [r7, #14]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	461a      	mov	r2, r3
 8007782:	460b      	mov	r3, r1
 8007784:	72fb      	strb	r3, [r7, #11]
 8007786:	4613      	mov	r3, r2
 8007788:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	7af9      	ldrb	r1, [r7, #11]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	f7f9 fe36 	bl	800140e <HAL_PCD_EP_Transmit>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f85d 	bl	8007868 <USBD_Get_USB_Status>
 80077ae:	4603      	mov	r3, r0
 80077b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	461a      	mov	r2, r3
 80077c8:	460b      	mov	r3, r1
 80077ca:	72fb      	strb	r3, [r7, #11]
 80077cc:	4613      	mov	r3, r2
 80077ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077de:	893b      	ldrh	r3, [r7, #8]
 80077e0:	7af9      	ldrb	r1, [r7, #11]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	f7f9 fdcb 	bl	800137e <HAL_PCD_EP_Receive>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 f83a 	bl	8007868 <USBD_Get_USB_Status>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	4611      	mov	r1, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f7f9 fde1 	bl	80013e0 <HAL_PCD_EP_GetRxCount>
 800781e:	4603      	mov	r3, r0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007830:	4b02      	ldr	r3, [pc, #8]	; (800783c <USBD_static_malloc+0x14>)
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	200011f4 	.word	0x200011f4

08007840 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]

}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr

08007852 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	460b      	mov	r3, r1
 800785c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d817      	bhi.n	80078ac <USBD_Get_USB_Status+0x44>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBD_Get_USB_Status+0x1c>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007895 	.word	0x08007895
 8007888:	0800789b 	.word	0x0800789b
 800788c:	080078a1 	.word	0x080078a1
 8007890:	080078a7 	.word	0x080078a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
    break;
 8007898:	e00b      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800789a:	2302      	movs	r3, #2
 800789c:	73fb      	strb	r3, [r7, #15]
    break;
 800789e:	e008      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]
    break;
 80078a4:	e005      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078a6:	2302      	movs	r3, #2
 80078a8:	73fb      	strb	r3, [r7, #15]
    break;
 80078aa:	e002      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078ac:	2302      	movs	r3, #2
 80078ae:	73fb      	strb	r3, [r7, #15]
    break;
 80078b0:	bf00      	nop
  }
  return usb_status;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop

080078c0 <__errno>:
 80078c0:	4b01      	ldr	r3, [pc, #4]	; (80078c8 <__errno+0x8>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	2000017c 	.word	0x2000017c

080078cc <__libc_init_array>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	2600      	movs	r6, #0
 80078d0:	4d0c      	ldr	r5, [pc, #48]	; (8007904 <__libc_init_array+0x38>)
 80078d2:	4c0d      	ldr	r4, [pc, #52]	; (8007908 <__libc_init_array+0x3c>)
 80078d4:	1b64      	subs	r4, r4, r5
 80078d6:	10a4      	asrs	r4, r4, #2
 80078d8:	42a6      	cmp	r6, r4
 80078da:	d109      	bne.n	80078f0 <__libc_init_array+0x24>
 80078dc:	f001 f9aa 	bl	8008c34 <_init>
 80078e0:	2600      	movs	r6, #0
 80078e2:	4d0a      	ldr	r5, [pc, #40]	; (800790c <__libc_init_array+0x40>)
 80078e4:	4c0a      	ldr	r4, [pc, #40]	; (8007910 <__libc_init_array+0x44>)
 80078e6:	1b64      	subs	r4, r4, r5
 80078e8:	10a4      	asrs	r4, r4, #2
 80078ea:	42a6      	cmp	r6, r4
 80078ec:	d105      	bne.n	80078fa <__libc_init_array+0x2e>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f4:	4798      	blx	r3
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7ee      	b.n	80078d8 <__libc_init_array+0xc>
 80078fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fe:	4798      	blx	r3
 8007900:	3601      	adds	r6, #1
 8007902:	e7f2      	b.n	80078ea <__libc_init_array+0x1e>
 8007904:	08008d78 	.word	0x08008d78
 8007908:	08008d78 	.word	0x08008d78
 800790c:	08008d78 	.word	0x08008d78
 8007910:	08008d7c 	.word	0x08008d7c

08007914 <malloc>:
 8007914:	4b02      	ldr	r3, [pc, #8]	; (8007920 <malloc+0xc>)
 8007916:	4601      	mov	r1, r0
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	f000 b889 	b.w	8007a30 <_malloc_r>
 800791e:	bf00      	nop
 8007920:	2000017c 	.word	0x2000017c

08007924 <free>:
 8007924:	4b02      	ldr	r3, [pc, #8]	; (8007930 <free+0xc>)
 8007926:	4601      	mov	r1, r0
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	f000 b819 	b.w	8007960 <_free_r>
 800792e:	bf00      	nop
 8007930:	2000017c 	.word	0x2000017c

08007934 <memcpy>:
 8007934:	440a      	add	r2, r1
 8007936:	4291      	cmp	r1, r2
 8007938:	f100 33ff 	add.w	r3, r0, #4294967295
 800793c:	d100      	bne.n	8007940 <memcpy+0xc>
 800793e:	4770      	bx	lr
 8007940:	b510      	push	{r4, lr}
 8007942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007946:	4291      	cmp	r1, r2
 8007948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800794c:	d1f9      	bne.n	8007942 <memcpy+0xe>
 800794e:	bd10      	pop	{r4, pc}

08007950 <memset>:
 8007950:	4603      	mov	r3, r0
 8007952:	4402      	add	r2, r0
 8007954:	4293      	cmp	r3, r2
 8007956:	d100      	bne.n	800795a <memset+0xa>
 8007958:	4770      	bx	lr
 800795a:	f803 1b01 	strb.w	r1, [r3], #1
 800795e:	e7f9      	b.n	8007954 <memset+0x4>

08007960 <_free_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4605      	mov	r5, r0
 8007964:	2900      	cmp	r1, #0
 8007966:	d040      	beq.n	80079ea <_free_r+0x8a>
 8007968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796c:	1f0c      	subs	r4, r1, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfb8      	it	lt
 8007972:	18e4      	addlt	r4, r4, r3
 8007974:	f000 fa18 	bl	8007da8 <__malloc_lock>
 8007978:	4a1c      	ldr	r2, [pc, #112]	; (80079ec <_free_r+0x8c>)
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	b933      	cbnz	r3, 800798c <_free_r+0x2c>
 800797e:	6063      	str	r3, [r4, #4]
 8007980:	6014      	str	r4, [r2, #0]
 8007982:	4628      	mov	r0, r5
 8007984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007988:	f000 ba14 	b.w	8007db4 <__malloc_unlock>
 800798c:	42a3      	cmp	r3, r4
 800798e:	d908      	bls.n	80079a2 <_free_r+0x42>
 8007990:	6820      	ldr	r0, [r4, #0]
 8007992:	1821      	adds	r1, r4, r0
 8007994:	428b      	cmp	r3, r1
 8007996:	bf01      	itttt	eq
 8007998:	6819      	ldreq	r1, [r3, #0]
 800799a:	685b      	ldreq	r3, [r3, #4]
 800799c:	1809      	addeq	r1, r1, r0
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	e7ed      	b.n	800797e <_free_r+0x1e>
 80079a2:	461a      	mov	r2, r3
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	b10b      	cbz	r3, 80079ac <_free_r+0x4c>
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	d9fa      	bls.n	80079a2 <_free_r+0x42>
 80079ac:	6811      	ldr	r1, [r2, #0]
 80079ae:	1850      	adds	r0, r2, r1
 80079b0:	42a0      	cmp	r0, r4
 80079b2:	d10b      	bne.n	80079cc <_free_r+0x6c>
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	4401      	add	r1, r0
 80079b8:	1850      	adds	r0, r2, r1
 80079ba:	4283      	cmp	r3, r0
 80079bc:	6011      	str	r1, [r2, #0]
 80079be:	d1e0      	bne.n	8007982 <_free_r+0x22>
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	4401      	add	r1, r0
 80079c6:	6011      	str	r1, [r2, #0]
 80079c8:	6053      	str	r3, [r2, #4]
 80079ca:	e7da      	b.n	8007982 <_free_r+0x22>
 80079cc:	d902      	bls.n	80079d4 <_free_r+0x74>
 80079ce:	230c      	movs	r3, #12
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	e7d6      	b.n	8007982 <_free_r+0x22>
 80079d4:	6820      	ldr	r0, [r4, #0]
 80079d6:	1821      	adds	r1, r4, r0
 80079d8:	428b      	cmp	r3, r1
 80079da:	bf01      	itttt	eq
 80079dc:	6819      	ldreq	r1, [r3, #0]
 80079de:	685b      	ldreq	r3, [r3, #4]
 80079e0:	1809      	addeq	r1, r1, r0
 80079e2:	6021      	streq	r1, [r4, #0]
 80079e4:	6063      	str	r3, [r4, #4]
 80079e6:	6054      	str	r4, [r2, #4]
 80079e8:	e7cb      	b.n	8007982 <_free_r+0x22>
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	20001414 	.word	0x20001414

080079f0 <sbrk_aligned>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	4e0e      	ldr	r6, [pc, #56]	; (8007a2c <sbrk_aligned+0x3c>)
 80079f4:	460c      	mov	r4, r1
 80079f6:	6831      	ldr	r1, [r6, #0]
 80079f8:	4605      	mov	r5, r0
 80079fa:	b911      	cbnz	r1, 8007a02 <sbrk_aligned+0x12>
 80079fc:	f000 f8a4 	bl	8007b48 <_sbrk_r>
 8007a00:	6030      	str	r0, [r6, #0]
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f89f 	bl	8007b48 <_sbrk_r>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	d00a      	beq.n	8007a24 <sbrk_aligned+0x34>
 8007a0e:	1cc4      	adds	r4, r0, #3
 8007a10:	f024 0403 	bic.w	r4, r4, #3
 8007a14:	42a0      	cmp	r0, r4
 8007a16:	d007      	beq.n	8007a28 <sbrk_aligned+0x38>
 8007a18:	1a21      	subs	r1, r4, r0
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 f894 	bl	8007b48 <_sbrk_r>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d101      	bne.n	8007a28 <sbrk_aligned+0x38>
 8007a24:	f04f 34ff 	mov.w	r4, #4294967295
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	20001418 	.word	0x20001418

08007a30 <_malloc_r>:
 8007a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a34:	1ccd      	adds	r5, r1, #3
 8007a36:	f025 0503 	bic.w	r5, r5, #3
 8007a3a:	3508      	adds	r5, #8
 8007a3c:	2d0c      	cmp	r5, #12
 8007a3e:	bf38      	it	cc
 8007a40:	250c      	movcc	r5, #12
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	4607      	mov	r7, r0
 8007a46:	db01      	blt.n	8007a4c <_malloc_r+0x1c>
 8007a48:	42a9      	cmp	r1, r5
 8007a4a:	d905      	bls.n	8007a58 <_malloc_r+0x28>
 8007a4c:	230c      	movs	r3, #12
 8007a4e:	2600      	movs	r6, #0
 8007a50:	603b      	str	r3, [r7, #0]
 8007a52:	4630      	mov	r0, r6
 8007a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a58:	4e2e      	ldr	r6, [pc, #184]	; (8007b14 <_malloc_r+0xe4>)
 8007a5a:	f000 f9a5 	bl	8007da8 <__malloc_lock>
 8007a5e:	6833      	ldr	r3, [r6, #0]
 8007a60:	461c      	mov	r4, r3
 8007a62:	bb34      	cbnz	r4, 8007ab2 <_malloc_r+0x82>
 8007a64:	4629      	mov	r1, r5
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7ff ffc2 	bl	80079f0 <sbrk_aligned>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	4604      	mov	r4, r0
 8007a70:	d14d      	bne.n	8007b0e <_malloc_r+0xde>
 8007a72:	6834      	ldr	r4, [r6, #0]
 8007a74:	4626      	mov	r6, r4
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d140      	bne.n	8007afc <_malloc_r+0xcc>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4638      	mov	r0, r7
 8007a80:	eb04 0803 	add.w	r8, r4, r3
 8007a84:	f000 f860 	bl	8007b48 <_sbrk_r>
 8007a88:	4580      	cmp	r8, r0
 8007a8a:	d13a      	bne.n	8007b02 <_malloc_r+0xd2>
 8007a8c:	6821      	ldr	r1, [r4, #0]
 8007a8e:	3503      	adds	r5, #3
 8007a90:	1a6d      	subs	r5, r5, r1
 8007a92:	f025 0503 	bic.w	r5, r5, #3
 8007a96:	3508      	adds	r5, #8
 8007a98:	2d0c      	cmp	r5, #12
 8007a9a:	bf38      	it	cc
 8007a9c:	250c      	movcc	r5, #12
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	f7ff ffa5 	bl	80079f0 <sbrk_aligned>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d02b      	beq.n	8007b02 <_malloc_r+0xd2>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	442b      	add	r3, r5
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	e00e      	b.n	8007ad0 <_malloc_r+0xa0>
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	1b52      	subs	r2, r2, r5
 8007ab6:	d41e      	bmi.n	8007af6 <_malloc_r+0xc6>
 8007ab8:	2a0b      	cmp	r2, #11
 8007aba:	d916      	bls.n	8007aea <_malloc_r+0xba>
 8007abc:	1961      	adds	r1, r4, r5
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	6025      	str	r5, [r4, #0]
 8007ac2:	bf18      	it	ne
 8007ac4:	6059      	strne	r1, [r3, #4]
 8007ac6:	6863      	ldr	r3, [r4, #4]
 8007ac8:	bf08      	it	eq
 8007aca:	6031      	streq	r1, [r6, #0]
 8007acc:	5162      	str	r2, [r4, r5]
 8007ace:	604b      	str	r3, [r1, #4]
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	f104 060b 	add.w	r6, r4, #11
 8007ad6:	f000 f96d 	bl	8007db4 <__malloc_unlock>
 8007ada:	f026 0607 	bic.w	r6, r6, #7
 8007ade:	1d23      	adds	r3, r4, #4
 8007ae0:	1af2      	subs	r2, r6, r3
 8007ae2:	d0b6      	beq.n	8007a52 <_malloc_r+0x22>
 8007ae4:	1b9b      	subs	r3, r3, r6
 8007ae6:	50a3      	str	r3, [r4, r2]
 8007ae8:	e7b3      	b.n	8007a52 <_malloc_r+0x22>
 8007aea:	6862      	ldr	r2, [r4, #4]
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	bf0c      	ite	eq
 8007af0:	6032      	streq	r2, [r6, #0]
 8007af2:	605a      	strne	r2, [r3, #4]
 8007af4:	e7ec      	b.n	8007ad0 <_malloc_r+0xa0>
 8007af6:	4623      	mov	r3, r4
 8007af8:	6864      	ldr	r4, [r4, #4]
 8007afa:	e7b2      	b.n	8007a62 <_malloc_r+0x32>
 8007afc:	4634      	mov	r4, r6
 8007afe:	6876      	ldr	r6, [r6, #4]
 8007b00:	e7b9      	b.n	8007a76 <_malloc_r+0x46>
 8007b02:	230c      	movs	r3, #12
 8007b04:	4638      	mov	r0, r7
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	f000 f954 	bl	8007db4 <__malloc_unlock>
 8007b0c:	e7a1      	b.n	8007a52 <_malloc_r+0x22>
 8007b0e:	6025      	str	r5, [r4, #0]
 8007b10:	e7de      	b.n	8007ad0 <_malloc_r+0xa0>
 8007b12:	bf00      	nop
 8007b14:	20001414 	.word	0x20001414

08007b18 <iprintf>:
 8007b18:	b40f      	push	{r0, r1, r2, r3}
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <iprintf+0x2c>)
 8007b1c:	b513      	push	{r0, r1, r4, lr}
 8007b1e:	681c      	ldr	r4, [r3, #0]
 8007b20:	b124      	cbz	r4, 8007b2c <iprintf+0x14>
 8007b22:	69a3      	ldr	r3, [r4, #24]
 8007b24:	b913      	cbnz	r3, 8007b2c <iprintf+0x14>
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 f89e 	bl	8007c68 <__sinit>
 8007b2c:	ab05      	add	r3, sp, #20
 8007b2e:	4620      	mov	r0, r4
 8007b30:	9a04      	ldr	r2, [sp, #16]
 8007b32:	68a1      	ldr	r1, [r4, #8]
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	f000 fac7 	bl	80080c8 <_vfiprintf_r>
 8007b3a:	b002      	add	sp, #8
 8007b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b40:	b004      	add	sp, #16
 8007b42:	4770      	bx	lr
 8007b44:	2000017c 	.word	0x2000017c

08007b48 <_sbrk_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4d05      	ldr	r5, [pc, #20]	; (8007b64 <_sbrk_r+0x1c>)
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7f8 fd62 	bl	800061c <_sbrk>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_sbrk_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_sbrk_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	20001420 	.word	0x20001420

08007b68 <siprintf>:
 8007b68:	b40e      	push	{r1, r2, r3}
 8007b6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b6e:	b500      	push	{lr}
 8007b70:	b09c      	sub	sp, #112	; 0x70
 8007b72:	ab1d      	add	r3, sp, #116	; 0x74
 8007b74:	9002      	str	r0, [sp, #8]
 8007b76:	9006      	str	r0, [sp, #24]
 8007b78:	9107      	str	r1, [sp, #28]
 8007b7a:	9104      	str	r1, [sp, #16]
 8007b7c:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <siprintf+0x38>)
 8007b7e:	4909      	ldr	r1, [pc, #36]	; (8007ba4 <siprintf+0x3c>)
 8007b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b84:	9105      	str	r1, [sp, #20]
 8007b86:	6800      	ldr	r0, [r0, #0]
 8007b88:	a902      	add	r1, sp, #8
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	f000 f974 	bl	8007e78 <_svfiprintf_r>
 8007b90:	2200      	movs	r2, #0
 8007b92:	9b02      	ldr	r3, [sp, #8]
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	b01c      	add	sp, #112	; 0x70
 8007b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b9c:	b003      	add	sp, #12
 8007b9e:	4770      	bx	lr
 8007ba0:	2000017c 	.word	0x2000017c
 8007ba4:	ffff0208 	.word	0xffff0208

08007ba8 <strcpy>:
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bae:	f803 2b01 	strb.w	r2, [r3], #1
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	d1f9      	bne.n	8007baa <strcpy+0x2>
 8007bb6:	4770      	bx	lr

08007bb8 <std>:
 8007bb8:	2300      	movs	r3, #0
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bc6:	6083      	str	r3, [r0, #8]
 8007bc8:	8181      	strh	r1, [r0, #12]
 8007bca:	6643      	str	r3, [r0, #100]	; 0x64
 8007bcc:	81c2      	strh	r2, [r0, #14]
 8007bce:	6183      	str	r3, [r0, #24]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	305c      	adds	r0, #92	; 0x5c
 8007bd6:	f7ff febb 	bl	8007950 <memset>
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <std+0x38>)
 8007bdc:	6224      	str	r4, [r4, #32]
 8007bde:	6263      	str	r3, [r4, #36]	; 0x24
 8007be0:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <std+0x3c>)
 8007be2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <std+0x40>)
 8007be6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <std+0x44>)
 8007bea:	6323      	str	r3, [r4, #48]	; 0x30
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop
 8007bf0:	08008655 	.word	0x08008655
 8007bf4:	08008677 	.word	0x08008677
 8007bf8:	080086af 	.word	0x080086af
 8007bfc:	080086d3 	.word	0x080086d3

08007c00 <_cleanup_r>:
 8007c00:	4901      	ldr	r1, [pc, #4]	; (8007c08 <_cleanup_r+0x8>)
 8007c02:	f000 b8af 	b.w	8007d64 <_fwalk_reent>
 8007c06:	bf00      	nop
 8007c08:	080089a5 	.word	0x080089a5

08007c0c <__sfmoreglue>:
 8007c0c:	2268      	movs	r2, #104	; 0x68
 8007c0e:	b570      	push	{r4, r5, r6, lr}
 8007c10:	1e4d      	subs	r5, r1, #1
 8007c12:	4355      	muls	r5, r2
 8007c14:	460e      	mov	r6, r1
 8007c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c1a:	f7ff ff09 	bl	8007a30 <_malloc_r>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	b140      	cbz	r0, 8007c34 <__sfmoreglue+0x28>
 8007c22:	2100      	movs	r1, #0
 8007c24:	e9c0 1600 	strd	r1, r6, [r0]
 8007c28:	300c      	adds	r0, #12
 8007c2a:	60a0      	str	r0, [r4, #8]
 8007c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c30:	f7ff fe8e 	bl	8007950 <memset>
 8007c34:	4620      	mov	r0, r4
 8007c36:	bd70      	pop	{r4, r5, r6, pc}

08007c38 <__sfp_lock_acquire>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__sfp_lock_acquire+0x8>)
 8007c3a:	f000 b8b3 	b.w	8007da4 <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	2000141d 	.word	0x2000141d

08007c44 <__sfp_lock_release>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__sfp_lock_release+0x8>)
 8007c46:	f000 b8ae 	b.w	8007da6 <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	2000141d 	.word	0x2000141d

08007c50 <__sinit_lock_acquire>:
 8007c50:	4801      	ldr	r0, [pc, #4]	; (8007c58 <__sinit_lock_acquire+0x8>)
 8007c52:	f000 b8a7 	b.w	8007da4 <__retarget_lock_acquire_recursive>
 8007c56:	bf00      	nop
 8007c58:	2000141e 	.word	0x2000141e

08007c5c <__sinit_lock_release>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <__sinit_lock_release+0x8>)
 8007c5e:	f000 b8a2 	b.w	8007da6 <__retarget_lock_release_recursive>
 8007c62:	bf00      	nop
 8007c64:	2000141e 	.word	0x2000141e

08007c68 <__sinit>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	f7ff fff0 	bl	8007c50 <__sinit_lock_acquire>
 8007c70:	69a3      	ldr	r3, [r4, #24]
 8007c72:	b11b      	cbz	r3, 8007c7c <__sinit+0x14>
 8007c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c78:	f7ff bff0 	b.w	8007c5c <__sinit_lock_release>
 8007c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c80:	6523      	str	r3, [r4, #80]	; 0x50
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <__sinit+0x68>)
 8007c84:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <__sinit+0x6c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c8a:	42a3      	cmp	r3, r4
 8007c8c:	bf08      	it	eq
 8007c8e:	2301      	moveq	r3, #1
 8007c90:	4620      	mov	r0, r4
 8007c92:	bf08      	it	eq
 8007c94:	61a3      	streq	r3, [r4, #24]
 8007c96:	f000 f81f 	bl	8007cd8 <__sfp>
 8007c9a:	6060      	str	r0, [r4, #4]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 f81b 	bl	8007cd8 <__sfp>
 8007ca2:	60a0      	str	r0, [r4, #8]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 f817 	bl	8007cd8 <__sfp>
 8007caa:	2200      	movs	r2, #0
 8007cac:	2104      	movs	r1, #4
 8007cae:	60e0      	str	r0, [r4, #12]
 8007cb0:	6860      	ldr	r0, [r4, #4]
 8007cb2:	f7ff ff81 	bl	8007bb8 <std>
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	2109      	movs	r1, #9
 8007cba:	68a0      	ldr	r0, [r4, #8]
 8007cbc:	f7ff ff7c 	bl	8007bb8 <std>
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	2112      	movs	r1, #18
 8007cc4:	68e0      	ldr	r0, [r4, #12]
 8007cc6:	f7ff ff77 	bl	8007bb8 <std>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61a3      	str	r3, [r4, #24]
 8007cce:	e7d1      	b.n	8007c74 <__sinit+0xc>
 8007cd0:	08008ce0 	.word	0x08008ce0
 8007cd4:	08007c01 	.word	0x08007c01

08007cd8 <__sfp>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	4607      	mov	r7, r0
 8007cdc:	f7ff ffac 	bl	8007c38 <__sfp_lock_acquire>
 8007ce0:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <__sfp+0x84>)
 8007ce2:	681e      	ldr	r6, [r3, #0]
 8007ce4:	69b3      	ldr	r3, [r6, #24]
 8007ce6:	b913      	cbnz	r3, 8007cee <__sfp+0x16>
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7ff ffbd 	bl	8007c68 <__sinit>
 8007cee:	3648      	adds	r6, #72	; 0x48
 8007cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	d503      	bpl.n	8007d00 <__sfp+0x28>
 8007cf8:	6833      	ldr	r3, [r6, #0]
 8007cfa:	b30b      	cbz	r3, 8007d40 <__sfp+0x68>
 8007cfc:	6836      	ldr	r6, [r6, #0]
 8007cfe:	e7f7      	b.n	8007cf0 <__sfp+0x18>
 8007d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d04:	b9d5      	cbnz	r5, 8007d3c <__sfp+0x64>
 8007d06:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <__sfp+0x88>)
 8007d08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d0c:	60e3      	str	r3, [r4, #12]
 8007d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d10:	f000 f847 	bl	8007da2 <__retarget_lock_init_recursive>
 8007d14:	f7ff ff96 	bl	8007c44 <__sfp_lock_release>
 8007d18:	2208      	movs	r2, #8
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	61a5      	str	r5, [r4, #24]
 8007d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d2c:	f7ff fe10 	bl	8007950 <memset>
 8007d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d38:	4620      	mov	r0, r4
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	3468      	adds	r4, #104	; 0x68
 8007d3e:	e7d9      	b.n	8007cf4 <__sfp+0x1c>
 8007d40:	2104      	movs	r1, #4
 8007d42:	4638      	mov	r0, r7
 8007d44:	f7ff ff62 	bl	8007c0c <__sfmoreglue>
 8007d48:	4604      	mov	r4, r0
 8007d4a:	6030      	str	r0, [r6, #0]
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d1d5      	bne.n	8007cfc <__sfp+0x24>
 8007d50:	f7ff ff78 	bl	8007c44 <__sfp_lock_release>
 8007d54:	230c      	movs	r3, #12
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	e7ee      	b.n	8007d38 <__sfp+0x60>
 8007d5a:	bf00      	nop
 8007d5c:	08008ce0 	.word	0x08008ce0
 8007d60:	ffff0001 	.word	0xffff0001

08007d64 <_fwalk_reent>:
 8007d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d68:	4606      	mov	r6, r0
 8007d6a:	4688      	mov	r8, r1
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d76:	f1b9 0901 	subs.w	r9, r9, #1
 8007d7a:	d505      	bpl.n	8007d88 <_fwalk_reent+0x24>
 8007d7c:	6824      	ldr	r4, [r4, #0]
 8007d7e:	2c00      	cmp	r4, #0
 8007d80:	d1f7      	bne.n	8007d72 <_fwalk_reent+0xe>
 8007d82:	4638      	mov	r0, r7
 8007d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d88:	89ab      	ldrh	r3, [r5, #12]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d907      	bls.n	8007d9e <_fwalk_reent+0x3a>
 8007d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d92:	3301      	adds	r3, #1
 8007d94:	d003      	beq.n	8007d9e <_fwalk_reent+0x3a>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4630      	mov	r0, r6
 8007d9a:	47c0      	blx	r8
 8007d9c:	4307      	orrs	r7, r0
 8007d9e:	3568      	adds	r5, #104	; 0x68
 8007da0:	e7e9      	b.n	8007d76 <_fwalk_reent+0x12>

08007da2 <__retarget_lock_init_recursive>:
 8007da2:	4770      	bx	lr

08007da4 <__retarget_lock_acquire_recursive>:
 8007da4:	4770      	bx	lr

08007da6 <__retarget_lock_release_recursive>:
 8007da6:	4770      	bx	lr

08007da8 <__malloc_lock>:
 8007da8:	4801      	ldr	r0, [pc, #4]	; (8007db0 <__malloc_lock+0x8>)
 8007daa:	f7ff bffb 	b.w	8007da4 <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	2000141c 	.word	0x2000141c

08007db4 <__malloc_unlock>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__malloc_unlock+0x8>)
 8007db6:	f7ff bff6 	b.w	8007da6 <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	2000141c 	.word	0x2000141c

08007dc0 <__ssputs_r>:
 8007dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc4:	688e      	ldr	r6, [r1, #8]
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	429e      	cmp	r6, r3
 8007dca:	460c      	mov	r4, r1
 8007dcc:	4690      	mov	r8, r2
 8007dce:	461f      	mov	r7, r3
 8007dd0:	d838      	bhi.n	8007e44 <__ssputs_r+0x84>
 8007dd2:	898a      	ldrh	r2, [r1, #12]
 8007dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dd8:	d032      	beq.n	8007e40 <__ssputs_r+0x80>
 8007dda:	6825      	ldr	r5, [r4, #0]
 8007ddc:	6909      	ldr	r1, [r1, #16]
 8007dde:	3301      	adds	r3, #1
 8007de0:	eba5 0901 	sub.w	r9, r5, r1
 8007de4:	6965      	ldr	r5, [r4, #20]
 8007de6:	444b      	add	r3, r9
 8007de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007df0:	106d      	asrs	r5, r5, #1
 8007df2:	429d      	cmp	r5, r3
 8007df4:	bf38      	it	cc
 8007df6:	461d      	movcc	r5, r3
 8007df8:	0553      	lsls	r3, r2, #21
 8007dfa:	d531      	bpl.n	8007e60 <__ssputs_r+0xa0>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7ff fe17 	bl	8007a30 <_malloc_r>
 8007e02:	4606      	mov	r6, r0
 8007e04:	b950      	cbnz	r0, 8007e1c <__ssputs_r+0x5c>
 8007e06:	230c      	movs	r3, #12
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0c:	f8ca 3000 	str.w	r3, [sl]
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1c:	464a      	mov	r2, r9
 8007e1e:	6921      	ldr	r1, [r4, #16]
 8007e20:	f7ff fd88 	bl	8007934 <memcpy>
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	81a3      	strh	r3, [r4, #12]
 8007e30:	6126      	str	r6, [r4, #16]
 8007e32:	444e      	add	r6, r9
 8007e34:	6026      	str	r6, [r4, #0]
 8007e36:	463e      	mov	r6, r7
 8007e38:	6165      	str	r5, [r4, #20]
 8007e3a:	eba5 0509 	sub.w	r5, r5, r9
 8007e3e:	60a5      	str	r5, [r4, #8]
 8007e40:	42be      	cmp	r6, r7
 8007e42:	d900      	bls.n	8007e46 <__ssputs_r+0x86>
 8007e44:	463e      	mov	r6, r7
 8007e46:	4632      	mov	r2, r6
 8007e48:	4641      	mov	r1, r8
 8007e4a:	6820      	ldr	r0, [r4, #0]
 8007e4c:	f000 fe6c 	bl	8008b28 <memmove>
 8007e50:	68a3      	ldr	r3, [r4, #8]
 8007e52:	2000      	movs	r0, #0
 8007e54:	1b9b      	subs	r3, r3, r6
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	4433      	add	r3, r6
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	e7db      	b.n	8007e18 <__ssputs_r+0x58>
 8007e60:	462a      	mov	r2, r5
 8007e62:	f000 fe7b 	bl	8008b5c <_realloc_r>
 8007e66:	4606      	mov	r6, r0
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1e1      	bne.n	8007e30 <__ssputs_r+0x70>
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	6921      	ldr	r1, [r4, #16]
 8007e70:	f7ff fd76 	bl	8007960 <_free_r>
 8007e74:	e7c7      	b.n	8007e06 <__ssputs_r+0x46>
	...

08007e78 <_svfiprintf_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	4698      	mov	r8, r3
 8007e7e:	898b      	ldrh	r3, [r1, #12]
 8007e80:	4607      	mov	r7, r0
 8007e82:	061b      	lsls	r3, r3, #24
 8007e84:	460d      	mov	r5, r1
 8007e86:	4614      	mov	r4, r2
 8007e88:	b09d      	sub	sp, #116	; 0x74
 8007e8a:	d50e      	bpl.n	8007eaa <_svfiprintf_r+0x32>
 8007e8c:	690b      	ldr	r3, [r1, #16]
 8007e8e:	b963      	cbnz	r3, 8007eaa <_svfiprintf_r+0x32>
 8007e90:	2140      	movs	r1, #64	; 0x40
 8007e92:	f7ff fdcd 	bl	8007a30 <_malloc_r>
 8007e96:	6028      	str	r0, [r5, #0]
 8007e98:	6128      	str	r0, [r5, #16]
 8007e9a:	b920      	cbnz	r0, 8007ea6 <_svfiprintf_r+0x2e>
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	e0d1      	b.n	800804a <_svfiprintf_r+0x1d2>
 8007ea6:	2340      	movs	r3, #64	; 0x40
 8007ea8:	616b      	str	r3, [r5, #20]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9309      	str	r3, [sp, #36]	; 0x24
 8007eae:	2320      	movs	r3, #32
 8007eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eb4:	2330      	movs	r3, #48	; 0x30
 8007eb6:	f04f 0901 	mov.w	r9, #1
 8007eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008064 <_svfiprintf_r+0x1ec>
 8007ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec6:	4623      	mov	r3, r4
 8007ec8:	469a      	mov	sl, r3
 8007eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ece:	b10a      	cbz	r2, 8007ed4 <_svfiprintf_r+0x5c>
 8007ed0:	2a25      	cmp	r2, #37	; 0x25
 8007ed2:	d1f9      	bne.n	8007ec8 <_svfiprintf_r+0x50>
 8007ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ed8:	d00b      	beq.n	8007ef2 <_svfiprintf_r+0x7a>
 8007eda:	465b      	mov	r3, fp
 8007edc:	4622      	mov	r2, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ff6d 	bl	8007dc0 <__ssputs_r>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f000 80aa 	beq.w	8008040 <_svfiprintf_r+0x1c8>
 8007eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eee:	445a      	add	r2, fp
 8007ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80a2 	beq.w	8008040 <_svfiprintf_r+0x1c8>
 8007efc:	2300      	movs	r3, #0
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f06:	f10a 0a01 	add.w	sl, sl, #1
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	9307      	str	r3, [sp, #28]
 8007f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f12:	931a      	str	r3, [sp, #104]	; 0x68
 8007f14:	4654      	mov	r4, sl
 8007f16:	2205      	movs	r2, #5
 8007f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1c:	4851      	ldr	r0, [pc, #324]	; (8008064 <_svfiprintf_r+0x1ec>)
 8007f1e:	f000 fdf5 	bl	8008b0c <memchr>
 8007f22:	9a04      	ldr	r2, [sp, #16]
 8007f24:	b9d8      	cbnz	r0, 8007f5e <_svfiprintf_r+0xe6>
 8007f26:	06d0      	lsls	r0, r2, #27
 8007f28:	bf44      	itt	mi
 8007f2a:	2320      	movmi	r3, #32
 8007f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f30:	0711      	lsls	r1, r2, #28
 8007f32:	bf44      	itt	mi
 8007f34:	232b      	movmi	r3, #43	; 0x2b
 8007f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f40:	d015      	beq.n	8007f6e <_svfiprintf_r+0xf6>
 8007f42:	4654      	mov	r4, sl
 8007f44:	2000      	movs	r0, #0
 8007f46:	f04f 0c0a 	mov.w	ip, #10
 8007f4a:	9a07      	ldr	r2, [sp, #28]
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f52:	3b30      	subs	r3, #48	; 0x30
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	d94e      	bls.n	8007ff6 <_svfiprintf_r+0x17e>
 8007f58:	b1b0      	cbz	r0, 8007f88 <_svfiprintf_r+0x110>
 8007f5a:	9207      	str	r2, [sp, #28]
 8007f5c:	e014      	b.n	8007f88 <_svfiprintf_r+0x110>
 8007f5e:	eba0 0308 	sub.w	r3, r0, r8
 8007f62:	fa09 f303 	lsl.w	r3, r9, r3
 8007f66:	4313      	orrs	r3, r2
 8007f68:	46a2      	mov	sl, r4
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	e7d2      	b.n	8007f14 <_svfiprintf_r+0x9c>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	1d19      	adds	r1, r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	9103      	str	r1, [sp, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfbb      	ittet	lt
 8007f7a:	425b      	neglt	r3, r3
 8007f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f80:	9307      	strge	r3, [sp, #28]
 8007f82:	9307      	strlt	r3, [sp, #28]
 8007f84:	bfb8      	it	lt
 8007f86:	9204      	strlt	r2, [sp, #16]
 8007f88:	7823      	ldrb	r3, [r4, #0]
 8007f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f8c:	d10c      	bne.n	8007fa8 <_svfiprintf_r+0x130>
 8007f8e:	7863      	ldrb	r3, [r4, #1]
 8007f90:	2b2a      	cmp	r3, #42	; 0x2a
 8007f92:	d135      	bne.n	8008000 <_svfiprintf_r+0x188>
 8007f94:	9b03      	ldr	r3, [sp, #12]
 8007f96:	3402      	adds	r4, #2
 8007f98:	1d1a      	adds	r2, r3, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	9203      	str	r2, [sp, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bfb8      	it	lt
 8007fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008068 <_svfiprintf_r+0x1f0>
 8007fac:	2203      	movs	r2, #3
 8007fae:	4650      	mov	r0, sl
 8007fb0:	7821      	ldrb	r1, [r4, #0]
 8007fb2:	f000 fdab 	bl	8008b0c <memchr>
 8007fb6:	b140      	cbz	r0, 8007fca <_svfiprintf_r+0x152>
 8007fb8:	2340      	movs	r3, #64	; 0x40
 8007fba:	eba0 000a 	sub.w	r0, r0, sl
 8007fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8007fc2:	9b04      	ldr	r3, [sp, #16]
 8007fc4:	3401      	adds	r4, #1
 8007fc6:	4303      	orrs	r3, r0
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fce:	2206      	movs	r2, #6
 8007fd0:	4826      	ldr	r0, [pc, #152]	; (800806c <_svfiprintf_r+0x1f4>)
 8007fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fd6:	f000 fd99 	bl	8008b0c <memchr>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d038      	beq.n	8008050 <_svfiprintf_r+0x1d8>
 8007fde:	4b24      	ldr	r3, [pc, #144]	; (8008070 <_svfiprintf_r+0x1f8>)
 8007fe0:	bb1b      	cbnz	r3, 800802a <_svfiprintf_r+0x1b2>
 8007fe2:	9b03      	ldr	r3, [sp, #12]
 8007fe4:	3307      	adds	r3, #7
 8007fe6:	f023 0307 	bic.w	r3, r3, #7
 8007fea:	3308      	adds	r3, #8
 8007fec:	9303      	str	r3, [sp, #12]
 8007fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff0:	4433      	add	r3, r6
 8007ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff4:	e767      	b.n	8007ec6 <_svfiprintf_r+0x4e>
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ffe:	e7a5      	b.n	8007f4c <_svfiprintf_r+0xd4>
 8008000:	2300      	movs	r3, #0
 8008002:	f04f 0c0a 	mov.w	ip, #10
 8008006:	4619      	mov	r1, r3
 8008008:	3401      	adds	r4, #1
 800800a:	9305      	str	r3, [sp, #20]
 800800c:	4620      	mov	r0, r4
 800800e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008012:	3a30      	subs	r2, #48	; 0x30
 8008014:	2a09      	cmp	r2, #9
 8008016:	d903      	bls.n	8008020 <_svfiprintf_r+0x1a8>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0c5      	beq.n	8007fa8 <_svfiprintf_r+0x130>
 800801c:	9105      	str	r1, [sp, #20]
 800801e:	e7c3      	b.n	8007fa8 <_svfiprintf_r+0x130>
 8008020:	4604      	mov	r4, r0
 8008022:	2301      	movs	r3, #1
 8008024:	fb0c 2101 	mla	r1, ip, r1, r2
 8008028:	e7f0      	b.n	800800c <_svfiprintf_r+0x194>
 800802a:	ab03      	add	r3, sp, #12
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	462a      	mov	r2, r5
 8008030:	4638      	mov	r0, r7
 8008032:	4b10      	ldr	r3, [pc, #64]	; (8008074 <_svfiprintf_r+0x1fc>)
 8008034:	a904      	add	r1, sp, #16
 8008036:	f3af 8000 	nop.w
 800803a:	1c42      	adds	r2, r0, #1
 800803c:	4606      	mov	r6, r0
 800803e:	d1d6      	bne.n	8007fee <_svfiprintf_r+0x176>
 8008040:	89ab      	ldrh	r3, [r5, #12]
 8008042:	065b      	lsls	r3, r3, #25
 8008044:	f53f af2c 	bmi.w	8007ea0 <_svfiprintf_r+0x28>
 8008048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804a:	b01d      	add	sp, #116	; 0x74
 800804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	ab03      	add	r3, sp, #12
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	462a      	mov	r2, r5
 8008056:	4638      	mov	r0, r7
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <_svfiprintf_r+0x1fc>)
 800805a:	a904      	add	r1, sp, #16
 800805c:	f000 f9d4 	bl	8008408 <_printf_i>
 8008060:	e7eb      	b.n	800803a <_svfiprintf_r+0x1c2>
 8008062:	bf00      	nop
 8008064:	08008d44 	.word	0x08008d44
 8008068:	08008d4a 	.word	0x08008d4a
 800806c:	08008d4e 	.word	0x08008d4e
 8008070:	00000000 	.word	0x00000000
 8008074:	08007dc1 	.word	0x08007dc1

08008078 <__sfputc_r>:
 8008078:	6893      	ldr	r3, [r2, #8]
 800807a:	b410      	push	{r4}
 800807c:	3b01      	subs	r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	6093      	str	r3, [r2, #8]
 8008082:	da07      	bge.n	8008094 <__sfputc_r+0x1c>
 8008084:	6994      	ldr	r4, [r2, #24]
 8008086:	42a3      	cmp	r3, r4
 8008088:	db01      	blt.n	800808e <__sfputc_r+0x16>
 800808a:	290a      	cmp	r1, #10
 800808c:	d102      	bne.n	8008094 <__sfputc_r+0x1c>
 800808e:	bc10      	pop	{r4}
 8008090:	f000 bb24 	b.w	80086dc <__swbuf_r>
 8008094:	6813      	ldr	r3, [r2, #0]
 8008096:	1c58      	adds	r0, r3, #1
 8008098:	6010      	str	r0, [r2, #0]
 800809a:	7019      	strb	r1, [r3, #0]
 800809c:	4608      	mov	r0, r1
 800809e:	bc10      	pop	{r4}
 80080a0:	4770      	bx	lr

080080a2 <__sfputs_r>:
 80080a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a4:	4606      	mov	r6, r0
 80080a6:	460f      	mov	r7, r1
 80080a8:	4614      	mov	r4, r2
 80080aa:	18d5      	adds	r5, r2, r3
 80080ac:	42ac      	cmp	r4, r5
 80080ae:	d101      	bne.n	80080b4 <__sfputs_r+0x12>
 80080b0:	2000      	movs	r0, #0
 80080b2:	e007      	b.n	80080c4 <__sfputs_r+0x22>
 80080b4:	463a      	mov	r2, r7
 80080b6:	4630      	mov	r0, r6
 80080b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080bc:	f7ff ffdc 	bl	8008078 <__sfputc_r>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d1f3      	bne.n	80080ac <__sfputs_r+0xa>
 80080c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080c8 <_vfiprintf_r>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	460d      	mov	r5, r1
 80080ce:	4614      	mov	r4, r2
 80080d0:	4698      	mov	r8, r3
 80080d2:	4606      	mov	r6, r0
 80080d4:	b09d      	sub	sp, #116	; 0x74
 80080d6:	b118      	cbz	r0, 80080e0 <_vfiprintf_r+0x18>
 80080d8:	6983      	ldr	r3, [r0, #24]
 80080da:	b90b      	cbnz	r3, 80080e0 <_vfiprintf_r+0x18>
 80080dc:	f7ff fdc4 	bl	8007c68 <__sinit>
 80080e0:	4b89      	ldr	r3, [pc, #548]	; (8008308 <_vfiprintf_r+0x240>)
 80080e2:	429d      	cmp	r5, r3
 80080e4:	d11b      	bne.n	800811e <_vfiprintf_r+0x56>
 80080e6:	6875      	ldr	r5, [r6, #4]
 80080e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ea:	07d9      	lsls	r1, r3, #31
 80080ec:	d405      	bmi.n	80080fa <_vfiprintf_r+0x32>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_vfiprintf_r+0x32>
 80080f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f6:	f7ff fe55 	bl	8007da4 <__retarget_lock_acquire_recursive>
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	071b      	lsls	r3, r3, #28
 80080fe:	d501      	bpl.n	8008104 <_vfiprintf_r+0x3c>
 8008100:	692b      	ldr	r3, [r5, #16]
 8008102:	b9eb      	cbnz	r3, 8008140 <_vfiprintf_r+0x78>
 8008104:	4629      	mov	r1, r5
 8008106:	4630      	mov	r0, r6
 8008108:	f000 fb4c 	bl	80087a4 <__swsetup_r>
 800810c:	b1c0      	cbz	r0, 8008140 <_vfiprintf_r+0x78>
 800810e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008110:	07dc      	lsls	r4, r3, #31
 8008112:	d50e      	bpl.n	8008132 <_vfiprintf_r+0x6a>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	b01d      	add	sp, #116	; 0x74
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	4b7b      	ldr	r3, [pc, #492]	; (800830c <_vfiprintf_r+0x244>)
 8008120:	429d      	cmp	r5, r3
 8008122:	d101      	bne.n	8008128 <_vfiprintf_r+0x60>
 8008124:	68b5      	ldr	r5, [r6, #8]
 8008126:	e7df      	b.n	80080e8 <_vfiprintf_r+0x20>
 8008128:	4b79      	ldr	r3, [pc, #484]	; (8008310 <_vfiprintf_r+0x248>)
 800812a:	429d      	cmp	r5, r3
 800812c:	bf08      	it	eq
 800812e:	68f5      	ldreq	r5, [r6, #12]
 8008130:	e7da      	b.n	80080e8 <_vfiprintf_r+0x20>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	0598      	lsls	r0, r3, #22
 8008136:	d4ed      	bmi.n	8008114 <_vfiprintf_r+0x4c>
 8008138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800813a:	f7ff fe34 	bl	8007da6 <__retarget_lock_release_recursive>
 800813e:	e7e9      	b.n	8008114 <_vfiprintf_r+0x4c>
 8008140:	2300      	movs	r3, #0
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	2320      	movs	r3, #32
 8008146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800814a:	2330      	movs	r3, #48	; 0x30
 800814c:	f04f 0901 	mov.w	r9, #1
 8008150:	f8cd 800c 	str.w	r8, [sp, #12]
 8008154:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008314 <_vfiprintf_r+0x24c>
 8008158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800815c:	4623      	mov	r3, r4
 800815e:	469a      	mov	sl, r3
 8008160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008164:	b10a      	cbz	r2, 800816a <_vfiprintf_r+0xa2>
 8008166:	2a25      	cmp	r2, #37	; 0x25
 8008168:	d1f9      	bne.n	800815e <_vfiprintf_r+0x96>
 800816a:	ebba 0b04 	subs.w	fp, sl, r4
 800816e:	d00b      	beq.n	8008188 <_vfiprintf_r+0xc0>
 8008170:	465b      	mov	r3, fp
 8008172:	4622      	mov	r2, r4
 8008174:	4629      	mov	r1, r5
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff ff93 	bl	80080a2 <__sfputs_r>
 800817c:	3001      	adds	r0, #1
 800817e:	f000 80aa 	beq.w	80082d6 <_vfiprintf_r+0x20e>
 8008182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008184:	445a      	add	r2, fp
 8008186:	9209      	str	r2, [sp, #36]	; 0x24
 8008188:	f89a 3000 	ldrb.w	r3, [sl]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80a2 	beq.w	80082d6 <_vfiprintf_r+0x20e>
 8008192:	2300      	movs	r3, #0
 8008194:	f04f 32ff 	mov.w	r2, #4294967295
 8008198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800819c:	f10a 0a01 	add.w	sl, sl, #1
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	9307      	str	r3, [sp, #28]
 80081a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a8:	931a      	str	r3, [sp, #104]	; 0x68
 80081aa:	4654      	mov	r4, sl
 80081ac:	2205      	movs	r2, #5
 80081ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b2:	4858      	ldr	r0, [pc, #352]	; (8008314 <_vfiprintf_r+0x24c>)
 80081b4:	f000 fcaa 	bl	8008b0c <memchr>
 80081b8:	9a04      	ldr	r2, [sp, #16]
 80081ba:	b9d8      	cbnz	r0, 80081f4 <_vfiprintf_r+0x12c>
 80081bc:	06d1      	lsls	r1, r2, #27
 80081be:	bf44      	itt	mi
 80081c0:	2320      	movmi	r3, #32
 80081c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c6:	0713      	lsls	r3, r2, #28
 80081c8:	bf44      	itt	mi
 80081ca:	232b      	movmi	r3, #43	; 0x2b
 80081cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d0:	f89a 3000 	ldrb.w	r3, [sl]
 80081d4:	2b2a      	cmp	r3, #42	; 0x2a
 80081d6:	d015      	beq.n	8008204 <_vfiprintf_r+0x13c>
 80081d8:	4654      	mov	r4, sl
 80081da:	2000      	movs	r0, #0
 80081dc:	f04f 0c0a 	mov.w	ip, #10
 80081e0:	9a07      	ldr	r2, [sp, #28]
 80081e2:	4621      	mov	r1, r4
 80081e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e8:	3b30      	subs	r3, #48	; 0x30
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d94e      	bls.n	800828c <_vfiprintf_r+0x1c4>
 80081ee:	b1b0      	cbz	r0, 800821e <_vfiprintf_r+0x156>
 80081f0:	9207      	str	r2, [sp, #28]
 80081f2:	e014      	b.n	800821e <_vfiprintf_r+0x156>
 80081f4:	eba0 0308 	sub.w	r3, r0, r8
 80081f8:	fa09 f303 	lsl.w	r3, r9, r3
 80081fc:	4313      	orrs	r3, r2
 80081fe:	46a2      	mov	sl, r4
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	e7d2      	b.n	80081aa <_vfiprintf_r+0xe2>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	1d19      	adds	r1, r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	9103      	str	r1, [sp, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfbb      	ittet	lt
 8008210:	425b      	neglt	r3, r3
 8008212:	f042 0202 	orrlt.w	r2, r2, #2
 8008216:	9307      	strge	r3, [sp, #28]
 8008218:	9307      	strlt	r3, [sp, #28]
 800821a:	bfb8      	it	lt
 800821c:	9204      	strlt	r2, [sp, #16]
 800821e:	7823      	ldrb	r3, [r4, #0]
 8008220:	2b2e      	cmp	r3, #46	; 0x2e
 8008222:	d10c      	bne.n	800823e <_vfiprintf_r+0x176>
 8008224:	7863      	ldrb	r3, [r4, #1]
 8008226:	2b2a      	cmp	r3, #42	; 0x2a
 8008228:	d135      	bne.n	8008296 <_vfiprintf_r+0x1ce>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	3402      	adds	r4, #2
 800822e:	1d1a      	adds	r2, r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	9203      	str	r2, [sp, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfb8      	it	lt
 8008238:	f04f 33ff 	movlt.w	r3, #4294967295
 800823c:	9305      	str	r3, [sp, #20]
 800823e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008318 <_vfiprintf_r+0x250>
 8008242:	2203      	movs	r2, #3
 8008244:	4650      	mov	r0, sl
 8008246:	7821      	ldrb	r1, [r4, #0]
 8008248:	f000 fc60 	bl	8008b0c <memchr>
 800824c:	b140      	cbz	r0, 8008260 <_vfiprintf_r+0x198>
 800824e:	2340      	movs	r3, #64	; 0x40
 8008250:	eba0 000a 	sub.w	r0, r0, sl
 8008254:	fa03 f000 	lsl.w	r0, r3, r0
 8008258:	9b04      	ldr	r3, [sp, #16]
 800825a:	3401      	adds	r4, #1
 800825c:	4303      	orrs	r3, r0
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	2206      	movs	r2, #6
 8008266:	482d      	ldr	r0, [pc, #180]	; (800831c <_vfiprintf_r+0x254>)
 8008268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800826c:	f000 fc4e 	bl	8008b0c <memchr>
 8008270:	2800      	cmp	r0, #0
 8008272:	d03f      	beq.n	80082f4 <_vfiprintf_r+0x22c>
 8008274:	4b2a      	ldr	r3, [pc, #168]	; (8008320 <_vfiprintf_r+0x258>)
 8008276:	bb1b      	cbnz	r3, 80082c0 <_vfiprintf_r+0x1f8>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	3307      	adds	r3, #7
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	9303      	str	r3, [sp, #12]
 8008284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008286:	443b      	add	r3, r7
 8008288:	9309      	str	r3, [sp, #36]	; 0x24
 800828a:	e767      	b.n	800815c <_vfiprintf_r+0x94>
 800828c:	460c      	mov	r4, r1
 800828e:	2001      	movs	r0, #1
 8008290:	fb0c 3202 	mla	r2, ip, r2, r3
 8008294:	e7a5      	b.n	80081e2 <_vfiprintf_r+0x11a>
 8008296:	2300      	movs	r3, #0
 8008298:	f04f 0c0a 	mov.w	ip, #10
 800829c:	4619      	mov	r1, r3
 800829e:	3401      	adds	r4, #1
 80082a0:	9305      	str	r3, [sp, #20]
 80082a2:	4620      	mov	r0, r4
 80082a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a8:	3a30      	subs	r2, #48	; 0x30
 80082aa:	2a09      	cmp	r2, #9
 80082ac:	d903      	bls.n	80082b6 <_vfiprintf_r+0x1ee>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0c5      	beq.n	800823e <_vfiprintf_r+0x176>
 80082b2:	9105      	str	r1, [sp, #20]
 80082b4:	e7c3      	b.n	800823e <_vfiprintf_r+0x176>
 80082b6:	4604      	mov	r4, r0
 80082b8:	2301      	movs	r3, #1
 80082ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80082be:	e7f0      	b.n	80082a2 <_vfiprintf_r+0x1da>
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	4b16      	ldr	r3, [pc, #88]	; (8008324 <_vfiprintf_r+0x25c>)
 80082ca:	a904      	add	r1, sp, #16
 80082cc:	f3af 8000 	nop.w
 80082d0:	4607      	mov	r7, r0
 80082d2:	1c78      	adds	r0, r7, #1
 80082d4:	d1d6      	bne.n	8008284 <_vfiprintf_r+0x1bc>
 80082d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d8:	07d9      	lsls	r1, r3, #31
 80082da:	d405      	bmi.n	80082e8 <_vfiprintf_r+0x220>
 80082dc:	89ab      	ldrh	r3, [r5, #12]
 80082de:	059a      	lsls	r2, r3, #22
 80082e0:	d402      	bmi.n	80082e8 <_vfiprintf_r+0x220>
 80082e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e4:	f7ff fd5f 	bl	8007da6 <__retarget_lock_release_recursive>
 80082e8:	89ab      	ldrh	r3, [r5, #12]
 80082ea:	065b      	lsls	r3, r3, #25
 80082ec:	f53f af12 	bmi.w	8008114 <_vfiprintf_r+0x4c>
 80082f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f2:	e711      	b.n	8008118 <_vfiprintf_r+0x50>
 80082f4:	ab03      	add	r3, sp, #12
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	462a      	mov	r2, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	4b09      	ldr	r3, [pc, #36]	; (8008324 <_vfiprintf_r+0x25c>)
 80082fe:	a904      	add	r1, sp, #16
 8008300:	f000 f882 	bl	8008408 <_printf_i>
 8008304:	e7e4      	b.n	80082d0 <_vfiprintf_r+0x208>
 8008306:	bf00      	nop
 8008308:	08008d04 	.word	0x08008d04
 800830c:	08008d24 	.word	0x08008d24
 8008310:	08008ce4 	.word	0x08008ce4
 8008314:	08008d44 	.word	0x08008d44
 8008318:	08008d4a 	.word	0x08008d4a
 800831c:	08008d4e 	.word	0x08008d4e
 8008320:	00000000 	.word	0x00000000
 8008324:	080080a3 	.word	0x080080a3

08008328 <_printf_common>:
 8008328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832c:	4616      	mov	r6, r2
 800832e:	4699      	mov	r9, r3
 8008330:	688a      	ldr	r2, [r1, #8]
 8008332:	690b      	ldr	r3, [r1, #16]
 8008334:	4607      	mov	r7, r0
 8008336:	4293      	cmp	r3, r2
 8008338:	bfb8      	it	lt
 800833a:	4613      	movlt	r3, r2
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008342:	460c      	mov	r4, r1
 8008344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008348:	b10a      	cbz	r2, 800834e <_printf_common+0x26>
 800834a:	3301      	adds	r3, #1
 800834c:	6033      	str	r3, [r6, #0]
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	0699      	lsls	r1, r3, #26
 8008352:	bf42      	ittt	mi
 8008354:	6833      	ldrmi	r3, [r6, #0]
 8008356:	3302      	addmi	r3, #2
 8008358:	6033      	strmi	r3, [r6, #0]
 800835a:	6825      	ldr	r5, [r4, #0]
 800835c:	f015 0506 	ands.w	r5, r5, #6
 8008360:	d106      	bne.n	8008370 <_printf_common+0x48>
 8008362:	f104 0a19 	add.w	sl, r4, #25
 8008366:	68e3      	ldr	r3, [r4, #12]
 8008368:	6832      	ldr	r2, [r6, #0]
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	42ab      	cmp	r3, r5
 800836e:	dc28      	bgt.n	80083c2 <_printf_common+0x9a>
 8008370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008374:	1e13      	subs	r3, r2, #0
 8008376:	6822      	ldr	r2, [r4, #0]
 8008378:	bf18      	it	ne
 800837a:	2301      	movne	r3, #1
 800837c:	0692      	lsls	r2, r2, #26
 800837e:	d42d      	bmi.n	80083dc <_printf_common+0xb4>
 8008380:	4649      	mov	r1, r9
 8008382:	4638      	mov	r0, r7
 8008384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008388:	47c0      	blx	r8
 800838a:	3001      	adds	r0, #1
 800838c:	d020      	beq.n	80083d0 <_printf_common+0xa8>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	68e5      	ldr	r5, [r4, #12]
 8008392:	f003 0306 	and.w	r3, r3, #6
 8008396:	2b04      	cmp	r3, #4
 8008398:	bf18      	it	ne
 800839a:	2500      	movne	r5, #0
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	f04f 0600 	mov.w	r6, #0
 80083a2:	68a3      	ldr	r3, [r4, #8]
 80083a4:	bf08      	it	eq
 80083a6:	1aad      	subeq	r5, r5, r2
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	bf08      	it	eq
 80083ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b0:	4293      	cmp	r3, r2
 80083b2:	bfc4      	itt	gt
 80083b4:	1a9b      	subgt	r3, r3, r2
 80083b6:	18ed      	addgt	r5, r5, r3
 80083b8:	341a      	adds	r4, #26
 80083ba:	42b5      	cmp	r5, r6
 80083bc:	d11a      	bne.n	80083f4 <_printf_common+0xcc>
 80083be:	2000      	movs	r0, #0
 80083c0:	e008      	b.n	80083d4 <_printf_common+0xac>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4652      	mov	r2, sl
 80083c6:	4649      	mov	r1, r9
 80083c8:	4638      	mov	r0, r7
 80083ca:	47c0      	blx	r8
 80083cc:	3001      	adds	r0, #1
 80083ce:	d103      	bne.n	80083d8 <_printf_common+0xb0>
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d8:	3501      	adds	r5, #1
 80083da:	e7c4      	b.n	8008366 <_printf_common+0x3e>
 80083dc:	2030      	movs	r0, #48	; 0x30
 80083de:	18e1      	adds	r1, r4, r3
 80083e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083ea:	4422      	add	r2, r4
 80083ec:	3302      	adds	r3, #2
 80083ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083f2:	e7c5      	b.n	8008380 <_printf_common+0x58>
 80083f4:	2301      	movs	r3, #1
 80083f6:	4622      	mov	r2, r4
 80083f8:	4649      	mov	r1, r9
 80083fa:	4638      	mov	r0, r7
 80083fc:	47c0      	blx	r8
 80083fe:	3001      	adds	r0, #1
 8008400:	d0e6      	beq.n	80083d0 <_printf_common+0xa8>
 8008402:	3601      	adds	r6, #1
 8008404:	e7d9      	b.n	80083ba <_printf_common+0x92>
	...

08008408 <_printf_i>:
 8008408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	7e0f      	ldrb	r7, [r1, #24]
 800840e:	4691      	mov	r9, r2
 8008410:	2f78      	cmp	r7, #120	; 0x78
 8008412:	4680      	mov	r8, r0
 8008414:	460c      	mov	r4, r1
 8008416:	469a      	mov	sl, r3
 8008418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800841a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800841e:	d807      	bhi.n	8008430 <_printf_i+0x28>
 8008420:	2f62      	cmp	r7, #98	; 0x62
 8008422:	d80a      	bhi.n	800843a <_printf_i+0x32>
 8008424:	2f00      	cmp	r7, #0
 8008426:	f000 80d9 	beq.w	80085dc <_printf_i+0x1d4>
 800842a:	2f58      	cmp	r7, #88	; 0x58
 800842c:	f000 80a4 	beq.w	8008578 <_printf_i+0x170>
 8008430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008438:	e03a      	b.n	80084b0 <_printf_i+0xa8>
 800843a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800843e:	2b15      	cmp	r3, #21
 8008440:	d8f6      	bhi.n	8008430 <_printf_i+0x28>
 8008442:	a101      	add	r1, pc, #4	; (adr r1, 8008448 <_printf_i+0x40>)
 8008444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008448:	080084a1 	.word	0x080084a1
 800844c:	080084b5 	.word	0x080084b5
 8008450:	08008431 	.word	0x08008431
 8008454:	08008431 	.word	0x08008431
 8008458:	08008431 	.word	0x08008431
 800845c:	08008431 	.word	0x08008431
 8008460:	080084b5 	.word	0x080084b5
 8008464:	08008431 	.word	0x08008431
 8008468:	08008431 	.word	0x08008431
 800846c:	08008431 	.word	0x08008431
 8008470:	08008431 	.word	0x08008431
 8008474:	080085c3 	.word	0x080085c3
 8008478:	080084e5 	.word	0x080084e5
 800847c:	080085a5 	.word	0x080085a5
 8008480:	08008431 	.word	0x08008431
 8008484:	08008431 	.word	0x08008431
 8008488:	080085e5 	.word	0x080085e5
 800848c:	08008431 	.word	0x08008431
 8008490:	080084e5 	.word	0x080084e5
 8008494:	08008431 	.word	0x08008431
 8008498:	08008431 	.word	0x08008431
 800849c:	080085ad 	.word	0x080085ad
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	1d1a      	adds	r2, r3, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	602a      	str	r2, [r5, #0]
 80084a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0a4      	b.n	80085fe <_printf_i+0x1f6>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	6829      	ldr	r1, [r5, #0]
 80084b8:	0606      	lsls	r6, r0, #24
 80084ba:	f101 0304 	add.w	r3, r1, #4
 80084be:	d50a      	bpl.n	80084d6 <_printf_i+0xce>
 80084c0:	680e      	ldr	r6, [r1, #0]
 80084c2:	602b      	str	r3, [r5, #0]
 80084c4:	2e00      	cmp	r6, #0
 80084c6:	da03      	bge.n	80084d0 <_printf_i+0xc8>
 80084c8:	232d      	movs	r3, #45	; 0x2d
 80084ca:	4276      	negs	r6, r6
 80084cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d0:	230a      	movs	r3, #10
 80084d2:	485e      	ldr	r0, [pc, #376]	; (800864c <_printf_i+0x244>)
 80084d4:	e019      	b.n	800850a <_printf_i+0x102>
 80084d6:	680e      	ldr	r6, [r1, #0]
 80084d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	bf18      	it	ne
 80084e0:	b236      	sxthne	r6, r6
 80084e2:	e7ef      	b.n	80084c4 <_printf_i+0xbc>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	6820      	ldr	r0, [r4, #0]
 80084e8:	1d19      	adds	r1, r3, #4
 80084ea:	6029      	str	r1, [r5, #0]
 80084ec:	0601      	lsls	r1, r0, #24
 80084ee:	d501      	bpl.n	80084f4 <_printf_i+0xec>
 80084f0:	681e      	ldr	r6, [r3, #0]
 80084f2:	e002      	b.n	80084fa <_printf_i+0xf2>
 80084f4:	0646      	lsls	r6, r0, #25
 80084f6:	d5fb      	bpl.n	80084f0 <_printf_i+0xe8>
 80084f8:	881e      	ldrh	r6, [r3, #0]
 80084fa:	2f6f      	cmp	r7, #111	; 0x6f
 80084fc:	bf0c      	ite	eq
 80084fe:	2308      	moveq	r3, #8
 8008500:	230a      	movne	r3, #10
 8008502:	4852      	ldr	r0, [pc, #328]	; (800864c <_printf_i+0x244>)
 8008504:	2100      	movs	r1, #0
 8008506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800850a:	6865      	ldr	r5, [r4, #4]
 800850c:	2d00      	cmp	r5, #0
 800850e:	bfa8      	it	ge
 8008510:	6821      	ldrge	r1, [r4, #0]
 8008512:	60a5      	str	r5, [r4, #8]
 8008514:	bfa4      	itt	ge
 8008516:	f021 0104 	bicge.w	r1, r1, #4
 800851a:	6021      	strge	r1, [r4, #0]
 800851c:	b90e      	cbnz	r6, 8008522 <_printf_i+0x11a>
 800851e:	2d00      	cmp	r5, #0
 8008520:	d04d      	beq.n	80085be <_printf_i+0x1b6>
 8008522:	4615      	mov	r5, r2
 8008524:	fbb6 f1f3 	udiv	r1, r6, r3
 8008528:	fb03 6711 	mls	r7, r3, r1, r6
 800852c:	5dc7      	ldrb	r7, [r0, r7]
 800852e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008532:	4637      	mov	r7, r6
 8008534:	42bb      	cmp	r3, r7
 8008536:	460e      	mov	r6, r1
 8008538:	d9f4      	bls.n	8008524 <_printf_i+0x11c>
 800853a:	2b08      	cmp	r3, #8
 800853c:	d10b      	bne.n	8008556 <_printf_i+0x14e>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	07de      	lsls	r6, r3, #31
 8008542:	d508      	bpl.n	8008556 <_printf_i+0x14e>
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	6861      	ldr	r1, [r4, #4]
 8008548:	4299      	cmp	r1, r3
 800854a:	bfde      	ittt	le
 800854c:	2330      	movle	r3, #48	; 0x30
 800854e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008552:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008556:	1b52      	subs	r2, r2, r5
 8008558:	6122      	str	r2, [r4, #16]
 800855a:	464b      	mov	r3, r9
 800855c:	4621      	mov	r1, r4
 800855e:	4640      	mov	r0, r8
 8008560:	f8cd a000 	str.w	sl, [sp]
 8008564:	aa03      	add	r2, sp, #12
 8008566:	f7ff fedf 	bl	8008328 <_printf_common>
 800856a:	3001      	adds	r0, #1
 800856c:	d14c      	bne.n	8008608 <_printf_i+0x200>
 800856e:	f04f 30ff 	mov.w	r0, #4294967295
 8008572:	b004      	add	sp, #16
 8008574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008578:	4834      	ldr	r0, [pc, #208]	; (800864c <_printf_i+0x244>)
 800857a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800857e:	6829      	ldr	r1, [r5, #0]
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	f851 6b04 	ldr.w	r6, [r1], #4
 8008586:	6029      	str	r1, [r5, #0]
 8008588:	061d      	lsls	r5, r3, #24
 800858a:	d514      	bpl.n	80085b6 <_printf_i+0x1ae>
 800858c:	07df      	lsls	r7, r3, #31
 800858e:	bf44      	itt	mi
 8008590:	f043 0320 	orrmi.w	r3, r3, #32
 8008594:	6023      	strmi	r3, [r4, #0]
 8008596:	b91e      	cbnz	r6, 80085a0 <_printf_i+0x198>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	f023 0320 	bic.w	r3, r3, #32
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	2310      	movs	r3, #16
 80085a2:	e7af      	b.n	8008504 <_printf_i+0xfc>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	f043 0320 	orr.w	r3, r3, #32
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	2378      	movs	r3, #120	; 0x78
 80085ae:	4828      	ldr	r0, [pc, #160]	; (8008650 <_printf_i+0x248>)
 80085b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085b4:	e7e3      	b.n	800857e <_printf_i+0x176>
 80085b6:	0659      	lsls	r1, r3, #25
 80085b8:	bf48      	it	mi
 80085ba:	b2b6      	uxthmi	r6, r6
 80085bc:	e7e6      	b.n	800858c <_printf_i+0x184>
 80085be:	4615      	mov	r5, r2
 80085c0:	e7bb      	b.n	800853a <_printf_i+0x132>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	6826      	ldr	r6, [r4, #0]
 80085c6:	1d18      	adds	r0, r3, #4
 80085c8:	6961      	ldr	r1, [r4, #20]
 80085ca:	6028      	str	r0, [r5, #0]
 80085cc:	0635      	lsls	r5, r6, #24
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	d501      	bpl.n	80085d6 <_printf_i+0x1ce>
 80085d2:	6019      	str	r1, [r3, #0]
 80085d4:	e002      	b.n	80085dc <_printf_i+0x1d4>
 80085d6:	0670      	lsls	r0, r6, #25
 80085d8:	d5fb      	bpl.n	80085d2 <_printf_i+0x1ca>
 80085da:	8019      	strh	r1, [r3, #0]
 80085dc:	2300      	movs	r3, #0
 80085de:	4615      	mov	r5, r2
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	e7ba      	b.n	800855a <_printf_i+0x152>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	2100      	movs	r1, #0
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	602a      	str	r2, [r5, #0]
 80085ec:	681d      	ldr	r5, [r3, #0]
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 fa8b 	bl	8008b0c <memchr>
 80085f6:	b108      	cbz	r0, 80085fc <_printf_i+0x1f4>
 80085f8:	1b40      	subs	r0, r0, r5
 80085fa:	6060      	str	r0, [r4, #4]
 80085fc:	6863      	ldr	r3, [r4, #4]
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	2300      	movs	r3, #0
 8008602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008606:	e7a8      	b.n	800855a <_printf_i+0x152>
 8008608:	462a      	mov	r2, r5
 800860a:	4649      	mov	r1, r9
 800860c:	4640      	mov	r0, r8
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	47d0      	blx	sl
 8008612:	3001      	adds	r0, #1
 8008614:	d0ab      	beq.n	800856e <_printf_i+0x166>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	079b      	lsls	r3, r3, #30
 800861a:	d413      	bmi.n	8008644 <_printf_i+0x23c>
 800861c:	68e0      	ldr	r0, [r4, #12]
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	4298      	cmp	r0, r3
 8008622:	bfb8      	it	lt
 8008624:	4618      	movlt	r0, r3
 8008626:	e7a4      	b.n	8008572 <_printf_i+0x16a>
 8008628:	2301      	movs	r3, #1
 800862a:	4632      	mov	r2, r6
 800862c:	4649      	mov	r1, r9
 800862e:	4640      	mov	r0, r8
 8008630:	47d0      	blx	sl
 8008632:	3001      	adds	r0, #1
 8008634:	d09b      	beq.n	800856e <_printf_i+0x166>
 8008636:	3501      	adds	r5, #1
 8008638:	68e3      	ldr	r3, [r4, #12]
 800863a:	9903      	ldr	r1, [sp, #12]
 800863c:	1a5b      	subs	r3, r3, r1
 800863e:	42ab      	cmp	r3, r5
 8008640:	dcf2      	bgt.n	8008628 <_printf_i+0x220>
 8008642:	e7eb      	b.n	800861c <_printf_i+0x214>
 8008644:	2500      	movs	r5, #0
 8008646:	f104 0619 	add.w	r6, r4, #25
 800864a:	e7f5      	b.n	8008638 <_printf_i+0x230>
 800864c:	08008d55 	.word	0x08008d55
 8008650:	08008d66 	.word	0x08008d66

08008654 <__sread>:
 8008654:	b510      	push	{r4, lr}
 8008656:	460c      	mov	r4, r1
 8008658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865c:	f000 faae 	bl	8008bbc <_read_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	bfab      	itete	ge
 8008664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008666:	89a3      	ldrhlt	r3, [r4, #12]
 8008668:	181b      	addge	r3, r3, r0
 800866a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800866e:	bfac      	ite	ge
 8008670:	6563      	strge	r3, [r4, #84]	; 0x54
 8008672:	81a3      	strhlt	r3, [r4, #12]
 8008674:	bd10      	pop	{r4, pc}

08008676 <__swrite>:
 8008676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867a:	461f      	mov	r7, r3
 800867c:	898b      	ldrh	r3, [r1, #12]
 800867e:	4605      	mov	r5, r0
 8008680:	05db      	lsls	r3, r3, #23
 8008682:	460c      	mov	r4, r1
 8008684:	4616      	mov	r6, r2
 8008686:	d505      	bpl.n	8008694 <__swrite+0x1e>
 8008688:	2302      	movs	r3, #2
 800868a:	2200      	movs	r2, #0
 800868c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008690:	f000 f9c4 	bl	8008a1c <_lseek_r>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	4632      	mov	r2, r6
 8008698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	4628      	mov	r0, r5
 80086a0:	463b      	mov	r3, r7
 80086a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086aa:	f000 b869 	b.w	8008780 <_write_r>

080086ae <__sseek>:
 80086ae:	b510      	push	{r4, lr}
 80086b0:	460c      	mov	r4, r1
 80086b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b6:	f000 f9b1 	bl	8008a1c <_lseek_r>
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	bf15      	itete	ne
 80086c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ca:	81a3      	strheq	r3, [r4, #12]
 80086cc:	bf18      	it	ne
 80086ce:	81a3      	strhne	r3, [r4, #12]
 80086d0:	bd10      	pop	{r4, pc}

080086d2 <__sclose>:
 80086d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d6:	f000 b8d3 	b.w	8008880 <_close_r>
	...

080086dc <__swbuf_r>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	460e      	mov	r6, r1
 80086e0:	4614      	mov	r4, r2
 80086e2:	4605      	mov	r5, r0
 80086e4:	b118      	cbz	r0, 80086ee <__swbuf_r+0x12>
 80086e6:	6983      	ldr	r3, [r0, #24]
 80086e8:	b90b      	cbnz	r3, 80086ee <__swbuf_r+0x12>
 80086ea:	f7ff fabd 	bl	8007c68 <__sinit>
 80086ee:	4b21      	ldr	r3, [pc, #132]	; (8008774 <__swbuf_r+0x98>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	d12b      	bne.n	800874c <__swbuf_r+0x70>
 80086f4:	686c      	ldr	r4, [r5, #4]
 80086f6:	69a3      	ldr	r3, [r4, #24]
 80086f8:	60a3      	str	r3, [r4, #8]
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	071a      	lsls	r2, r3, #28
 80086fe:	d52f      	bpl.n	8008760 <__swbuf_r+0x84>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	b36b      	cbz	r3, 8008760 <__swbuf_r+0x84>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	6820      	ldr	r0, [r4, #0]
 8008708:	b2f6      	uxtb	r6, r6
 800870a:	1ac0      	subs	r0, r0, r3
 800870c:	6963      	ldr	r3, [r4, #20]
 800870e:	4637      	mov	r7, r6
 8008710:	4283      	cmp	r3, r0
 8008712:	dc04      	bgt.n	800871e <__swbuf_r+0x42>
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	f000 f944 	bl	80089a4 <_fflush_r>
 800871c:	bb30      	cbnz	r0, 800876c <__swbuf_r+0x90>
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	3001      	adds	r0, #1
 8008722:	3b01      	subs	r3, #1
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	701e      	strb	r6, [r3, #0]
 800872e:	6963      	ldr	r3, [r4, #20]
 8008730:	4283      	cmp	r3, r0
 8008732:	d004      	beq.n	800873e <__swbuf_r+0x62>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	07db      	lsls	r3, r3, #31
 8008738:	d506      	bpl.n	8008748 <__swbuf_r+0x6c>
 800873a:	2e0a      	cmp	r6, #10
 800873c:	d104      	bne.n	8008748 <__swbuf_r+0x6c>
 800873e:	4621      	mov	r1, r4
 8008740:	4628      	mov	r0, r5
 8008742:	f000 f92f 	bl	80089a4 <_fflush_r>
 8008746:	b988      	cbnz	r0, 800876c <__swbuf_r+0x90>
 8008748:	4638      	mov	r0, r7
 800874a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <__swbuf_r+0x9c>)
 800874e:	429c      	cmp	r4, r3
 8008750:	d101      	bne.n	8008756 <__swbuf_r+0x7a>
 8008752:	68ac      	ldr	r4, [r5, #8]
 8008754:	e7cf      	b.n	80086f6 <__swbuf_r+0x1a>
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <__swbuf_r+0xa0>)
 8008758:	429c      	cmp	r4, r3
 800875a:	bf08      	it	eq
 800875c:	68ec      	ldreq	r4, [r5, #12]
 800875e:	e7ca      	b.n	80086f6 <__swbuf_r+0x1a>
 8008760:	4621      	mov	r1, r4
 8008762:	4628      	mov	r0, r5
 8008764:	f000 f81e 	bl	80087a4 <__swsetup_r>
 8008768:	2800      	cmp	r0, #0
 800876a:	d0cb      	beq.n	8008704 <__swbuf_r+0x28>
 800876c:	f04f 37ff 	mov.w	r7, #4294967295
 8008770:	e7ea      	b.n	8008748 <__swbuf_r+0x6c>
 8008772:	bf00      	nop
 8008774:	08008d04 	.word	0x08008d04
 8008778:	08008d24 	.word	0x08008d24
 800877c:	08008ce4 	.word	0x08008ce4

08008780 <_write_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	4611      	mov	r1, r2
 8008788:	2200      	movs	r2, #0
 800878a:	4d05      	ldr	r5, [pc, #20]	; (80087a0 <_write_r+0x20>)
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7f7 fd0a 	bl	80001a8 <_write>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_write_r+0x1e>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_write_r+0x1e>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20001420 	.word	0x20001420

080087a4 <__swsetup_r>:
 80087a4:	4b32      	ldr	r3, [pc, #200]	; (8008870 <__swsetup_r+0xcc>)
 80087a6:	b570      	push	{r4, r5, r6, lr}
 80087a8:	681d      	ldr	r5, [r3, #0]
 80087aa:	4606      	mov	r6, r0
 80087ac:	460c      	mov	r4, r1
 80087ae:	b125      	cbz	r5, 80087ba <__swsetup_r+0x16>
 80087b0:	69ab      	ldr	r3, [r5, #24]
 80087b2:	b913      	cbnz	r3, 80087ba <__swsetup_r+0x16>
 80087b4:	4628      	mov	r0, r5
 80087b6:	f7ff fa57 	bl	8007c68 <__sinit>
 80087ba:	4b2e      	ldr	r3, [pc, #184]	; (8008874 <__swsetup_r+0xd0>)
 80087bc:	429c      	cmp	r4, r3
 80087be:	d10f      	bne.n	80087e0 <__swsetup_r+0x3c>
 80087c0:	686c      	ldr	r4, [r5, #4]
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087c8:	0719      	lsls	r1, r3, #28
 80087ca:	d42c      	bmi.n	8008826 <__swsetup_r+0x82>
 80087cc:	06dd      	lsls	r5, r3, #27
 80087ce:	d411      	bmi.n	80087f4 <__swsetup_r+0x50>
 80087d0:	2309      	movs	r3, #9
 80087d2:	6033      	str	r3, [r6, #0]
 80087d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	e03e      	b.n	800885e <__swsetup_r+0xba>
 80087e0:	4b25      	ldr	r3, [pc, #148]	; (8008878 <__swsetup_r+0xd4>)
 80087e2:	429c      	cmp	r4, r3
 80087e4:	d101      	bne.n	80087ea <__swsetup_r+0x46>
 80087e6:	68ac      	ldr	r4, [r5, #8]
 80087e8:	e7eb      	b.n	80087c2 <__swsetup_r+0x1e>
 80087ea:	4b24      	ldr	r3, [pc, #144]	; (800887c <__swsetup_r+0xd8>)
 80087ec:	429c      	cmp	r4, r3
 80087ee:	bf08      	it	eq
 80087f0:	68ec      	ldreq	r4, [r5, #12]
 80087f2:	e7e6      	b.n	80087c2 <__swsetup_r+0x1e>
 80087f4:	0758      	lsls	r0, r3, #29
 80087f6:	d512      	bpl.n	800881e <__swsetup_r+0x7a>
 80087f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fa:	b141      	cbz	r1, 800880e <__swsetup_r+0x6a>
 80087fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008800:	4299      	cmp	r1, r3
 8008802:	d002      	beq.n	800880a <__swsetup_r+0x66>
 8008804:	4630      	mov	r0, r6
 8008806:	f7ff f8ab 	bl	8007960 <_free_r>
 800880a:	2300      	movs	r3, #0
 800880c:	6363      	str	r3, [r4, #52]	; 0x34
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	2300      	movs	r3, #0
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	f043 0308 	orr.w	r3, r3, #8
 8008824:	81a3      	strh	r3, [r4, #12]
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	b94b      	cbnz	r3, 800883e <__swsetup_r+0x9a>
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008834:	d003      	beq.n	800883e <__swsetup_r+0x9a>
 8008836:	4621      	mov	r1, r4
 8008838:	4630      	mov	r0, r6
 800883a:	f000 f927 	bl	8008a8c <__smakebuf_r>
 800883e:	89a0      	ldrh	r0, [r4, #12]
 8008840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008844:	f010 0301 	ands.w	r3, r0, #1
 8008848:	d00a      	beq.n	8008860 <__swsetup_r+0xbc>
 800884a:	2300      	movs	r3, #0
 800884c:	60a3      	str	r3, [r4, #8]
 800884e:	6963      	ldr	r3, [r4, #20]
 8008850:	425b      	negs	r3, r3
 8008852:	61a3      	str	r3, [r4, #24]
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	b943      	cbnz	r3, 800886a <__swsetup_r+0xc6>
 8008858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800885c:	d1ba      	bne.n	80087d4 <__swsetup_r+0x30>
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	0781      	lsls	r1, r0, #30
 8008862:	bf58      	it	pl
 8008864:	6963      	ldrpl	r3, [r4, #20]
 8008866:	60a3      	str	r3, [r4, #8]
 8008868:	e7f4      	b.n	8008854 <__swsetup_r+0xb0>
 800886a:	2000      	movs	r0, #0
 800886c:	e7f7      	b.n	800885e <__swsetup_r+0xba>
 800886e:	bf00      	nop
 8008870:	2000017c 	.word	0x2000017c
 8008874:	08008d04 	.word	0x08008d04
 8008878:	08008d24 	.word	0x08008d24
 800887c:	08008ce4 	.word	0x08008ce4

08008880 <_close_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	2300      	movs	r3, #0
 8008884:	4d05      	ldr	r5, [pc, #20]	; (800889c <_close_r+0x1c>)
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	602b      	str	r3, [r5, #0]
 800888c:	f7f7 fe95 	bl	80005ba <_close>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_close_r+0x1a>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_close_r+0x1a>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	20001420 	.word	0x20001420

080088a0 <__sflush_r>:
 80088a0:	898a      	ldrh	r2, [r1, #12]
 80088a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a4:	4605      	mov	r5, r0
 80088a6:	0710      	lsls	r0, r2, #28
 80088a8:	460c      	mov	r4, r1
 80088aa:	d457      	bmi.n	800895c <__sflush_r+0xbc>
 80088ac:	684b      	ldr	r3, [r1, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dc04      	bgt.n	80088bc <__sflush_r+0x1c>
 80088b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc01      	bgt.n	80088bc <__sflush_r+0x1c>
 80088b8:	2000      	movs	r0, #0
 80088ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088be:	2e00      	cmp	r6, #0
 80088c0:	d0fa      	beq.n	80088b8 <__sflush_r+0x18>
 80088c2:	2300      	movs	r3, #0
 80088c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088c8:	682f      	ldr	r7, [r5, #0]
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	d032      	beq.n	8008934 <__sflush_r+0x94>
 80088ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	075a      	lsls	r2, r3, #29
 80088d4:	d505      	bpl.n	80088e2 <__sflush_r+0x42>
 80088d6:	6863      	ldr	r3, [r4, #4]
 80088d8:	1ac0      	subs	r0, r0, r3
 80088da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088dc:	b10b      	cbz	r3, 80088e2 <__sflush_r+0x42>
 80088de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088e0:	1ac0      	subs	r0, r0, r3
 80088e2:	2300      	movs	r3, #0
 80088e4:	4602      	mov	r2, r0
 80088e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088e8:	4628      	mov	r0, r5
 80088ea:	6a21      	ldr	r1, [r4, #32]
 80088ec:	47b0      	blx	r6
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	d106      	bne.n	8008902 <__sflush_r+0x62>
 80088f4:	6829      	ldr	r1, [r5, #0]
 80088f6:	291d      	cmp	r1, #29
 80088f8:	d82c      	bhi.n	8008954 <__sflush_r+0xb4>
 80088fa:	4a29      	ldr	r2, [pc, #164]	; (80089a0 <__sflush_r+0x100>)
 80088fc:	40ca      	lsrs	r2, r1
 80088fe:	07d6      	lsls	r6, r2, #31
 8008900:	d528      	bpl.n	8008954 <__sflush_r+0xb4>
 8008902:	2200      	movs	r2, #0
 8008904:	6062      	str	r2, [r4, #4]
 8008906:	6922      	ldr	r2, [r4, #16]
 8008908:	04d9      	lsls	r1, r3, #19
 800890a:	6022      	str	r2, [r4, #0]
 800890c:	d504      	bpl.n	8008918 <__sflush_r+0x78>
 800890e:	1c42      	adds	r2, r0, #1
 8008910:	d101      	bne.n	8008916 <__sflush_r+0x76>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	b903      	cbnz	r3, 8008918 <__sflush_r+0x78>
 8008916:	6560      	str	r0, [r4, #84]	; 0x54
 8008918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800891a:	602f      	str	r7, [r5, #0]
 800891c:	2900      	cmp	r1, #0
 800891e:	d0cb      	beq.n	80088b8 <__sflush_r+0x18>
 8008920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008924:	4299      	cmp	r1, r3
 8008926:	d002      	beq.n	800892e <__sflush_r+0x8e>
 8008928:	4628      	mov	r0, r5
 800892a:	f7ff f819 	bl	8007960 <_free_r>
 800892e:	2000      	movs	r0, #0
 8008930:	6360      	str	r0, [r4, #52]	; 0x34
 8008932:	e7c2      	b.n	80088ba <__sflush_r+0x1a>
 8008934:	6a21      	ldr	r1, [r4, #32]
 8008936:	2301      	movs	r3, #1
 8008938:	4628      	mov	r0, r5
 800893a:	47b0      	blx	r6
 800893c:	1c41      	adds	r1, r0, #1
 800893e:	d1c7      	bne.n	80088d0 <__sflush_r+0x30>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0c4      	beq.n	80088d0 <__sflush_r+0x30>
 8008946:	2b1d      	cmp	r3, #29
 8008948:	d001      	beq.n	800894e <__sflush_r+0xae>
 800894a:	2b16      	cmp	r3, #22
 800894c:	d101      	bne.n	8008952 <__sflush_r+0xb2>
 800894e:	602f      	str	r7, [r5, #0]
 8008950:	e7b2      	b.n	80088b8 <__sflush_r+0x18>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	e7ae      	b.n	80088ba <__sflush_r+0x1a>
 800895c:	690f      	ldr	r7, [r1, #16]
 800895e:	2f00      	cmp	r7, #0
 8008960:	d0aa      	beq.n	80088b8 <__sflush_r+0x18>
 8008962:	0793      	lsls	r3, r2, #30
 8008964:	bf18      	it	ne
 8008966:	2300      	movne	r3, #0
 8008968:	680e      	ldr	r6, [r1, #0]
 800896a:	bf08      	it	eq
 800896c:	694b      	ldreq	r3, [r1, #20]
 800896e:	1bf6      	subs	r6, r6, r7
 8008970:	600f      	str	r7, [r1, #0]
 8008972:	608b      	str	r3, [r1, #8]
 8008974:	2e00      	cmp	r6, #0
 8008976:	dd9f      	ble.n	80088b8 <__sflush_r+0x18>
 8008978:	4633      	mov	r3, r6
 800897a:	463a      	mov	r2, r7
 800897c:	4628      	mov	r0, r5
 800897e:	6a21      	ldr	r1, [r4, #32]
 8008980:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008984:	47e0      	blx	ip
 8008986:	2800      	cmp	r0, #0
 8008988:	dc06      	bgt.n	8008998 <__sflush_r+0xf8>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	e790      	b.n	80088ba <__sflush_r+0x1a>
 8008998:	4407      	add	r7, r0
 800899a:	1a36      	subs	r6, r6, r0
 800899c:	e7ea      	b.n	8008974 <__sflush_r+0xd4>
 800899e:	bf00      	nop
 80089a0:	20400001 	.word	0x20400001

080089a4 <_fflush_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	690b      	ldr	r3, [r1, #16]
 80089a8:	4605      	mov	r5, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	b913      	cbnz	r3, 80089b4 <_fflush_r+0x10>
 80089ae:	2500      	movs	r5, #0
 80089b0:	4628      	mov	r0, r5
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	b118      	cbz	r0, 80089be <_fflush_r+0x1a>
 80089b6:	6983      	ldr	r3, [r0, #24]
 80089b8:	b90b      	cbnz	r3, 80089be <_fflush_r+0x1a>
 80089ba:	f7ff f955 	bl	8007c68 <__sinit>
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <_fflush_r+0x6c>)
 80089c0:	429c      	cmp	r4, r3
 80089c2:	d11b      	bne.n	80089fc <_fflush_r+0x58>
 80089c4:	686c      	ldr	r4, [r5, #4]
 80089c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0ef      	beq.n	80089ae <_fflush_r+0xa>
 80089ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089d0:	07d0      	lsls	r0, r2, #31
 80089d2:	d404      	bmi.n	80089de <_fflush_r+0x3a>
 80089d4:	0599      	lsls	r1, r3, #22
 80089d6:	d402      	bmi.n	80089de <_fflush_r+0x3a>
 80089d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089da:	f7ff f9e3 	bl	8007da4 <__retarget_lock_acquire_recursive>
 80089de:	4628      	mov	r0, r5
 80089e0:	4621      	mov	r1, r4
 80089e2:	f7ff ff5d 	bl	80088a0 <__sflush_r>
 80089e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089e8:	4605      	mov	r5, r0
 80089ea:	07da      	lsls	r2, r3, #31
 80089ec:	d4e0      	bmi.n	80089b0 <_fflush_r+0xc>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	059b      	lsls	r3, r3, #22
 80089f2:	d4dd      	bmi.n	80089b0 <_fflush_r+0xc>
 80089f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f6:	f7ff f9d6 	bl	8007da6 <__retarget_lock_release_recursive>
 80089fa:	e7d9      	b.n	80089b0 <_fflush_r+0xc>
 80089fc:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <_fflush_r+0x70>)
 80089fe:	429c      	cmp	r4, r3
 8008a00:	d101      	bne.n	8008a06 <_fflush_r+0x62>
 8008a02:	68ac      	ldr	r4, [r5, #8]
 8008a04:	e7df      	b.n	80089c6 <_fflush_r+0x22>
 8008a06:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <_fflush_r+0x74>)
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	bf08      	it	eq
 8008a0c:	68ec      	ldreq	r4, [r5, #12]
 8008a0e:	e7da      	b.n	80089c6 <_fflush_r+0x22>
 8008a10:	08008d04 	.word	0x08008d04
 8008a14:	08008d24 	.word	0x08008d24
 8008a18:	08008ce4 	.word	0x08008ce4

08008a1c <_lseek_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	4d05      	ldr	r5, [pc, #20]	; (8008a3c <_lseek_r+0x20>)
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7f7 fde9 	bl	8000602 <_lseek>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_lseek_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_lseek_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	20001420 	.word	0x20001420

08008a40 <__swhatbuf_r>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	460e      	mov	r6, r1
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	4614      	mov	r4, r2
 8008a4a:	2900      	cmp	r1, #0
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	b096      	sub	sp, #88	; 0x58
 8008a50:	da08      	bge.n	8008a64 <__swhatbuf_r+0x24>
 8008a52:	2200      	movs	r2, #0
 8008a54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a58:	602a      	str	r2, [r5, #0]
 8008a5a:	061a      	lsls	r2, r3, #24
 8008a5c:	d410      	bmi.n	8008a80 <__swhatbuf_r+0x40>
 8008a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a62:	e00e      	b.n	8008a82 <__swhatbuf_r+0x42>
 8008a64:	466a      	mov	r2, sp
 8008a66:	f000 f8bb 	bl	8008be0 <_fstat_r>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	dbf1      	blt.n	8008a52 <__swhatbuf_r+0x12>
 8008a6e:	9a01      	ldr	r2, [sp, #4]
 8008a70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a78:	425a      	negs	r2, r3
 8008a7a:	415a      	adcs	r2, r3
 8008a7c:	602a      	str	r2, [r5, #0]
 8008a7e:	e7ee      	b.n	8008a5e <__swhatbuf_r+0x1e>
 8008a80:	2340      	movs	r3, #64	; 0x40
 8008a82:	2000      	movs	r0, #0
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	b016      	add	sp, #88	; 0x58
 8008a88:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a8c <__smakebuf_r>:
 8008a8c:	898b      	ldrh	r3, [r1, #12]
 8008a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a90:	079d      	lsls	r5, r3, #30
 8008a92:	4606      	mov	r6, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	d507      	bpl.n	8008aa8 <__smakebuf_r+0x1c>
 8008a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	6123      	str	r3, [r4, #16]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	6163      	str	r3, [r4, #20]
 8008aa4:	b002      	add	sp, #8
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	466a      	mov	r2, sp
 8008aaa:	ab01      	add	r3, sp, #4
 8008aac:	f7ff ffc8 	bl	8008a40 <__swhatbuf_r>
 8008ab0:	9900      	ldr	r1, [sp, #0]
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7fe ffbb 	bl	8007a30 <_malloc_r>
 8008aba:	b948      	cbnz	r0, 8008ad0 <__smakebuf_r+0x44>
 8008abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac0:	059a      	lsls	r2, r3, #22
 8008ac2:	d4ef      	bmi.n	8008aa4 <__smakebuf_r+0x18>
 8008ac4:	f023 0303 	bic.w	r3, r3, #3
 8008ac8:	f043 0302 	orr.w	r3, r3, #2
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	e7e3      	b.n	8008a98 <__smakebuf_r+0xc>
 8008ad0:	4b0d      	ldr	r3, [pc, #52]	; (8008b08 <__smakebuf_r+0x7c>)
 8008ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	6020      	str	r0, [r4, #0]
 8008ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	9b00      	ldr	r3, [sp, #0]
 8008ae0:	6120      	str	r0, [r4, #16]
 8008ae2:	6163      	str	r3, [r4, #20]
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	b15b      	cbz	r3, 8008b00 <__smakebuf_r+0x74>
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aee:	f000 f889 	bl	8008c04 <_isatty_r>
 8008af2:	b128      	cbz	r0, 8008b00 <__smakebuf_r+0x74>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	f043 0301 	orr.w	r3, r3, #1
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	89a0      	ldrh	r0, [r4, #12]
 8008b02:	4305      	orrs	r5, r0
 8008b04:	81a5      	strh	r5, [r4, #12]
 8008b06:	e7cd      	b.n	8008aa4 <__smakebuf_r+0x18>
 8008b08:	08007c01 	.word	0x08007c01

08008b0c <memchr>:
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	b510      	push	{r4, lr}
 8008b10:	b2c9      	uxtb	r1, r1
 8008b12:	4402      	add	r2, r0
 8008b14:	4293      	cmp	r3, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	d101      	bne.n	8008b1e <memchr+0x12>
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e003      	b.n	8008b26 <memchr+0x1a>
 8008b1e:	7804      	ldrb	r4, [r0, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	428c      	cmp	r4, r1
 8008b24:	d1f6      	bne.n	8008b14 <memchr+0x8>
 8008b26:	bd10      	pop	{r4, pc}

08008b28 <memmove>:
 8008b28:	4288      	cmp	r0, r1
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	eb01 0402 	add.w	r4, r1, r2
 8008b30:	d902      	bls.n	8008b38 <memmove+0x10>
 8008b32:	4284      	cmp	r4, r0
 8008b34:	4623      	mov	r3, r4
 8008b36:	d807      	bhi.n	8008b48 <memmove+0x20>
 8008b38:	1e43      	subs	r3, r0, #1
 8008b3a:	42a1      	cmp	r1, r4
 8008b3c:	d008      	beq.n	8008b50 <memmove+0x28>
 8008b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b46:	e7f8      	b.n	8008b3a <memmove+0x12>
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4402      	add	r2, r0
 8008b4c:	428a      	cmp	r2, r1
 8008b4e:	d100      	bne.n	8008b52 <memmove+0x2a>
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b5a:	e7f7      	b.n	8008b4c <memmove+0x24>

08008b5c <_realloc_r>:
 8008b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b60:	4680      	mov	r8, r0
 8008b62:	4614      	mov	r4, r2
 8008b64:	460e      	mov	r6, r1
 8008b66:	b921      	cbnz	r1, 8008b72 <_realloc_r+0x16>
 8008b68:	4611      	mov	r1, r2
 8008b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	f7fe bf5f 	b.w	8007a30 <_malloc_r>
 8008b72:	b92a      	cbnz	r2, 8008b80 <_realloc_r+0x24>
 8008b74:	f7fe fef4 	bl	8007960 <_free_r>
 8008b78:	4625      	mov	r5, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	f000 f850 	bl	8008c24 <_malloc_usable_size_r>
 8008b84:	4284      	cmp	r4, r0
 8008b86:	4607      	mov	r7, r0
 8008b88:	d802      	bhi.n	8008b90 <_realloc_r+0x34>
 8008b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b8e:	d812      	bhi.n	8008bb6 <_realloc_r+0x5a>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4640      	mov	r0, r8
 8008b94:	f7fe ff4c 	bl	8007a30 <_malloc_r>
 8008b98:	4605      	mov	r5, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0ed      	beq.n	8008b7a <_realloc_r+0x1e>
 8008b9e:	42bc      	cmp	r4, r7
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	bf28      	it	cs
 8008ba6:	463a      	movcs	r2, r7
 8008ba8:	f7fe fec4 	bl	8007934 <memcpy>
 8008bac:	4631      	mov	r1, r6
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f7fe fed6 	bl	8007960 <_free_r>
 8008bb4:	e7e1      	b.n	8008b7a <_realloc_r+0x1e>
 8008bb6:	4635      	mov	r5, r6
 8008bb8:	e7df      	b.n	8008b7a <_realloc_r+0x1e>
	...

08008bbc <_read_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4d05      	ldr	r5, [pc, #20]	; (8008bdc <_read_r+0x20>)
 8008bc8:	602a      	str	r2, [r5, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f7f7 fcd8 	bl	8000580 <_read>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d102      	bne.n	8008bda <_read_r+0x1e>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	b103      	cbz	r3, 8008bda <_read_r+0x1e>
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	20001420 	.word	0x20001420

08008be0 <_fstat_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	2300      	movs	r3, #0
 8008be4:	4d06      	ldr	r5, [pc, #24]	; (8008c00 <_fstat_r+0x20>)
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	4611      	mov	r1, r2
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	f7f7 fcef 	bl	80005d0 <_fstat>
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	d102      	bne.n	8008bfc <_fstat_r+0x1c>
 8008bf6:	682b      	ldr	r3, [r5, #0]
 8008bf8:	b103      	cbz	r3, 8008bfc <_fstat_r+0x1c>
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	bd38      	pop	{r3, r4, r5, pc}
 8008bfe:	bf00      	nop
 8008c00:	20001420 	.word	0x20001420

08008c04 <_isatty_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	2300      	movs	r3, #0
 8008c08:	4d05      	ldr	r5, [pc, #20]	; (8008c20 <_isatty_r+0x1c>)
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7f7 fced 	bl	80005ee <_isatty>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_isatty_r+0x1a>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_isatty_r+0x1a>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20001420 	.word	0x20001420

08008c24 <_malloc_usable_size_r>:
 8008c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c28:	1f18      	subs	r0, r3, #4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bfbc      	itt	lt
 8008c2e:	580b      	ldrlt	r3, [r1, r0]
 8008c30:	18c0      	addlt	r0, r0, r3
 8008c32:	4770      	bx	lr

08008c34 <_init>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	bf00      	nop
 8008c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3a:	bc08      	pop	{r3}
 8008c3c:	469e      	mov	lr, r3
 8008c3e:	4770      	bx	lr

08008c40 <_fini>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr
